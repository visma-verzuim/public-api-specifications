openapi: 3.0.0
info:
  title: 'BlueVi API'
  description: 'Communicate with BlueVi directly over 100+ API endpoints.'
  version: v1
paths:
  /absence-reason:
    get:
      tags:
        - 'Absence Reasons'
      summary: 'Get a list of absence reasons'
      operationId: absencereason-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the absence reason'
          schema:
            type: string
            format: uuid
          example: e8f92546-5970-43ae-9f44-2fd4687bfd6b
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the absence reason'
          schema:
            type: string
          example: sick-out-of-service
        -
          name: 'filter[code]'
          in: query
          description: 'Filter by absence reason code (code is user-defined)'
          schema:
            type: string
          example: ZUD
        -
          name: 'filter[isPrimary]'
          in: query
          description: 'Returns only primary absence reasons when true'
          schema:
            type: boolean
          example: false
        -
          name: sort
          in: query
          description: "Sorts results ascending by the given option, options prefixed with '-' sort descending"
          schema:
            $ref: '#/components/schemas/GetAbsenceReasonSortOptions'
      responses:
        200:
          description: 'A list of absence reasons that match the given filters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAbsenceReasonResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /appointment:
    get:
      tags:
        - Appointments
      summary: 'Get a list of appointments'
      operationId: appointment-get-v1-ultimate
      parameters:
        -
          name: 'filter[title]'
          in: query
          description: 'Filter by the appointment title. Matches partial strings, case-insensitive.'
          schema:
            type: string
        -
          name: 'filter[dateStartFrom]'
          in: query
          description: 'Filter by the earliest start date you want to see appointments for. Format: YYYY-MM-DD'
          schema:
            type: string
            format: date
          example: '2025-01-01'
        -
          name: 'filter[dateStartUntil]'
          in: query
          description: 'Filter by the last start date you want to see appointments for. Format: YYYY-MM-DD'
          schema:
            type: string
            format: date
          example: '2025-01-31'
        -
          name: 'filter[userId]'
          in: query
          description: 'Filter by the unique identifier of the user. Must be a valid UUID.'
          schema:
            type: string
            format: uuid
          example: 8366316b-1304-482e-bf53-0067174d477a
        -
          name: 'filter[status]'
          in: query
          description: 'Filter by the status of the appointment.'
          schema:
            $ref: '#/components/schemas/AppointmentStatusEnumOptions'
        -
          name: 'filter[employerId]'
          in: query
          description: 'Show only appointments for the specified employer. Must be a valid UUID.'
          schema:
            type: string
            format: uuid
          example: 8366316b-1304-482e-bf53-0067174d477a
        -
          name: 'filter[employeeId]'
          in: query
          description: 'Show only appointments for the specified employee. Must be a valid UUID.'
          schema:
            type: string
            format: uuid
          example: 8366316b-1304-482e-bf53-0067174d477a
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetAppointmentIncludeOptions'
      responses:
        200:
          description: 'A list of appointments'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAppointmentResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /auth/partner/token:
    post:
      tags:
        - Authentication
      summary: '(DEPRECATED) Obtain an access token token using the client id and secret'
      operationId: auth-partner-token-post-v1-essential
      requestBody:
        description: 'Token authentication request body'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAuthTokenRequestBody'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthBadRequestResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        422:
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
      deprecated: true
  /auth/token:
    post:
      tags:
        - Authentication
      summary: 'Obtain an access token token using the client id and secret.'
      operationId: auth-token-post-v1-essential
      requestBody:
        description: 'Token authentication request body'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAuthTokenRequestBody'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthBadRequestResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        422:
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /health/ping:
    get:
      tags:
        - Health
      summary: 'Health check'
      description: 'This endpoint checks if the API is online and operational, confirming that it is running smoothly and able to respond to requests.'
      operationId: health-ping-get-v1-essential
      responses:
        200:
          description: 'The health check was successful and the API is functioning properly.'
        500:
          description: 'An internal server error occurred. This indicates that there was an issue processing the health check.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /arbo-role:
    get:
      tags:
        - 'User Roles'
      summary: 'Get a list of arbo roles that can be assigned to users'
      operationId: arborole-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter arbo roles by their unique identifier'
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter arbo roles by the key as known in external systems'
          required: false
          schema:
            type: string
        -
          name: 'filter[active]'
          in: query
          description: 'Filter arbo roles by active status'
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: 'A list of available arbo roles'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArboRoleResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /company-doctor:
    get:
      tags:
        - 'Company Doctors'
      summary: 'Get a list of company doctors'
      operationId: companydoctor-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the company doctor'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key of the company doctor, known in an external system '
          schema:
            type: string
        -
          name: 'filter[username]'
          in: query
          description: 'Filter by the username of the company doctor'
          schema:
            type: string
      responses:
        200:
          description: 'A list of company doctors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompanyDoctorResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/contact-persons/{type}':
    patch:
      tags:
        - ContactPerson
      summary: 'Update an existing contact person'
      description: 'Update an existing contact person'
      operationId: contactperson-type-patch-v1-advanced
      parameters:
        -
          name: type
          in: path
          description: 'Type of contact person (employer or organizational-unit)'
          required: true
          schema:
            $ref: '#/components/schemas/PatchContactPersonTypeEnumOptions'
      requestBody:
        description: 'Contact person data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchContactPersonRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchContactPersonResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/contact-persons/{type}/{uuid}':
    patch:
      tags:
        - ContactPerson
      summary: 'Update an existing contact person'
      description: 'Update an existing contact person by their unique identifier'
      operationId: contactperson-type-id-patch-v1-advanced
      parameters:
        -
          name: type
          in: path
          description: 'Type of contact person (employer or organizational-unit)'
          required: true
          schema:
            $ref: '#/components/schemas/PostContactPersonTypeEnumOptions'
        -
          name: uuid
          in: path
          description: 'The unique identifier of the contact person to be updated'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Contact person data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchContactPersonRequestBody'
      responses:
        200:
          description: 'Successful request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchContactPersonResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/contact-person/{type}':
    post:
      tags:
        - ContactPerson
      summary: 'Create a new contact person'
      description: 'Creates a new contact person for either an employer or organizational unit. This endpoint handles the creation process and associates the contact person with the specified entity.'
      operationId: contactperson-post-v1-essential
      parameters:
        -
          name: type
          in: path
          description: 'Type of contact person (employer or organizational-unit)'
          required: true
          schema:
            $ref: '#/components/schemas/PostContactPersonTypeEnumOptions'
      requestBody:
        description: 'Contact person data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostContactPersonRequestBody'
      responses:
        201:
          description: 'Contact person successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactPerson'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/employer-contract/{id}':
    delete:
      tags:
        - EmployerContracts
      summary: 'Delete an employer contract'
      description: 'Deletes an employer contract based on the ID.'
      operationId: employercontract-id-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the employer contract to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Employer contract successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/contract/contract-type:
    get:
      tags:
        - EmployerContracts
      summary: 'Get a list of contract types that can be applied to employer contracts'
      operationId: contracttype-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the contract-type'
          schema:
            type: string
            format: uuid
          example: 256b29f2-9090-4623-922c-10c297f22284
        -
          name: 'filter[active]'
          in: query
          description: 'Filter by active contract-types'
          schema:
            type: boolean
        -
          name: 'filter[search]'
          in: query
          description: "Performs a 'LIKE %value%' query on the 'name' and 'code' fields"
          schema:
            type: string
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the contract type'
          schema:
            type: string
        -
          name: 'filter[type]'
          in: query
          description: 'Filter by the type of the contract type'
          schema:
            $ref: '#/components/schemas/ContractTypeTypeEnumOptions'
        -
          name: sort
          in: query
          description: 'Sort results by a specific field'
          schema:
            $ref: '#/components/schemas/GetContractTypeSortOptions'
      responses:
        200:
          description: 'A list of contract types'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContractTypeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /employer-contract:
    get:
      tags:
        - EmployerContracts
      summary: 'Get a list of employer contracts'
      operationId: employercontract-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the employer contract'
          schema:
            type: string
            format: uuid
          example: 8366316b-1304-482e-bf53-0067174d477a
        -
          name: 'filter[employerId]'
          in: query
          description: 'Filter by the unique identifier of the employer'
          schema:
            type: string
            format: uuid
          example: b7f89402-11aa-4e20-b16e-99fe2ea594d2
        -
          name: 'filter[employerKey]'
          in: query
          description: 'Filter by the external key associated with the employer'
          schema:
            type: string
          example: EXT-EMP-1234
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the employer contract'
          schema:
            type: string
          example: EXT-EMP-CNT-312
        -
          name: 'filter[dateStartFrom]'
          in: query
          description: 'Filter Employer Contracts by start date (Employer Contracts that start on or after this date)'
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateStartUntil]'
          in: query
          description: 'Filter Employer Contracts by start date (Employer Contracts that start on or before this date)'
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter Employer Contracts by update date (Employer Contracts that have been updated on or after this date)'
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter Employer Contracts by update date (Employer Contracts that have been updated on or before this date)'
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateEndFrom]'
          in: query
          description: 'Filter Employer Contracts by end date (Employer Contracts that end on or after this date)'
          schema:
            type: string
            format: date-time-offset
        -
          name: 'filter[dateEndFromOrNull]'
          in: query
          description: 'Retrieve Employer Contracts that end after this date or have no end date, i.e. all active contracts on this date.'
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateEndUntil]'
          in: query
          description: 'Filter Employer Contracts by end date (Employer Contracts that end on or before this date)'
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[status]'
          in: query
          description: 'Filter by the status of the employer contract'
          schema:
            $ref: '#/components/schemas/EmployerContractStatusEnumOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetEmployerContractIncludeOptions'
      responses:
        200:
          description: 'A list of employer contracts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployerContractResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - EmployerContracts
      summary: 'Create an employer contract'
      operationId: employercontract-post-v1-essential
      requestBody:
        description: 'Employer Contract data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmployerContractRequestBody'
      responses:
        201:
          description: 'Employer successfully created'
          content:
            application/json:
              schema:
                oneOf:
                  -
                    $ref: '#/components/schemas/EmployerContract'
                  -
                    $ref: '#/components/schemas/EmployerServiceContract'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - EmployerContracts
      summary: 'Update an existing employer contract'
      description: 'Update an Employer Contract by applying changes to an existing contract.'
      operationId: employercontract-patch-v1-essential
      requestBody:
        description: 'Employer Contract data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployerContractRequestBody'
      responses:
        200:
          description: 'Employer successfully updated'
          content:
            application/json:
              schema:
                oneOf:
                  -
                    $ref: '#/components/schemas/EmployerContract'
                  -
                    $ref: '#/components/schemas/EmployerServiceContract'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/contract/modules:
    get:
      tags:
        - EmployerContracts
      summary: 'Get a list of modules that can be applied to employer contracts (uses the employercontracts scope)'
      operationId: contract-modules-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by ID'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[name]'
          in: query
          description: 'Filter by module name'
          schema:
            type: string
        -
          name: 'filter[code]'
          in: query
          description: 'Filter by module code'
          schema:
            type: string
        -
          name: 'filter[description]'
          in: query
          description: 'Filter by module description'
          schema:
            type: string
      responses:
        200:
          description: 'A list of modules that can be applied to employer contracts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContractModulesResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/contract/partnership:
    get:
      tags:
        - EmployerContracts
      summary: 'Get a list of partnerships that can be applied to employer contracts'
      operationId: contract-partnership-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the partnership'
          schema:
            type: string
            format: uuid
          example: 48fb739b-5153-4676-afb6-5221fc32c80a
        -
          name: 'filter[active]'
          in: query
          description: 'Filter partnerships with an active status'
          schema:
            type: boolean
        -
          name: 'filter[default]'
          in: query
          description: "Filter partnerships with a 'default' status"
          schema:
            type: boolean
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key of an external system associated to the partnership'
          schema:
            type: string
        -
          name: 'filter[search]'
          in: query
          description: "Performs a 'LIKE %value%' search on the 'name' field"
          schema:
            type: string
        -
          name: sort
          in: query
          description: 'sort results by a specific field'
          schema:
            $ref: '#/components/schemas/GetPartnershipSortOptions'
      responses:
        200:
          description: 'A list of partnerships'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPartnershipResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/contract/service-type:
    get:
      tags:
        - EmployerContracts
      summary: 'Get a list of service types that can be applied to employer contracts'
      operationId: contract-servicetype-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the service-type'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[active]'
          in: query
          description: 'Filter service-types with the active status'
          schema:
            type: boolean
      responses:
        200:
          description: 'A list of service types'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServiceTypeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/absence-course/{id}':
    delete:
      tags:
        - AbsenceCourse
      summary: 'Delete an absence course'
      description: 'Deletes an absence course based on the unique identifier. This operation also updates the status of a dossier.'
      operationId: absencecourse-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the absence course to delete.'
          required: true
          schema:
            type: string
            format: uuid
          example: 75401c03-5ce8-4bf7-ac92-becd03291fe1
      responses:
        200:
          description: 'Absence course successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /absence-course:
    get:
      tags:
        - AbsenceCourse
      summary: 'Get a list of absence courses'
      operationId: absencecourse-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific absence course'
          schema:
            type: string
            format: uuid
          example: 75401c03-5ce8-4bf7-ac92-becd03291fe1
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
          example: fef37f13-d754-4016-bf57-c79ece2be9f8
        -
          name: 'filter[dossierKey]'
          in: query
          description: 'Filter by the external key of a specific dossier'
          schema:
            type: string
          example: DOS-1234
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key of the absence-course'
          schema:
            type: string
          example: verzuimverloop-1234.03
        -
          name: 'filter[employeeId]'
          in: query
          description: 'Filter by the unique identifier of a specific employee'
          schema:
            type: string
            format: uuid
          example: 4403fa85-d75f-4c98-b8e4-67ca7e50d6ed
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
            format: uuid
          example: 6f099eed-2146-4af7-bf0e-f174575b1fbd
        -
          name: 'filter[absenceReasonId]'
          in: query
          description: 'Filter by the unique identifier of a specific absence reason'
          schema:
            type: string
            format: uuid
          example: d4f198bb-5039-4311-9674-7d19cea722ba
        -
          name: 'filter[employeeNumber]'
          in: query
          description: "Filter by an employee's employee number"
          schema:
            type: string
          example: PNR1001
        -
          name: 'filter[dateStartFrom]'
          in: query
          description: "Filter by dateStart, combine 'dateStartFrom' and 'dateStartUntil' to filter by a range"
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateStartUntil]'
          in: query
          description: "Filter by dateStart, combine 'dateStartFrom' and 'dateStartUntil' to filter by a range"
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateEndFrom]'
          in: query
          description: "Filter by dateEnd, combine 'dateEndFrom' and 'dateEndUntil' to filter by a range"
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateEndUntil]'
          in: query
          description: "Filter by dateEnd, combine 'dateEndFrom' and 'dateEndUntil' to filter by a range"
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: "Filter by dateUpdated, combine 'dateUpdatedStart' and 'dateUpdatedUntil' to filter by a range"
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: "Filter by dateUpdated, combine 'dateUpdatedFrom' and 'dateUpdatedUntil' to filter by a range"
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        -
          name: sort
          in: query
          description: "Sort results by given options, use '-' to sort descending"
          schema:
            $ref: '#/components/schemas/GetAbsenceCourseSortOptions'
        -
          name: include
          in: query
          description: 'Include related resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetAbsenceCourseIncludeOptions'
      responses:
        200:
          description: 'A list of AbsenceCourses'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAbsenceCourseResponse'
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - AbsenceCourse
      summary: 'Create an absence course'
      description: 'An AbsenceCourse is an event in an absence dossier, such as an employee being reported sick or recovering partially or fully. This endpoint either starts a new dossier or adds the absence to an existing one based on composite absence rules.'
      operationId: absencecourse-post-v1-essential
      requestBody:
        description: 'Absence course data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAbsenceCourseRequestBody'
      responses:
        201:
          description: 'Absence course successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbsenceCourse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - AbsenceCourse
      summary: 'Update an existing absence course'
      description: 'Update an AbsenceCourse by applying changes to an existing course.'
      operationId: absencecourse-patch-v1-essential
      requestBody:
        description: 'Absence course data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAbsenceCourseRequestBody'
      responses:
        200:
          description: 'Absence course successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbsenceCourse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/{id}':
    delete:
      tags:
        - Dossier
      summary: 'Delete a dossier'
      description: 'Deletes a dossier based on the ID.'
      operationId: dossier-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the dossier to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Dossier successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/dossier/document-types:
    get:
      tags:
        - DossierContent
      summary: 'Get a list of document types that can be applied to dossier content'
      operationId: dossiercontent-documenttypes-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the document type'
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the document type'
          required: false
          schema:
            type: string
        -
          name: 'filter[name]'
          in: query
          description: "Filter by the document type's name"
          required: false
          schema:
            type: string
        -
          name: 'filter[code]'
          in: query
          description: "Filter by the document type's code"
          required: false
          schema:
            type: string
        -
          name: 'filter[communicateWithEmployee]'
          in: query
          description: 'Filter by communicateWithEmployee to get document types'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[reviewable]'
          in: query
          description: 'Filter by reviewable to get document types'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isMedical]'
          in: query
          description: 'Filter by document types who are flagged as medical'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isAbsence]'
          in: query
          description: 'Filter by document types who are flagged for absence'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isHr]'
          in: query
          description: 'Filter by document types who are flagged for HR'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[feedbackToDossier]'
          in: query
          description: 'Filter by document types with the option feedbackToDossier (terugkoppeling in dossier)'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[forceDiagnose]'
          in: query
          description: 'Filter by forceDiagnose to get document types'
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: 'A list of document types'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierDocumentTypeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/dossier/note-types:
    get:
      tags:
        - DossierContent
      summary: 'Get a list of note types that can be applied to dossier content'
      operationId: dossiercontent-notetypes-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: "Filter by the note type's unique identifier"
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: "Filter by the note type's external key"
          required: false
          schema:
            type: string
        -
          name: 'filter[name]'
          in: query
          description: "Filter by the note type's name"
          required: false
          schema:
            type: string
        -
          name: 'filter[code]'
          in: query
          description: "Filter by the note type's code"
          required: false
          schema:
            type: string
        -
          name: 'filter[isMedical]'
          in: query
          description: "Filter by the note type's medical status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isMedicalConfidential]'
          in: query
          description: "Filter by the note type's medical confidentiality status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isAbsence]'
          in: query
          description: "Filter by the note type's absence status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isHr]'
          in: query
          description: "Filter by the note type's HR status"
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: 'A list of note types'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierNoteTypeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/dossier/upload-types:
    get:
      tags:
        - DossierContent
      summary: 'Get a list of upload types that can be applied to dossier content'
      operationId: dossiercontent-uploadtypes-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: "Filter by the upload type's unique identifier"
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: "Filter by the upload type's external key"
          required: false
          schema:
            type: string
        -
          name: 'filter[name]'
          in: query
          description: "Filter by the upload type's name"
          required: false
          schema:
            type: string
        -
          name: 'filter[code]'
          in: query
          description: "Filter by the upload type's code"
          required: false
          schema:
            type: string
        -
          name: 'filter[communicateWithEmployee]'
          in: query
          description: 'Filter by upload types who are being published to the employee section'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isMedical]'
          in: query
          description: 'Filter by upload types flagged as medical'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isAbsence]'
          in: query
          description: 'Filter by upload types flagged for absence'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isHr]'
          in: query
          description: 'Filter by upload types flagged for HR'
          required: false
          schema:
            type: boolean
        -
          name: 'filter[feedbackToDossier]'
          in: query
          description: 'Filter by feedbackToDossier to get upload types'
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: 'A list of upload types'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierUploadTypeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/content/document/{id}':
    delete:
      tags:
        - DossierContent
      summary: 'Delete a document'
      description: 'Deletes a document based on the ID.'
      operationId: dossiercontent-document-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the document to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Document successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/content/document:
    get:
      tags:
        - DossierContent
      summary: 'Get a list of documents that can be applied to dossier content'
      operationId: dossiercontent-documents-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: "Filter by the document's unique identifier"
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: "Filter by the document's external key"
          required: false
          schema:
            type: string
        -
          name: 'filter[title]'
          in: query
          description: "Filter by the document's title"
          required: false
          schema:
            type: string
        -
          name: 'filter[forBothParties]'
          in: query
          description: "Filter by the document's forBothParties status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[inReview]'
          in: query
          description: "Filter by the document's with the 'inReview' status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isConcept]'
          in: query
          description: "Filter by the document's concept status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[dossierId]'
          in: query
          description: "Filter by the unique identifier of the dossier where the document's belonging to"
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: "Filter by the document's updated date. All records from this date onwards will be returned"
          required: false
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: "Filter by the document's updated date. All records up to and including this date will be returned"
          required: false
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      responses:
        200:
          description: 'A list of documents'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierContentDocumentResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - DossierContent
      summary: 'Create a new document'
      description: 'Create a new document for a dossier'
      operationId: dossiercontent-document-post-v1-essential
      requestBody:
        description: 'The document data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierDocumentRequestBody'
      responses:
        201:
          description: 'The document was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierDocumentResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - DossierContent
      summary: 'Update an existing document'
      description: 'Update an existing document belonging to a dossier'
      operationId: dossiercontent-document-patch-v1-essential
      requestBody:
        description: 'The document data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierDocumentRequestBody'
      responses:
        200:
          description: 'The document was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierDocumentResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/content/document/{uuid}':
    patch:
      tags:
        - DossierContent
      summary: 'Update an existing document'
      description: 'Update an existing document belonging to a dossier'
      operationId: dossiercontent-document-id-patch-v1-essential
      parameters:
        -
          name: uuid
          in: path
          description: 'The uuid of the document'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'The document data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierDocumentRequestBody'
      responses:
        200:
          description: 'The document was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierDocumentResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/external-resource/{id}':
    delete:
      tags:
        - 'Dossier External Resource'
      summary: 'Delete a dossier external resource'
      operationId: dossier-externalresource-id-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'The unique identifier of the external resource to be deleted'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Dossier external resource successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - 'Dossier External Resource'
      summary: 'Update an external resource with ID'
      description: 'Update an external resource associated with a dossier using its unique identifier'
      operationId: dossier-externalresource-id-patch-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the external resource'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Dossier external resource data for updating a dossier external resource'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierExternalResourceRequestBody'
      responses:
        200:
          description: 'Dossier external resource updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/external-resource:
    get:
      tags:
        - 'Dossier External Resource'
      summary: 'Get a list of external resources'
      operationId: dossier-externalresource-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific external resource'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the external resource'
          schema:
            type: string
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: sort
          in: query
          description: "Sort by the given field, prefix with '-' for descending order"
          schema:
            $ref: '#/components/schemas/GetDossierExternalResourceSortOptions'
      responses:
        200:
          description: 'A List of Dossier external resources that match the given filters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierExternalResourceResourceResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - 'Dossier External Resource'
      summary: 'Create an external resource'
      description: 'Create an external resource associated with a dossier'
      operationId: dossier-externalresource-post-v1-essential
      requestBody:
        description: 'Dossier external resource data for creating a new dossier external resource'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierExternalResourceRequestBody'
      responses:
        201:
          description: 'Dossier external resource created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - 'Dossier External Resource'
      summary: 'Update an external resource'
      description: "Update an external resource associated with a dossier by providing either its 'id' or 'key' through the request body"
      operationId: dossier-externalresource-patch-v1-essential
      requestBody:
        description: 'Dossier external resource data for updating a dossier external resource'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierExternalResourceRequestBody'
      responses:
        200:
          description: 'Dossier external resource updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/{dossierId}/external-resource':
    post:
      tags:
        - 'Dossier External Resource'
      summary: 'Create an external resource'
      description: 'Create an external resource associated with a dossier'
      operationId: dossier-id-externalresource-post-v1-essential
      parameters:
        -
          name: dossierId
          in: path
          description: 'Unique identifier of the dossier the external resource belongs to.'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Dossier external resource data for creating a new dossier external resource'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierExternalResourceRequestBody'
      responses:
        201:
          description: 'Dossier external resource created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/content/note/{id}':
    delete:
      tags:
        - DossierContent
      summary: 'Delete a note'
      description: 'Deletes a note based on the unique identifier.'
      operationId: dossiercontent-note-id-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the note to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Note successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/content/note:
    get:
      tags:
        - DossierContent
      summary: 'Get a list of notes that can be applied to dossier content'
      operationId: dossiercontent-notes-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: "Filter by the note's unique identifier"
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: "Filter by the note's external key"
          required: false
          schema:
            type: string
        -
          name: 'filter[title]'
          in: query
          description: "Filter by the note's title"
          required: false
          schema:
            type: string
        -
          name: 'filter[content]'
          in: query
          description: "Filter by the note 's content"
          required: false
          schema:
            type: string
        -
          name: 'filter[forBothParties]'
          in: query
          description: "Filter by the note's forBothParties status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[medicalOnly]'
          in: query
          description: "Filter by the note's medicalOnly status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[isConcept]'
          in: query
          description: "Filter by the note's concept status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[dossierId]'
          in: query
          description: "Filter by the note's belonging to this dossierId"
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: "Filter by the note's updated date. All records from this date onwards will be returned"
          required: false
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: "Filter by the note's updated date. All records up to and including this date will be returned"
          required: false
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      responses:
        200:
          description: 'A list of notes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierContentNoteResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - DossierContent
      summary: 'Create a new note'
      description: 'Create a new note for a dossier'
      operationId: dossiercontent-note-post-v1-essential
      requestBody:
        description: 'The note data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierNoteRequestBody'
      responses:
        201:
          description: 'The note was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierNoteResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - DossierContent
      summary: 'Update an existing note'
      description: 'Update an existing note belonging to a dossier'
      operationId: dossiercontent-note-patch-v1-essential
      requestBody:
        description: 'The note data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierNoteRequestBody'
      responses:
        200:
          description: 'The note was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierNoteResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/content/note/{uuid}':
    patch:
      tags:
        - DossierContent
      summary: 'Update an existing note'
      description: 'Update an existing belonging to a dossier'
      operationId: dossiercontent-note-id-patch-v1-essential
      parameters:
        -
          name: uuid
          in: path
          description: 'The uuid of the note'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'The note data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierNoteRequestBody'
      responses:
        200:
          description: 'The note was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierNoteResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/content/upload/{id}':
    delete:
      tags:
        - DossierContent
      summary: 'Delete a dossier upload'
      description: 'Deletes a dossier upload based on the ID.'
      operationId: dossiercontent-upload-id-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the dossier upload to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Dossier upload successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/content/upload:
    get:
      tags:
        - DossierContent
      summary: 'Get a list of dossier uploads'
      operationId: dossiercontent-upload-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: "Filter by the dossier upload's unique identifier"
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: "Filter by the dossier upload's external key"
          required: false
          schema:
            type: string
        -
          name: 'filter[title]'
          in: query
          description: "Filter by the dossier upload's title"
          required: false
          schema:
            type: string
        -
          name: 'filter[forBothParties]'
          in: query
          description: "Filter by the dossier upload's forBothParties status"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[dossierId]'
          in: query
          description: "Filter by the dossier upload's belonging to this dossierId"
          required: false
          schema:
            type: boolean
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: "Filter by the dossier upload's updated date. All records from this date onwards will be returned"
          required: false
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: "Filter by the dossier upload's updated date. All records up to and including this date will be returned"
          required: false
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      responses:
        200:
          description: 'A list of uploads'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierContentUploadResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - DossierContent
      summary: 'Create a new upload'
      description: 'Create a new upload for a dossier'
      operationId: dossiercontent-upload-post-v1-essential
      requestBody:
        description: 'The upload data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierUploadRequestBody'
      responses:
        201:
          description: 'The upload was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierUploadResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - DossierContent
      summary: 'Update an existing upload'
      description: 'Update an existing upload belonging to a dossier'
      operationId: dossiercontent-upload-patch-v1-essential
      requestBody:
        description: 'The upload data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierUploadRequestBody'
      responses:
        200:
          description: 'The upload was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierUploadResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/content/upload/{uuid}':
    patch:
      tags:
        - DossierContent
      summary: 'Update an existing upload'
      description: 'Update an existing upload belonging to a dossier'
      operationId: dossiercontent-upload-id-patch-v1-essential
      parameters:
        -
          name: uuid
          in: path
          description: 'The uuid of the upload'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'The upload data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierUploadRequestBody'
      responses:
        200:
          description: 'The upload was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierUploadResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/task:
    get:
      tags:
        - 'Dossier Task'
      summary: 'Get a list of dossier tasks'
      operationId: dossier-task-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the dossier-task'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by key known in an external system, associated with the dossier-task'
          schema:
            type: string
        -
          name: 'filter[name]'
          in: query
          description: 'Filter by the name of the dossier task'
          schema:
            type: string
        -
          name: 'filter[baseTaskId]'
          in: query
          description: 'Filter by the unique identifier of the base task'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[baseTaskCode]'
          in: query
          description: 'Filter by the code of the base task'
          schema:
            type: string
        -
          name: 'filter[taskStatus]'
          in: query
          description: 'Filter by the status of the dossier task.'
          schema:
            $ref: '#/components/schemas/TaskStatusEnumOptions'
        -
          name: 'filter[baseTaskType]'
          in: query
          description: 'Filter by the type of the  base task.'
          schema:
            $ref: '#/components/schemas/TaskTypeEnumOptions'
        -
          name: 'filter[dateCompletedFrom]'
          in: query
          description: 'Filter by tasks, completed since this date-time'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCompletedUntil]'
          in: query
          description: 'Filter by tasks, completed until this date-time'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by tasks, updated since this date-time'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by tasks, updated until this date-time'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[active]'
          in: query
          description: 'Filter by active status'
          schema:
            type: boolean
        -
          name: sort
          in: query
          description: 'sort results by a field'
          schema:
            $ref: '#/components/schemas/GetDossierTaskSortOptions'
        -
          name: include
          in: query
          description: 'Include related resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierTaskIncludeOptions'
      responses:
        200:
          description: 'A list of dossier tasks'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierTaskResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - 'Dossier Task'
      summary: 'Create a new dossier task'
      operationId: dossier-task-post-v1-advanced
      requestBody:
        description: 'Dossier Task data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierTaskRequestBody'
      responses:
        201:
          description: 'Dossier Task created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDossierTaskRequestBody'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - 'Dossier Task'
      summary: 'Update a dossier task using request body ID'
      description: 'Update a dossier task by specifying its ID in the request payload.'
      operationId: dossier-task-patch-v1-advanced
      requestBody:
        description: 'Data payload for updating the dossier task.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DossierTaskResource'
      responses:
        200:
          description: 'Dossier task successfully updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierTaskResource'
        400:
          description: 'Invalid input provided.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Internal server error encountered.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/task/{id}':
    patch:
      tags:
        - 'Dossier Task'
      summary: 'Update a specific dossier task by ID in the url'
      description: 'Perform an update on a specified dossier task using its unique ID.'
      operationId: dossier-task-id-patch-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'The unique identifier of the dossier task.'
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        description: 'Data required to update the dossier task.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DossierTaskResource'
      responses:
        200:
          description: 'Dossier task successfully updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierTaskResource'
        400:
          description: 'Invalid input provided.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Internal server error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/birth-leave:
    get:
      tags:
        - Dossier
      summary: 'Get a list of birth leave dossiers'
      operationId: dossier-birthleave-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of a dossier'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the updated since date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dateUpdated use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierIncludeOptions'
      responses:
        200:
          description: 'A list of birth leave dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBirthLeaveDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Dossier
      summary: 'Create a birth leave dossier'
      description: 'This endpoint is used to create a new birth leave dossier.'
      operationId: dossier-birthleave-post-v1-advanced
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBirthLeaveRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a Birth Leave dossier'
      description: 'This endpoint is used to update a Birth Leave dossier.'
      operationId: dossier-birthleave-patch-v1-advanced
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBirthLeaveDossierRequestBody'
      responses:
        200:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier:
    get:
      tags:
        - Dossier
      summary: 'Get a list of dossiers'
      description: 'Lists all dossiers that match the parameters specified on the request.'
      operationId: dossier-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of a specific dossier'
          schema:
            type: string
        -
          name: 'filter[type]'
          in: query
          description: 'Filter by the dossier type'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the updated-since date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date of a dossier'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date of a dossier'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dateUpdated, prefix with '-' to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierIncludeOptions'
      responses:
        200:
          description: 'A list of Dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/preventive:
    get:
      tags:
        - Dossier
      summary: 'Get a list of preventive dossiers'
      operationId: dossier-preventive-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by ID to get a specific dossier'
          schema:
            type: string
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the ID of a specific dossier'
          schema:
            type: string
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the ID of a specific employment'
          schema:
            type: string
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the update date'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dateUpdated, prefix with '-' to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierIncludeOptions'
      responses:
        200:
          description: 'A list of Preventive Dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Dossier
      summary: 'Create a preventive dossier'
      description: 'This endpoint is used to create a new preventive dossier.'
      operationId: dossier-preventive-post-v1-essential
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPreventiveDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a preventive dossier'
      description: 'This endpoint is used to update a preventive dossier.'
      operationId: dossier-preventive-patch-v1-essential
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPreventiveDossierRequestBody'
      responses:
        200:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/medical-preventive:
    get:
      tags:
        - Dossier
      summary: 'Get a list of Medical Preventive dossiers'
      operationId: dossier-medicalpreventive-get-v1-ultimate
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by ID to get a specific dossier'
          schema:
            type: string
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the ID of a specific dossier'
          schema:
            type: string
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the ID of a specific employment'
          schema:
            type: string
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the update date'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dateUpdated, prefix with '-' to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierIncludeOptions'
      responses:
        200:
          description: 'A list of Medical Preventive Dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Dossier
      summary: 'Create a medical preventive dossier'
      description: 'This endpoint is used to create a new medical preventive dossier.'
      operationId: dossier-medicalpreventive-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMedicalPreventiveDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a medical preventive dossier'
      description: 'This endpoint is used to update a medical preventive dossier.'
      operationId: dossier-medicalpreventive-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMedicalPreventiveDossierRequestBody'
      responses:
        200:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/illness:
    get:
      tags:
        - Dossier
      summary: 'Get a list of Illness dossiers'
      operationId: dossier-illness-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by ID to get a specific dossier'
          schema:
            type: string
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the ID of a specific dossier'
          schema:
            type: string
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the ID of a specific employment'
          schema:
            type: string
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the update date'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dateUpdated, prefix with '-' to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetIllnessDossierIncludeOptions'
      responses:
        200:
          description: 'A list of Illness Dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIllnessDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a illness dossier'
      description: 'This endpoint is used to update a new illness dossier.'
      operationId: dossier-illness-patch-v1-essential
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchIllnessRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IllnessDossier'
        400:
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/dossier/section:
    get:
      tags:
        - DossierContent
      summary: 'Get a list of dossier sections that can be applied to dossier contents'
      operationId: dossier-section-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the dossier section'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the externalKey of the dossier section'
          schema:
            type: string
        -
          name: 'filter[name]'
          in: query
          description: 'Filter by the name of the dossier section'
          schema:
            type: string
        -
          name: 'filter[code]'
          in: query
          description: 'Filter by code of the dossier section'
          schema:
            type: string
        -
          name: 'filter[canContainNotes]'
          in: query
          description: 'Filter by dossier sections which can contain notes'
          schema:
            type: boolean
        -
          name: 'filter[canContainDocuments]'
          in: query
          description: 'Filter by dossier sections which can contain documents'
          schema:
            type: boolean
        -
          name: dosserType
          in: query
          description: 'Filter by the type of dossier linked to the dossier section.'
          schema:
            $ref: '#/components/schemas/DossierTypeEnumOptions'
      responses:
        200:
          description: 'A list of dossier sections'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierSectionResponse'
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/paid-parental-leave:
    get:
      tags:
        - Dossier
      summary: 'Get a list of paid parental leave dossiers'
      operationId: dossier-paidparentalleave-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the dossier'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the dossier updated since this date. Format YYYY-MM-DD'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by dossier updated up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dateUpdated use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierIncludeOptions'
      responses:
        200:
          description: 'A list of paid parental leave dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaidParentalLeaveDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Dossier
      summary: 'Create a paid parental leave dossier'
      description: 'This endpoint is used to create a new paid parental leave dossier.'
      operationId: dossier-paidparentalleave-post-v1-advanced
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPaidParentalLeaveRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a Paid Parental Leave dossier'
      description: 'This endpoint is used to update a Paid Parental Leave dossier.'
      operationId: dossier-paidparentalleave-patch-v1-advanced
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPaidParentalLeaveDossierRequestBody'
      responses:
        200:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/pregnancy:
    get:
      tags:
        - Dossier
      summary: 'Get a list of pregnancy dossiers'
      operationId: dossier-pregnancy-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key in an external system of the dossier'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the updated-since date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalkey or dateUpdated use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierIncludeOptions'
      responses:
        200:
          description: 'A list of pregnancy dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPregnancyDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Dossier
      summary: 'Create a pregnancy dossier'
      description: 'This endpoint is used to create a new pregnancy dossier.'
      operationId: dossier-pregnancy-post-v1-essential
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPregnancyDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a pregnancy dossier'
      description: 'This endpoint is used to update a Pregnancy dossier.'
      operationId: dossier-pregnancy-patch-v1-essential
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPregnancyDossierRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/dossier/{id}/return-to-work-advice':
    get:
      tags:
        - 'Return to work advice'
      summary: 'Get the return to work advice base on the dossier'
      description: 'Returns the return to work advice based on the dossier ID.'
      operationId: dossier-id-returntoworkadvice-get-v1-ultimate
      parameters:
        -
          name: id
          in: path
          description: 'The unique identifier of the dossier for which the return-to-work advice (werkhervattingsadvies) is requested.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Retrieved return to work advice successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReturnToWorkAdviceResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/spoor-2:
    get:
      tags:
        - Dossier
      summary: 'Get a list of Spoor-2 dossiers'
      operationId: dossier-spoor2-get-v1-ultimate
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the dossier'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the updated-since date format YYYY-MM-DD'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dataUpdated use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetDossierIncludeOptions'
      responses:
        200:
          description: 'A list of Spoor-2 Dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpoor2DossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Dossier
      summary: 'Create a spoor 2 dossier'
      description: 'This endpoint is used to create a new spoor 2 dossier.'
      operationId: dossier-spoor2-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSpoor2RequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a spoor 2 dossier'
      description: 'This endpoint is used to update a new spoor 2 dossier.'
      operationId: dossier-spoor2-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSpoor2RequestBody'
      responses:
        200:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/zwerd:
    get:
      tags:
        - Dossier
      summary: 'Get a list of ZW ERD dossiers'
      operationId: dossier-zwerd-get-v1-ultimate
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of a specific dossier'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the updated-since date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dataUpdated use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
      responses:
        200:
          description: 'A list of ZW-ERD Dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetZwerdDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Dossier
      summary: 'Create a ZW ERD dossier'
      description: 'This endpoint is used to create a new ZW ERD dossier.'
      operationId: dossier-zwerd-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostZwerdDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Update a ZW ERD dossier'
      description: 'This endpoint is used to update a ZW ERD dossier.'
      operationId: dossier-zwerd-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchZwerdDossierRequestBody'
      responses:
        200:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/illness-and-zwerd:
    get:
      tags:
        - Dossier
      summary: 'Get a list of Illness and ZW ERD dossiers'
      operationId: dossier-illnessandzwerd-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by ID to get a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the ID of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the ID of a specific employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employmentNumber]'
          in: query
          description: 'Filter by the employment number'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the update date'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
        -
          name: sort
          in: query
          description: "Sort results by startDate, externalKey or dataUpdated use '-' as prefrix to sort descending"
          schema:
            $ref: '#/components/schemas/GetDossierSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetIllnessDossierIncludeOptions'
      responses:
        200:
          description: 'A list of Illness and ZW-ERD Dossiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetZwerdDossierResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/company-social-worker:
    post:
      tags:
        - Dossier
      summary: 'Create a company social worker dossier'
      description: 'This endpoint is used to create a new company social worker dossier.'
      operationId: dossier-companysocialworker-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBasicDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBasicDossierResponseBody'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Patch company social worker dossier'
      description: 'This endpoint is used to update a company social worker dossier.'
      operationId: dossier-companysocialworker-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBasicRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicApiPatchResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/ergonomics:
    post:
      tags:
        - Dossier
      summary: 'Create an ergonomics dossier'
      description: 'This endpoint is used to create a new ergonomics dossier.'
      operationId: dossier-ergonomics-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBasicDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBasicDossierResponseBody'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Patch an ergonomics dossier'
      description: 'This endpoint is used to update an ergonomics dossier.'
      operationId: dossier-ergonomics-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBasicRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicApiPatchResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/confidential-counselor:
    post:
      tags:
        - Dossier
      summary: 'Create a confidential counselor dossier'
      description: 'This endpoint is used to create a new confidential counselor dossier.'
      operationId: dossier-confidentialcounselor-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBasicDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBasicDossierResponseBody'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Patch a confidential counselor dossier'
      description: 'This endpoint is used to update a confidential counselor dossier.'
      operationId: dossier-confidentialcounselor-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBasicRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicApiPatchResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/second-line-care:
    post:
      tags:
        - Dossier
      summary: 'Create a second line care dossier'
      description: 'This endpoint is used to create a new second line care dossier.'
      operationId: dossier-secondlinecare-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBasicDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBasicDossierResponseBody'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Patch second-line-care dossier'
      description: 'This endpoint is used to update a second-line-care dossier.'
      operationId: dossier-secondlinecare-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBasicRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicApiPatchResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/physyiotherapy:
    patch:
      tags:
        - Dossier
      summary: 'Patch physyiotherapy dossier'
      description: 'This endpoint is used to update a physyiotherapy dossier.'
      operationId: dossier-physyiotherapy-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBasicRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicApiPatchResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/psychologist:
    post:
      tags:
        - Dossier
      summary: 'Create a psychologist dossier'
      description: 'This endpoint is used to create a new psychologist dossier.'
      operationId: dossier-psychologist-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBasicDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBasicDossierResponseBody'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Patch psychologist dossier'
      description: 'This endpoint is used to update a psychologist dossier.'
      operationId: dossier-psychologist-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBasicRequestBody'
      responses:
        200:
          description: 'Dossier successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicApiPatchResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/wga:
    post:
      tags:
        - Dossier
      summary: 'Create a wga dossier'
      description: 'This endpoint is used to create a new wga dossier.'
      operationId: dossier-wga-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWGADossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: 'Create a wga dossier'
      description: 'This endpoint is used to update a wga dossier.'
      operationId: dossier-wga-patch-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchWGADossierRequestBody'
      responses:
        200:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/physiotherapy:
    post:
      tags:
        - Dossier
      summary: 'Create a physiotherapy dossier'
      description: 'This endpoint is used to create a new physiotherapy dossier.'
      operationId: dossier-physiotherapy-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBasicDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBasicDossierResponseBody'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier/company-dossier:
    post:
      tags:
        - Dossier
      summary: 'Create a company dossier'
      description: 'This endpoint is used to create a new company dossier.'
      operationId: dossier-companydossier-post-v1-ultimate
      requestBody:
        description: 'Dossier data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCompanyDossierRequestBody'
      responses:
        201:
          description: 'Dossier successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicApiPostResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /dossier-officer:
    get:
      tags:
        - 'Dossier Officers'
      summary: 'Get a list of Dossier Officers (dossierverantwoordelijken)'
      operationId: dossierofficer-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the dossier-officer'
          required: false
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key of the dossier-officer, known in an external system'
          schema:
            type: string
        -
          name: 'filter[username]'
          in: query
          description: 'Filter by the username of a dossier-officer'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'A list of Dossier Officers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDossierOfficerResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  '/employee/{id}':
    delete:
      tags:
        - Employee
      summary: 'Delete an employee'
      description: 'Deletes an employee based on the unique identifier.'
      operationId: employee-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the employee to delete.'
          required: true
          schema:
            type: string
            format: uuid
          example: ef414880-76d8-494a-b6a9-f1eda24e2f7f
      responses:
        200:
          description: 'Employee successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /employee:
    get:
      tags:
        - Employee
      summary: 'Get a list of employees'
      operationId: employee-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific employee'
          schema:
            type: string
            format: uuid
          example: ef414880-76d8-494a-b6a9-f1eda24e2f7f
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key associated to a specific employee'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
        -
          name: 'filter[employeeNumber]'
          in: query
          description: "Filter by an employee's employee number"
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by date of last update being after or the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2000-01-01 12:34:56'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by date of last update being before or on the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2030-01-01 12:34:56'
        -
          name: include
          in: query
          description: 'Include the related resources in the response - use a comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetEmployeeIncludeOptions'
        -
          name: sort
          in: query
          description: "Sort results by external key, use '-externalKey' to sort descending"
          schema:
            $ref: '#/components/schemas/GetEmployeeSortOptions'
      responses:
        200:
          description: 'A list of Employees'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployeeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Employee
      summary: 'Create an employee'
      description: 'This endpoint creates an Employee and its associated entities (Employment, Employment Contract, Primary Address, Person Information, Person Communications).'
      operationId: employee-post-v1-essential
      requestBody:
        description: 'Employee data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmployeeRequestBody'
      responses:
        201:
          description: 'Absence course successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employee
      summary: 'Update an employee'
      description: 'This endpoint updates an existing Employee and their associated entities (Primary Address, Person Information, Person Communications).'
      operationId: employee-patch-v1-essential
      requestBody:
        description: 'Employee data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployeeRequestBody'
      responses:
        200:
          description: 'Absence course successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/employer/{id}':
    delete:
      tags:
        - Employer
      summary: 'Delete an employer'
      description: 'Deletes an employer based on the ID. This operation also removes any users, contracts, roles, authorizations and organizational unit types linked to the employer.'
      operationId: employer-id-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the employer to delete.'
          required: true
          schema:
            type: string
            format: uuid
          example: d77b71b2-b046-4aba-afa2-a785a92393d3
      responses:
        200:
          description: 'Employer successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employer
      summary: 'Update an employer while referencing the employer by its id'
      operationId: employer-id-patch-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the employer to be updated.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Employer data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployerRequestBody'
      responses:
        200:
          description: 'Employer successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employer'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/employer/arbo-service:
    get:
      tags:
        - Employer
      summary: "Get a list of arbo services (in application known as 'arbodiensten')"
      operationId: employer-arboservice-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter arbo services by the unique identifier'
          required: false
          schema:
            type: string
            format: uuid
          example: 301b53cd-8646-4065-9709-16226355d09a
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter arbo services by the key known in the external system'
          required: false
          schema:
            type: string
          example: arbo-123
      responses:
        200:
          description: 'A list of available arbo services'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployerArboServiceResponse'
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /employer:
    get:
      tags:
        - Employer
      summary: 'Get a list of employers'
      operationId: employer-get-v1-essential
      parameters:
        -
          name: 'filter[search]'
          in: query
          description: 'Filter employers based on search criteria'
          schema:
            type: string
          example: Visma
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the employer'
          schema:
            type: string
            format: uuid
          example: 023645ba-461d-44c1-b40e-98f3cd9fdad9
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key'
          schema:
            type: string
          example: CRM_123456
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter employers that were updated on after this date/time'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2022-01-01 11:22:33'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter employers that were updated before or on this date/time'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: include
          in: query
          description: 'Include related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetEmployerIncludeOptions'
        -
          name: sort
          in: query
          description: "Sort results by externalKey or name, use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetEmployerSortOptions'
      responses:
        200:
          description: 'A list of employers that match the given filters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployerResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Employer
      summary: 'Create an employer'
      operationId: employer-post-v1-essential
      requestBody:
        description: 'Employer data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmployerRequestBody'
      responses:
        201:
          description: 'Employer successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employer'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employer
      summary: 'Update an employer'
      operationId: employer-patch-v1-essential
      requestBody:
        description: 'Employer data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployerRequestBody'
      responses:
        200:
          description: 'Employer successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employer'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /employer-division:
    get:
      tags:
        - 'Employer Divisions'
      summary: 'Get a list of employer divisions (werkgever indeling)'
      operationId: employerdivision-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the employer division'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key of the employer division known in an external system'
          schema:
            type: string
        -
          name: 'filter[parentEmployerDivisionId]'
          in: query
          description: 'Filter by the unique identifier of the parent employer division.'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[parentEmployerDivisionExternalKey]'
          in: query
          description: 'Filter by the key of the parent employer division, known in an external system.'
          schema:
            type: string
        -
          name: sort
          in: query
          description: 'Sort by a specific field (externalKey)'
          schema:
            $ref: '#/components/schemas/GetEmployerDivisionSortOptions'
      responses:
        200:
          description: 'A list of employer divisions that match the given filters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployerDivisionResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /employer-role:
    get:
      tags:
        - 'User Roles'
      summary: 'Get a list of employer roles that can be assigned to users'
      operationId: employerrole-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the employer-role'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employerId]'
          in: query
          description: 'Filter by the unique identifier of the employer'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[active]'
          in: query
          description: 'Filter by active status of the employer-role'
          schema:
            type: boolean
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key used in an external system that is associated with the employer role.'
          schema:
            type: string
        -
          name: 'filter[arboRoleId]'
          in: query
          description: 'Filter by the unique identifier of the arboRole'
          schema:
            type: string
            format: uuid
        -
          name: include
          in: query
          description: 'Include related resources - use comma separated values to include multiple resources - use dot notation to include nested resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetEmployerRoleIncludeOptions'
      responses:
        200:
          description: 'A list of available employer roles'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployerRoleResponse'
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/employment/contract/{id}':
    delete:
      tags:
        - Employments
      summary: 'Delete an employment contract'
      description: 'Deletes an employment contract based on the ID.'
      operationId: employment-contract-id-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the employment contract to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Employment Contract successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/employment/{id}':
    delete:
      tags:
        - Employments
      summary: 'Delete an employment and all employment-contracts that belong to it'
      description: 'Deletes an employment based on the ID.'
      operationId: employment-id-delete-v1-advanced
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the employment to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Employment successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /employment/contract:
    get:
      tags:
        - Employments
      summary: 'Get a list of employment contracts'
      operationId: employment-contract-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Find by the unique identifier of employment contract'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key of employment contract'
          schema:
            type: string
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of the employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employmentKey]'
          in: query
          description: 'Filter by the external key of the employment'
          schema:
            type: string
        -
          name: 'filter[organizationalUnitId]'
          in: query
          description: 'Filter by the unique identifier of the organizational unit'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[organizationalUnitKey]'
          in: query
          description: 'Filter by the external key of the organizational unit'
          schema:
            type: string
        -
          name: 'filter[employerId]'
          in: query
          description: 'Filter by the unique identifier of an employer'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employerKey]'
          in: query
          description: 'Filter by the external key of an employer'
          schema:
            type: string
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by date of latest update being after or the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by date of latest update being before or on the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateStartFrom]'
          in: query
          description: 'Filter by start date being after or the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateStartUntil]'
          in: query
          description: 'Filter by start date being before or on the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateEndFrom]'
          in: query
          description: 'Filter by end date being after or the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateEndUntil]'
          in: query
          description: 'Filter by end date being before or on the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: include
          in: query
          description: 'Include related resources in the output (organizationalUnit, employmentType, employment)'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetEmploymentContractResourceIncludeOptions'
        -
          name: sort
          in: query
          description: "Sort results by field, use '-keyName' to sort in descending order (externalKey, dateUpdated)"
          schema:
            $ref: '#/components/schemas/GetEmploymentContractResourceSortOptions'
      responses:
        200:
          description: 'A list of Employment Contracts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmploymentContractResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Employments
      summary: 'Create a new employment contract'
      description: 'Create a new employment contract'
      operationId: employment-contract-post-v1-advanced
      requestBody:
        description: 'Employment Contract data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmploymentContractRequestBody'
      responses:
        201:
          description: 'Employment contract successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentContractResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employments
      summary: 'Update an existing employment contract'
      description: 'Update an existing employment contract'
      operationId: employment-contract-patch-v1-advanced
      requestBody:
        description: 'Employment Contract data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmploymentContractRequestBody'
      responses:
        200:
          description: 'Employment contract successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentContractResource'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /employment:
    get:
      tags:
        - Employments
      summary: 'Get a list of employments'
      operationId: employment-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Find by ID of employment'
          schema:
            type: string
            format: uuid
          example: 5bb912f0-ed8e-4af1-8714-a7d295843122
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key of employment'
          schema:
            type: string
          example: c84563d5-2fd8-4c02-b329-f2f9142e7c23
        -
          name: 'filter[employeeId]'
          in: query
          description: 'Filter by the ID of employee'
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        -
          name: 'filter[employeeKey]'
          in: query
          description: 'Filter by the external key of employee'
          schema:
            type: string
          example: 8b242b19-c11a-4d9e-b9ed-1117ab0ac6e0
        -
          name: 'filter[currentOrLastEmploymentContract]'
          in: query
          description: 'Filter by the ID of the current or last employment contract'
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        -
          name: 'filter[employerId]'
          in: query
          description: 'Filter by the unique identifier of the employer associated with the current or last employment contract'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employerKey]'
          in: query
          description: 'Filter by the external key of the employer associated with the current or last employment contract'
          schema:
            type: string
        -
          name: 'filter[employmentEndReason]'
          in: query
          description: "Filter by the employmentEndReason ('end-employment', 'sick-during-end-of-employment', 'death', 'dismissal-own-request')"
          schema:
            type: string
          example: end-employment
        -
          name: 'filter[primary]'
          in: query
          description: 'Filter by whether this is a primary employment or not'
          schema:
            type: boolean
          example: false
        -
          name: 'filter[internalSupervisorId]'
          in: query
          description: 'Filter by the ID of internal supervisor'
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        -
          name: 'filter[internalSupervisorKey]'
          in: query
          description: 'Filter by the external key of internal supervisor'
          schema:
            type: string
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        -
          name: 'filter[externalSupervisorId]'
          in: query
          description: 'Filter by the ID of external supervisor'
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        -
          name: 'filter[externalSupervisorKey]'
          in: query
          description: 'Filter by the external key of external supervisor'
          schema:
            type: string
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by date of last update being after or the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2000-01-01 12:34:56'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by date of last update being before or on the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2030-01-01 12:34:56'
        -
          name: include
          in: query
          description: 'Include related resources in the output'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetEmploymentIncludeOptions'
        -
          name: sort
          in: query
          description: "Sort results by field, use '-keyName' to sort in descending order (externalKey, dateUpdated)"
          schema:
            $ref: '#/components/schemas/GetEmploymentSortOptions'
          example: '-dateUpdated'
      responses:
        200:
          description: 'A list of Employments'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmploymentResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Employments
      summary: 'Create a new employment'
      description: 'Create a new employment'
      operationId: employment-post-v1-advanced
      requestBody:
        description: 'Employment data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmploymentRequestBody'
      responses:
        201:
          description: 'Employment successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employment'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employments
      summary: 'Update an existing employment'
      description: 'Update an existing employment'
      operationId: employment-patch-v1-advanced
      requestBody:
        description: 'Employment data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmploymentRequestBody'
      responses:
        200:
          description: 'Employment successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employment'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/employment/employment-type:
    get:
      tags:
        - Employments
      summary: 'Get a list of employment types'
      operationId: employment-employmenttype-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by ID to get a specific employment type'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by external key'
          schema:
            type: string
        -
          name: 'filter[indefiniteContract]'
          in: query
          description: "Filter by employment types that are for a contract of indefinite duration ('onbepaalde tijd')"
          schema:
            type: boolean
        -
          name: 'filter[education]'
          in: query
          description: 'Filter by employment types that are for education (internship)'
          schema:
            type: boolean
      responses:
        200:
          description: 'A list of EmploymentTypes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmploymentTypeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  '/employment/{uuid}':
    patch:
      tags:
        - Employments
      summary: 'Update an existing employment'
      description: 'Update an existing employment'
      operationId: employment-id-patch-v1-advanced
      parameters:
        -
          name: uuid
          in: path
          description: 'The  id of the employment to be updated'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Employment data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmploymentRequestBody'
      responses:
        200:
          description: 'Employment successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employment'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /external-supervisor:
    get:
      tags:
        - 'External Supervisor'
      summary: 'Get a list of external supervisors'
      operationId: externalsupervisor-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the external supervisor'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key known in an external system associated with the external supervisor'
          schema:
            type: string
        -
          name: 'filter[employerId]'
          in: query
          description: 'Filter by the unique identifier of the employer'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[organizationalUnitId]'
          in: query
          description: 'Filter by the unique identifier of the organizational unit'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[jobTitle]'
          in: query
          description: 'Filter by `jobTitle` (case insensitive)'
          schema:
            type: string
        -
          name: include
          in: query
          description: 'Include related resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetExternalSupervisorIncludeOptions'
      responses:
        200:
          description: 'A list of external supervisors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExternalSupervisorResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /operation:
    get:
      tags:
        - Operation
      summary: 'Get a list of operations'
      operationId: operation-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of an operation'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[search]'
          in: query
          description: 'Filter by the operation name'
          schema:
            type: string
      responses:
        200:
          description: 'A list of operations'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /billable-operation:
    get:
      tags:
        - 'Billable Operation'
      summary: 'Get a list of billable operations'
      operationId: billableoperation-get-v1-ultimate
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by unique identifier to get a specific billable operation'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key known in an external system of a specific billable operation'
          schema:
            type: string
        -
          name: 'filter[operationId]'
          in: query
          description: 'Filter by the unique identifier of a specific operation'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierId]'
          in: query
          description: 'Filter by the unique identifier of a specific dossier'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dossierTaskId]'
          in: query
          description: 'Filter by the unique identifier of the dossier-task associated with the billable operation'
          schema:
            type: integer
            format: uuid
        -
          name: 'filter[employmentId]'
          in: query
          description: 'Filter by the unique identifier of a specific employment'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by date updated from'
          schema:
            type: string
            format: date-time-offset
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by date updated until'
          schema:
            type: string
            format: date-time-offset
        -
          name: 'filter[withDeleted]'
          in: query
          description: "Include deleted operations in the results, not needed if filtering by date deleted 'from' or 'until'"
          schema:
            type: boolean
        -
          name: 'filter[dateDeletedFrom]'
          in: query
          description: 'Filter by date deleted from'
          schema:
            type: string
            format: date-time-offset
        -
          name: 'filter[dateDeletedUntil]'
          in: query
          description: 'Filter by date deleted until'
          schema:
            type: string
            format: date-time-offset
        -
          name: sort
          in: query
          description: 'Sort results by a specific column, use - before the field name to sort descending'
          schema:
            $ref: '#/components/schemas/GetBillableOperationSortOptions'
        -
          name: include
          in: query
          description: 'includes given resources in the response, use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetBillableOperationIncludeOptions'
      responses:
        200:
          description: 'A list of Operationable entities'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBillableOperationResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  '/organizational-unit/{id}':
    delete:
      tags:
        - 'Organizational Units'
      summary: 'Delete an organizational unit'
      description: 'Deletes an organizational unit based on the ID. This operation also removes any employees linked to the organizational unit, along with their associated employment contracts.'
      operationId: organizationalunit-id-delete-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the organizational unit to delete.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'Organizational unit successfully deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - 'Organizational Units'
      summary: 'Update an existing organizational unit'
      description: "Updates an existing organizational unit. Allows for 'id' to be in the path or in the request body."
      operationId: organizationalunit-id-patch-v1-essential
      parameters:
        -
          name: id
          in: path
          description: 'Unique identifier of the organizational unit to update.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Data to be updated for the organizational unit'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOrganizationalUnitRequestBody'
      responses:
        200:
          description: 'Organizational unit successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationalUnit'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /organizational-unit:
    get:
      tags:
        - 'Organizational Units'
      summary: 'Get a list of organizational units'
      operationId: organizationalunit-get-v1-essential
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of the organizational unit'
          schema:
            type: string
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the external key of the organizational unit'
          schema:
            type: string
        -
          name: 'filter[name]'
          in: query
          description: 'Filter by the name of the organizational unit'
          schema:
            type: string
        -
          name: 'filter[officialName]'
          in: query
          description: 'Filter by the official name of the organizational unit'
          schema:
            type: string
        -
          name: 'filter[code]'
          in: query
          description: 'Filter by the code of the organizational unit'
          schema:
            type: string
        -
          name: 'filter[root]'
          in: query
          description: 'Filter organizational units without a parent'
          schema:
            type: boolean
        -
          name: 'filter[employerId]'
          in: query
          description: 'Filter by the unique identifier of an employer'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[parentOrganizationalUnitId]'
          in: query
          description: 'Filter by the unique identifier of the parent organizational unit'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by date of last update being after or the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2000-01-01 12:34:56'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by date of last update being before or on the same day as the one given'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2030-01-01 12:34:56'
        -
          name: sort
          in: query
          description: "Sort by field (name, officialName, code, sbiCode, number, kvkNumber, vatNumber, relationNumber, externalKey). Prefix with '-' to sort descending"
          schema:
            $ref: '#/components/schemas/GetOrganizationalUnitSortOptions'
        -
          name: include
          in: query
          description: "Include related resources (\n *              employer,\n *              parentOrganizationalUnit,\n *              companyDoctor,\n *              dossierOfficer,\n *              internalSupervisor,\n *              externalSupervisor,\n *              contactPersons,\n *              visitorAddress,\n *              postalAddress,\n *              communications) use comma to separate multiple values"
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetOrganizationalUnitIncludeOptions'
      responses:
        200:
          description: 'A list of organization units that match the given filters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationalUnitResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - 'Organizational Units'
      summary: 'Create a new organizational unit'
      description: 'Create a new organizational unit'
      operationId: organizationalunit-post-v1-essential
      requestBody:
        description: "Organizational Unit data - please be aware: 'company.normHours' is required when 'company' is present"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOrganizationalUnitRequestBody'
      responses:
        201:
          description: 'Organizational unit successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationalUnit'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /configuration/organizational-unit/organizational-unit-type:
    get:
      tags:
        - 'Organizational Units'
      summary: 'Get a list of organizational unit types'
      operationId: organizationalunit-organizationalunittype-get-v1-essential
      parameters:
        -
          name: 'filter[employerId]'
          in: query
          description: 'Filter by the unique identifier of an employer'
          schema:
            type: string
            format: uuid
        -
          name: include
          in: query
          description: 'Include related resources (employer)'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetOrganizationalUnitTypeIncludeOptions'
      responses:
        200:
          description: 'A list of organization unit types that match the given filters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationalUnitTypeResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /task:
    get:
      tags:
        - Task
      summary: 'Get a list of tasks'
      operationId: task-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unqiue identifier to get a specific task'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key of an external system associated to a specific task'
          schema:
            type: string
        -
          name: 'filter[search]'
          in: query
          description: "Performs a 'LIKE %value%' search on the 'title' field"
          schema:
            type: string
        -
          name: 'filter[taskType]'
          in: query
          description: 'Show only tasks with the given task type'
          schema:
            $ref: '#/components/schemas/TaskTypeEnumOptions'
        -
          name: 'filter[protocol]'
          in: query
          description: 'Show only tasks with the given protocol'
          schema:
            $ref: '#/components/schemas/ProtocolEnumOptions'
        -
          name: 'filter[onlyProtocolTask]'
          in: query
          description: 'Filter to include only protocol tasks'
          schema:
            type: boolean
        -
          name: 'filter[onlyDeletedTasks]'
          in: query
          description: 'Filter to include only deleted tasks'
          schema:
            type: boolean
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by date updated from'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter by date updated until'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedFrom]'
          in: query
          description: 'Filter by date created from'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedUntil]'
          in: query
          description: 'Filter by date created until'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: sort
          in: query
          description: 'Sort results by a specific column, use - before the field name to sort descending'
          schema:
            $ref: '#/components/schemas/GetTaskSortOptions'
      responses:
        200:
          description: 'A list of Task entities'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /user/event:
    post:
      tags:
        - User
      summary: '(DEPRECATED) Create/Update Users event Endpoint'
      description: 'Event endpoint to create/update users'
      operationId: user-event-v1-advanced
      requestBody:
        description: 'Pass parameters used for creating/updating a user'
        required: true
        content:
          application/json:
            schema:
              required:
                - key
              properties:
                key:
                  type: string
                  example: 98798779@12
                type:
                  type: string
                  enum:
                    - internal
                    - external
                    - employer
                  example: internal
                roleId:
                  type: integer
                  example: 1122334455667788
                username:
                  type: string
                  example: dotweb-user
                active:
                  type: boolean
                  example: true
                hasSystemAccess:
                  type: boolean
                  example: false
                dateStart:
                  description: 'YYYY-MM-DD Defaults to NOW()'
                  type: string
                  pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
                dateEnd:
                  description: 'YYYY-MM-DD Defaults to NULL'
                  type: string
                  pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
                employerId:
                  description: 'Key for assigning the user to a specific employer'
                  type: integer
                  example: 1
                belongsToEmployeeKey:
                  description: 'This will prevent the user from being able to see themselves as an employee'
                  type: string
                  example: externalEmployeeKey
                employeeKey:
                  description: 'Key for generating personalia from employee data'
                  type: string
                  example: employee-unique-identifier
                ssoKey:
                  description: 'SSO key unique in scope for partner/employer sso solution, not globally unique'
                  type: string
                  example: nfr5ffg8jdnksDf3
                person:
                  required:
                    - initials
                    - surname
                    - gender
                  properties:
                    mail:
                      type: string
                      format: email
                      example: user1@mail.com
                    phone:
                      type: string
                      example: '06123456789'
                    initials:
                      type: string
                      example: J.K.
                    surname:
                      type: string
                      example: Doe
                    nickname:
                      type: string
                      example: Jan
                    prefix:
                      type: string
                      example: Van
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - X
                      example: M
                  type: object
                authorization:
                  properties:
                    cleaning:
                      description: 'If left out no change in existing authorizations'
                      type: string
                      enum:
                        - clean-all
                        - clean-api-created
                      example: clean-all
                    organizationalUnits:
                      type: array
                      items:
                        required:
                          - key
                          - authLevel
                        properties:
                          key:
                            description: 'Required for each authorization created'
                            type: string
                            example: 1511_interface@155
                          authLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: authorized
                          childLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: not-authorized
                        type: object
                    employments:
                      type: array
                      items:
                        properties:
                          key:
                            description: 'Required for each authorization created'
                            type: string
                            example: 1511_interface@155
                          authLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: authorized
                        type: object
                    employers:
                      type: array
                      items:
                        properties:
                          key:
                            description: 'Required for each authorization created'
                            type: string
                            example: 1511_interface@155
                          authLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: authorized
                        type: object
                  type: object
              type: object
      responses:
        200:
          description: 'success - user updated'
        201:
          description: 'success - user created'
        400:
          description: 'Error response'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Valid role missing'
                type: object
      deprecated: true
  /user/employer:
    get:
      tags:
        - User
      summary: 'Get a list of employer users'
      operationId: user-employer-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier of a user to get a specific user'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key known in an external system associated with the user'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date of an user'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date of an user'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by users updated since this date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedFrom]'
          in: query
          description: 'Filter by the creation date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedUntil]'
          in: query
          description: 'Filter up to (and including) the creation date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[isActive]'
          in: query
          description: 'Filter whether the user is active'
          schema:
            type: boolean
        -
          name: 'filter[arboRole]'
          in: query
          description: 'Filter on the unique identifier of the arbo role'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employerRole]'
          in: query
          description: 'Filter on the unique identifier of the employer role'
          schema:
            type: string
            format: uuid
        -
          name: sort
          in: query
          description: "Sort results by start given field, use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetUserSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetUserIncludeOptions'
      responses:
        200:
          description: 'A list of Users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - User
      summary: 'Create employer user'
      description: 'Post endpoint to create employer users'
      operationId: user-employer-post-v1-advanced
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequestBody'
      responses:
        201:
          description: 'User successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /user/internal:
    get:
      tags:
        - User
      summary: 'Get a list of internal users'
      operationId: user-internal-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific user'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key known in an external system associated with the user'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date of an user'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date of an user'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedFrom]'
          in: query
          description: 'Filter by the creation date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedUntil]'
          in: query
          description: 'Filter up to (and including) the create date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[isActive]'
          in: query
          description: 'Filter whether the user is active'
          schema:
            type: boolean
        -
          name: 'filter[arboRole]'
          in: query
          description: 'Filter on the unique identifier of the arbo role'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employerRole]'
          in: query
          description: 'Filter on the unique udentifier of the employer role'
          schema:
            type: string
            format: uuid
        -
          name: sort
          in: query
          description: "Sort results by the given field, use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetUserSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetUserIncludeOptions'
      responses:
        200:
          description: 'A list of Users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - User
      summary: 'Create internal user'
      description: 'Post endpoint to create internal users'
      operationId: user-internal-post-v1-advanced
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequestBody'
      responses:
        201:
          description: 'User successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /user/external:
    get:
      tags:
        - User
      summary: 'Get a list of external users'
      operationId: user-external-get-v1-advanced
      parameters:
        -
          name: 'filter[id]'
          in: query
          description: 'Filter by the unique identifier to get a specific user'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[externalKey]'
          in: query
          description: 'Filter by the key known in an external system associated with the user'
          schema:
            type: string
        -
          name: 'filter[dateStart]'
          in: query
          description: 'Filter by the start date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateEnd]'
          in: query
          description: 'Filter by the end date'
          schema:
            type: string
            format: date
        -
          name: 'filter[dateUpdatedFrom]'
          in: query
          description: 'Filter by the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateUpdatedUntil]'
          in: query
          description: 'Filter up to (and including) the update date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedFrom]'
          in: query
          description: 'Filter by the creation date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[dateCreatedUntil]'
          in: query
          description: 'Filter up to (and including) the create date'
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        -
          name: 'filter[isActive]'
          in: query
          description: 'Filter whether the user is active'
          schema:
            type: boolean
        -
          name: 'filter[arboRole]'
          in: query
          description: 'Filter on the unique identifier of the arbo role'
          schema:
            type: string
            format: uuid
        -
          name: 'filter[employerRole]'
          in: query
          description: 'Filter on the unique identifier of the employer role'
          schema:
            type: string
            format: uuid
        -
          name: sort
          in: query
          description: "Sort results by the given field, use '-' as prefix to sort descending"
          schema:
            $ref: '#/components/schemas/GetUserSortOptions'
        -
          name: include
          in: query
          description: 'Include the related resources - use comma separated values to include multiple resources'
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetUserIncludeOptions'
      responses:
        200:
          description: 'A list of Users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - User
      summary: 'Create external user'
      description: 'Post endpoint to create external users'
      operationId: user-external-post-v1-advanced
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequestBody'
      responses:
        201:
          description: 'User successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /user:
    patch:
      tags:
        - User
      summary: 'Create Users patch Endpoint'
      description: 'Patch endpoint to create users'
      operationId: user-patch-v1-advanced
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequestBody'
      responses:
        200:
          description: 'User successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /user/authorizations:
    post:
      tags:
        - User
      summary: 'Post User Authorizations Endpoint'
      description: 'Post user authorizations'
      operationId: user-authorizations-post-v1-advanced
      requestBody:
        description: 'User data with authorizations'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserAuthorizationsRequestBody'
      responses:
        201:
          description: 'User authorizations successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
components:
  schemas:
    GetAbsenceReasonResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AbsenceReason'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetAbsenceReasonSortOptions:
      type: string
      enum:
        - externalKey
        - name
        - code
        - '-externalKey'
        - '-name'
        - '-code'
    AbsenceReason:
      properties:
        id:
          description: 'The unique identifier of the AbsenceReason.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 9369d575-04bf-41a3-a021-c3f64429dbbc
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the absence-reason. This key serves as an alternative to the 'id' field for referencing the absence-reason."
          type: string
          maxLength: 191
          minLength: 0
          example: ziek-uit-dienst
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the AbsenceReason.'
          type: string
          maxLength: 191
          minLength: 0
          example: staging-1234
          nullable: true
        name:
          description: 'The name of the AbsenceReason.'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Ziek uit dienst'
        code:
          description: 'The code assigned to the AbsenceReason.'
          type: string
          maxLength: 191
          minLength: 0
          example: ZUD
          nullable: true
        isPrimary:
          description: 'Whether this is a primary AbsenceReason or not.'
          type: boolean
          maxLength: 191
          minLength: 0
          example: false
      type: object
    AppointmentStatusEnumOptions:
      description: 'The status of the appointment'
      type: string
      enum:
        - cancelled
        - completed
        - reserved
        - final
        - noShow
        - noAvailability
    GetAppointmentResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Appointment'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetAppointmentIncludeOptions:
      type: string
      enum:
        - employer
        - user
        - location
        - employee
        - operation
        - methodOfConsult
    Appointment:
      properties:
        id:
          description: 'The unique identifier of the appointment'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        title:
          description: 'The title of the appointment'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        status:
          $ref: '#/components/schemas/AppointmentStatusEnumOptions'
        description:
          description: 'The description of the appointment'
          type: string
          nullable: true
        methodOfConsult:
          $ref: '#/components/schemas/MethodOfConsultEnumOptions'
        url:
          description: "The url of the appointment in case of an 'online' appointment"
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        phoneNumber:
          description: "The phone number to call in case of a 'phone' appointment"
          type: string
          maxLength: 32
          minLength: 0
          nullable: true
        operation:
          oneOf:
            -
              $ref: '#/components/schemas/Operation'
          nullable: true
          description: 'The operation related to the appointment, available if the relation is included in the query'
        location:
          oneOf:
            -
              $ref: '#/components/schemas/AppointmentLocation'
          nullable: true
          description: 'The location related to the appointment, available if the relation is included in the query'
        employee:
          oneOf:
            -
              $ref: '#/components/schemas/Employee'
          nullable: true
          description: 'The employee the appointment is for, available if the relation is included in the query'
        user:
          oneOf:
            -
              $ref: '#/components/schemas/User'
          nullable: true
          description: 'The user the appointment belongs to, available if the relation is included in the query'
        employer:
          oneOf:
            -
              $ref: '#/components/schemas/Employer'
          nullable: true
          description: 'The employer related to the appointment, available if the relation is included in the query'
        dateStart:
          description: 'The start date and time of the appointment in YYYY-MM-DD HH:MM:SS format'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateEnd:
          description: 'The end date and time of the appointment in YYYY-MM-DD HH:MM:SS format'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateCreated:
          description: 'The date and time the employee was created in YYYY-MM-DD HH:MM:SS format'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date and time the absence course was last updated in YYYY-MM-DD HH:MM:SS format'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    AppointmentEmployee:
      properties:
        id:
          description: 'The unique identifier of the employee'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employee. This key serves as an alternative to the 'id' field for referencing the employee."
          type: string
          maxLength: 191
          minLength: 0
          example: ext-key-987654321
          nullable: true
        person:
          oneOf:
            -
              $ref: '#/components/schemas/EmployerPersonResource'
          nullable: true
          description: 'The personal details associated with the employee, available if the relation is included in the query'
        dateCreated:
          description: 'The date and time the employee was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time the absence course was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    AppointmentLocation:
      properties:
        id:
          description: 'The unique identifier of the appointment location'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        name:
          description: 'The name of the appointment location'
          type: string
          maxLength: 191
          minLength: 1
          example: Hoofdlocatie
        postalCode:
          description: 'The postal code of the appointment location'
          type: string
          minLength: 6
          example: 7556BN
        city:
          description: 'The city of the appointment location'
          type: string
          maxLength: 191
          minLength: 1
          example: Hengelo
        street:
          description: 'The street of the appointment location'
          type: string
          maxLength: 191
          minLength: 1
          example: Demmersweg
        houseNumber:
          description: 'The house number of the appointment location'
          type: integer
          example: '46'
        houseNumberAddition:
          description: 'The house number addition of the appointment location'
          type: string
          maxLength: 16
          minLength: 0
          example: A
      type: object
    AppointmentSchedule:
      properties:
        id:
          description: 'The id of the schedule'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        name:
          description: 'The name of the schedule'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        isWorking:
          description: 'Whether the schedule is working or not'
          type: boolean
        isRoomExclusivelyReserved:
          description: 'Whether the room is exclusively reserved for the schedule or not'
          type: boolean
        timeConstrainedEntityId:
          description: 'The id of the time constrained entity of the schedule'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          nullable: true
        schedulableEntity:
          description: 'Whether the schedule is a schedulable entity or not'
          type: string
          nullable: true
      type: object
    AppointmentUserResource:
      properties:
        id:
          description: 'The unique identifier of the user'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the user. This key serves as an alternative to the 'id' field for referencing the user."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        username:
          description: 'Username of the user'
          type: string
          maxLength: 191
          minLength: 1
        type:
          $ref: '#/components/schemas/UserTypeEnumOptions'
        person:
          $ref: '#/components/schemas/MasterPerson'
        isActive:
          description: 'Indicates if the user is active'
          type: boolean
      type: object
    MethodOfConsultEnumOptions:
      description: 'The method of consultation for the appointment'
      type: string
      enum:
        - online
        - phone
        - location
        - unknown
    PostAuthTokenRequestBodyScopeExample:
      description: 'This is an example of how to request scopes for the bearer token'
      properties:
        absencecourse:
          type: array
          items:
            type: string
          example:
            - read
            - create
        employee:
          type: array
          items:
            type: string
          example:
            - read
      type: object
    PostAuthTokenRequestBody:
      required:
        - grant_type
        - client_id
        - client_secret
      properties:
        grant_type:
          type: string
          example: client_credentials
        client_id:
          type: string
          example: 639cb341-b25c-4b72-acee-e0ac2be5c2dd
        client_secret:
          type: string
          example: your_client_secret
        scope:
          $ref: '#/components/schemas/PostAuthTokenRequestBodyScopeExample'
      type: object
    AccessToken:
      properties:
        token_type:
          description: 'Type of token'
          type: string
          example: Bearer
        expires_in:
          description: 'Expiration time of token'
          type: integer
          default: 10800
        access_token:
          description: 'The access token'
          type: string
      type: object
    AuthBadRequestResponse:
      properties:
        error:
          type: string
          example: invalid_client
        error_description:
          type: string
          example: 'Client authentication failed'
        message:
          type: string
          example: 'Client authentication failed'
      type: object
    Unauthorized:
      properties:
        error:
          type: string
          example: invalid_client
        error_description:
          type: string
          example: 'Client authentication failed'
        hint:
          type: string
          example: 'Check the `absencecourse-read` scope'
        message:
          type: string
          example: 'Client authentication failed'
      type: object
    UnprocessableEntity:
      properties:
        error:
          type: string
          example: invalid_client
        error_description:
          type: string
          example: 'Client authentication failed'
        message:
          type: string
          example: 'Client authentication failed'
      type: object
    PublicApiError:
      description: 'Error response object'
      required:
        - code
        - message
        - detail
      properties:
        code:
          type: string
          example: REQ_00001
        message:
          type: string
          example: 'Request validation failed'
        detail:
          type: array
          items:
            type: string
          example:
            - 'Description of the first validation error'
            - 'Description of the second validation error'
      type: object
    BadRequestResponse:
      properties:
        message:
          type: string
          example: 'Request validation failed'
        timestamp:
          type: integer
          example: 1697101490
        status:
          type: integer
          example: 400
        errors:
          $ref: '#/components/schemas/PublicApiError'
        traceId:
          type: string
          example: sample-uuid-string
      type: object
    ServerErrorResponse:
      properties:
        message:
          type: string
          example: 'Server Error'
        timestamp:
          type: integer
          example: 1697101490
        status:
          type: integer
          example: 500
        errors:
          $ref: '#/components/schemas/PublicApiError'
        traceId:
          type: string
          example: sample-uuid-string
      type: object
    GenderEnumOptions:
      description: 'The gender of the person. (m=male, f=female, x=other)'
      type: string
      enum:
        - m
        - f
        - x
    PaginationLinks:
      properties:
        self:
          type: string
          format: uri
          example: 'https://api.staging.bluevi.com/entity?page[number]=1&page[size]=25'
        first:
          type: string
          format: uri
          example: 'https://api.staging.bluevi.com/entity?page[size]=25'
        last:
          type: string
          format: uri
          example: 'https://api.staging.bluevi.com/entity?page[number]=1&page[size]=25'
        prev:
          type: string
          format: uri
          example: 'https://api.staging.bluevi.com/entity?page[size]=25'
          nullable: true
        next:
          type: string
          format: uri
          example: 'https://api.staging.bluevi.com/entity?page[number]=2&page[size]=25'
          nullable: true
      type: object
    PaginationMetaInformation:
      properties:
        total:
          type: integer
          example: 123
        perPage:
          type: integer
          example: 25
        totalPages:
          type: integer
          example: 5
      type: object
    PublicApiPatchResponse:
      required:
        - message
        - status
        - data
        - traceId
      properties:
        message:
          type: string
          example: success
        status:
          type: integer
          example: 200
        errors:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/PublicApiResponseBodyDataExample'
        traceId:
          type: string
          format: uuid
          example: b7810b40-bd6a-4bea-a92c-5543e5b288b9
      type: object
    PublicApiResponseBodyDataExample:
      description: 'The data object of the response which contains the created resource'
      properties:
        id:
          description: 'The unique identifier of the created resource'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 550e8400-e29b-41d4-a716-446655440000
        externalKey:
          description: "An identifier provided by an external system that uniquely identifies the resource in that system. This key serves as an alternative to the 'id' field for referencing the entity."
          type: string
          maxLength: 191
          minLength: 0
          example: external-key-123
          nullable: true
        name:
          description: 'The name of the created resource'
          type: string
          example: 'Sample Resource'
      type: object
    PublicApiPostResponse:
      required:
        - message
        - status
        - data
        - traceId
      properties:
        message:
          type: string
          example: success
        status:
          type: integer
          example: 201
        errors:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/PublicApiResponseBodyDataExample'
        traceId:
          type: string
          format: uuid
          example: b7810b40-bd6a-4bea-a92c-5543e5b288b9
      type: object
    GetIllnessDossierResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IllnessDossier'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetZwerdDossierResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ZwerdDossier'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetPaidParentalLeaveDossierResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaidParentalLeaveDossier'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetBirthLeaveDossierResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BirthLeaveDossier'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetSpoor2DossierResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Spoor2Dossier'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetDossierResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Dossier'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    SuccessResponse:
      properties:
        message:
          type: string
          example: success
        timestamp:
          type: integer
          example: 1697101490
        status:
          type: integer
          example: 200
        traceId:
          type: string
          example: sample-uuid-string
      type: object
    GetArboRoleResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ArboRole'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    ArboRole:
      properties:
        id:
          description: 'Unique identifier for the arbo role'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 379b2706-bc68-4b28-94a7-87138e9525c4
        name:
          description: 'The name of the arbo role'
          type: string
          maxLength: 100
          minLength: 1
          example: Administrator
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the arbor-role. This key serves as an alternative to the 'id' field for referencing the arbo-role."
          type: string
          maxLength: 191
          minLength: 0
          example: admin
          nullable: true
        migrationKey:
          description: 'The migration key of the arbo role'
          type: string
          maxLength: 191
          minLength: 0
          example: staging_123
          nullable: true
        active:
          description: 'Indication if the arbo role is active'
          type: boolean
          example: true
      type: object
    GetCompanyDoctorResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CompanyDoctor'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    CompanyDoctor:
      properties:
        id:
          description: 'The unique identifier of the company doctor (bedrijfsarts).'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 21f53f31-2900-4526-a4d5-e17aff19dc5e
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the company-doctor. This key serves as an alternative to the 'id' field for referencing the company-doctor."
          type: string
          maxLength: 191
          minLength: 0
          example: BA@3467
          nullable: true
        migrationKey:
          description: 'The internal key used in migrations associated with the company doctor.'
          type: string
          maxLength: 191
          minLength: 0
          example: old_database_1234
          nullable: true
        username:
          description: 'The username of the company doctor. This is available if the user relation is loaded.'
          type: string
          maxLength: 191
          minLength: 0
          example: username
          nullable: true
        person:
          $ref: '#/components/schemas/MasterPerson'
      type: object
    PatchContactPersonResponse:
      allOf:
        -
          $ref: '#/components/schemas/PublicApiPatchResponse'
        -
          properties:
            data:
              $ref: '#/components/schemas/ContactPerson'
          type: object
    PatchContactPersonTypeEnumOptions:
      type: string
      enum:
        - employer
        - organizational-unit
    PatchContactPersonRequestBody:
      properties:
        id:
          description: "The unique identifier to specify the contact person to be updated. This field is required if 'key' is not used, and it cannot be used simultaneously with the 'key' option."
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 4453e0e4-1d5d-4c1e-ac42-c541c50a34a3
        key:
          description: "An identifier provided by an external system that uniquely specifies the contact person to be updated. This key serves as an alternative to the 'id' field for referencing the contact person; only one of 'id' or 'key' is needed in a request to identify the employer."
          type: string
          example: 1234@external-key|test
        initials:
          description: 'Initials of the contact person'
          type: string
          maxLength: 30
          minLength: 1
          example: J.D.
        prefix:
          description: 'Last name prefix of the contact person'
          type: string
          maxLength: 16
          minLength: 1
          example: 'van der'
          nullable: true
        lastName:
          description: 'Last name of the contact person'
          type: string
          maxLength: 100
          minLength: 1
          example: Smith
        firstName:
          description: 'first name of the contact person'
          type: string
          maxLength: 255
          minLength: 1
          example: John
        isUwvContactPerson:
          description: 'Whether the contact person is a UWV contact person'
          type: boolean
          example: false
        email:
          description: 'Email address of the contact person'
          type: string
          format: email
          maxLength: 191
          minLength: 1
          example: john.doe@example.com
        gender:
          $ref: '#/components/schemas/GenderEnumOptions'
        phone:
          description: 'Phone number of the contact person'
          type: string
          maxLength: 191
          minLength: 1
          example: '0201234567'
          nullable: true
        mobile:
          description: 'Mobile number of the contact person'
          type: string
          maxLength: 255
          minLength: 1
          example: '0612345678'
        externalKey:
          description: 'External identifier for the contact person'
          type: string
          maxLength: 191
          minLength: 1
          example: cp-123
          nullable: true
        type:
          $ref: '#/components/schemas/ContactPersonTypeEnumOptions'
        employerId:
          description: "The unique identifier of the employer the contact person belongs to, mutually exclusive with 'employerKey'. One employer identifier is required when creating a ContactPerson of type 'employer'."
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 550e8400-e29b-41d4-a716-446655440000
        employerKey:
          description: "The external key of the employer the contact person belongs to. Mutually exclusive with 'employerId'. One employer identifier is required when creating a ContactPerson of type 'employer'."
          type: string
          maxLength: 191
          example: some-key@remote-system@12345
        organizationalUnitId:
          description: "The unique identifier of the organizational unit. Mutually exclusive with 'organizationalUnitKey'. One organizational unit identifier is required when creating a ContactPerson of type 'organizational-unit'."
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 550e8400-e29b-41d4-a716-446655440001
        organizationalUnitKey:
          description: "The external key of the organizational unit the contact person belongs to. Mutually exclusive with 'organizationalUnitId'. One organizational unit identifier is required when creating a ContactPerson of type 'organizational-unit'."
          type: string
          maxLength: 191
          example: some-key@remote-system@12345
      type: object
    PostContactPersonResponse:
      allOf:
        -
          $ref: '#/components/schemas/PublicApiPostResponse'
        -
          properties:
            data:
              $ref: '#/components/schemas/ContactPerson'
          type: object
    PostContactPersonRequestBody:
      required:
        - type
        - initials
        - firstName
        - lastName
        - email
        - mobile
      properties:
        initials:
          description: 'Initials of the contact person'
          type: string
          maxLength: 30
          example: J.D.
        prefix:
          description: 'Last name prefix of the contact person'
          type: string
          maxLength: 16
          example: 'van der'
          nullable: true
        lastName:
          description: 'Last name of the contact person'
          type: string
          maxLength: 100
          example: Smith
        firstName:
          description: 'first name of the contact person'
          type: string
          maxLength: 255
          example: John
        isUwvContactPerson:
          description: 'Whether the contact person is a UWV contact person'
          type: boolean
          example: false
        email:
          description: 'Email address of the contact person'
          type: string
          format: email
          maxLength: 191
          example: john.doe@example.com
        gender:
          $ref: '#/components/schemas/GenderEnumOptions'
        phone:
          description: 'Phone number of the contact person'
          type: string
          maxLength: 191
          example: '+31201234567'
          nullable: true
        mobile:
          description: 'Mobile number of the contact person'
          type: string
          maxLength: 255
          example: '+31612345678'
          nullable: true
        externalKey:
          description: 'External identifier for the contact person'
          type: string
          maxLength: 191
          example: cp-123
        type:
          $ref: '#/components/schemas/ContactPersonTypeEnumOptions'
        employerId:
          description: "The unique identifier of the employer the contact person belongs to, mutually exclusive with 'employerKey'. One employer identifier is required when creating a ContactPerson of type 'employer'."
          type: string
          format: uuid
          maxLength: 36
          example: 550e8400-e29b-41d4-a716-446655440000
        employerKey:
          description: "The external key of the employer the contact person belongs to. Mutually exclusive with 'employerId'. One employer identifier is required when creating a ContactPerson of type 'employer'."
          type: string
          maxLength: 191
          example: some-key@remote-system@12345
        organizationalUnitId:
          description: "The unique identifier of the organizational unit. Mutually exclusive with 'organizationalUnitKey'. One organizational unit identifier is required when creating a ContactPerson of type 'organizational-unit'."
          type: string
          format: uuid
          maxLength: 36
          example: 550e8400-e29b-41d4-a716-446655440001
        organizationalUnitKey:
          description: "The external key of the organizational unit the contact person belongs to. Mutually exclusive with 'organizationalUnitId'. One organizational unit identifier is required when creating a ContactPerson of type 'organizational-unit'."
          type: string
          maxLength: 191
          example: some-key@remote-system@12345
      type: object
    PostContactPersonTypeEnumOptions:
      type: string
      enum:
        - employer
        - organizational-unit
    FullSalutationEnumOptions:
      type: string
      enum:
        - mr
        - mister
        - mrs
        - miss
        - unknown
    ContactPersonTypeEnumOptions:
      description: 'The type that the contact person is associated with'
      type: string
      enum:
        - general
        - uwv
    ContactPerson:
      properties:
        id:
          description: 'The unique identifier of the contact person'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 029ff05c-6852-4a65-b6b9-50cb2dd1afea
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the contact-person. This key serves as an alternative to the 'id' field for referencing the contact-person."
          type: string
          maxLength: 191
          minLength: 0
          example: ext-567489
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the contact person'
          type: string
          maxLength: 191
          minLength: 0
          example: old_id@74839
          nullable: true
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnitWithoutRelations'
        employer:
          $ref: '#/components/schemas/EmployerWithoutRelations'
        email:
          description: 'The emailaddress of the contact person'
          type: string
          format: email
          example: mail@domain.com
        phone:
          description: 'The phonenumber of the contact person'
          type: string
          maxLength: 191
          minLength: 0
          example: '088 800 8000'
          nullable: true
        mobile:
          description: 'The mobile phonenumber of the contact person'
          type: string
          maxLength: 191
          minLength: 0
          example: '0612345678'
        initials:
          description: 'The initials of the contact person'
          type: string
          maxLength: 30
          minLength: 1
          example: J
        lastName:
          description: 'The surname/lastname of the contact person'
          type: string
          maxLength: 100
          minLength: 1
          example: Doe
        firstName:
          description: 'The nickname/callname of the contact person'
          type: string
          maxLength: 255
          minLength: 0
          example: John
          nullable: true
        prefix:
          description: 'The last name prefix of the contact person'
          type: string
          maxLength: 16
          minLength: 0
          example: 'van der'
          nullable: true
        gender:
          $ref: '#/components/schemas/GenderEnumOptions'
        type:
          $ref: '#/components/schemas/ContactPersonTypeEnumOptions'
        isAuthorized:
          description: 'Whether the contact person is authorized'
          type: boolean
          example: true
        isUwvContactPerson:
          description: 'Whether the contact person is a contact person for the UWV'
          type: boolean
          example: false
        fullSalutation:
          $ref: '#/components/schemas/FullSalutationEnumOptions'
        dateCreated:
          description: 'The date and time that the contact person was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the contact person was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2023-12-31 12:34:45'
      type: object
    GetContractTypeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ContractType'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetContractTypeSortOptions:
      type: string
      enum:
        - code
        - name
        - dateStart
        - '-code'
        - '-name'
        - '-dateStart'
    GetEmployerContractResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Contract'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmployerContractIncludeOptions:
      type: string
      enum:
        - contractType
        - serviceType
        - employer
    GetContractModulesResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Module'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetPartnershipResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Partnership'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetPartnershipSortOptions:
      type: string
      enum:
        - name
        - dateCreated
        - '-name'
        - '-dateCreated'
    GetServiceTypeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ServiceType'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    PatchEmployerContractRequestBody:
      description: 'You only have to submit the mutuable fields'
      required:
        - 'employerContractId,employerContractExternalKey'
      properties:
        employerContractId:
          description: 'The unique identifier of the employer contract (required if employerContractExternalKey is not provided)'
          type: string
          format: uuid
        employerContractExternalKey:
          description: 'The external key of the employer contract to be used as an identifier instead of employerContractId (required if employerContractId is not provided)'
          type: string
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer-contract. This key serves as an alternative to the 'id' field for referencing the employer-contract."
          type: string
          nullable: true
        employerId:
          description: 'The unique identifier of the associated employer'
          type: string
          format: uuid
        serviceTypeId:
          description: 'The unique identifier of the service type'
          type: string
          format: uuid
        organizationalUnitId:
          description: 'The unique identifier of the organizational unit'
          type: string
          format: uuid
        contractTypeId:
          description: 'The unique identifier of the contract type'
          type: string
          format: uuid
        partnershipId:
          description: 'The unique identifier of the partnership'
          type: string
          format: uuid
        dateStart:
          description: 'The start date of the employer contract in format YYYY-MM-DD'
          type: string
          format: date
        dateEnd:
          description: 'The end date of the employer contract in format YYYY-MM-DD'
          type: string
          format: date
          nullable: true
        contractStatus:
          $ref: '#/components/schemas/EmployerContractStatusEnumOptions'
        contractNumber:
          description: 'The administrative contract number of the employer contract'
          type: string
          nullable: true
        accountNumber:
          description: 'The administrative account number of the employer contract'
          type: string
          nullable: true
        contractHoursFrom:
          description: 'The minimum starting hours of the employer contract'
          type: number
          format: float
          nullable: true
        contractHoursUntil:
          description: 'The maximum starting hours of the employer contract'
          type: number
          format: float
          nullable: true
        incomingDossiers:
          description: 'Whether the employer contract receives incoming dossiers'
          type: boolean
          nullable: true
      type: object
    PostEmployerContractRequestBody:
      description: 'Employer Contract data'
      required:
        - employerId
        - contractTypeId
        - partnershipId
        - dateStart
        - contractStatus
      properties:
        employerId:
          description: 'The unique identifier of the Employer.'
          type: string
          format: uuid
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer-contract. This key serves as an alternative to the 'id' field for referencing the employer-contract."
          type: string
          example: External-Key-Test
          nullable: true
        contractTypeId:
          description: 'The unique identifier of the Contract type.'
          type: string
          format: uuid
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        partnershipId:
          description: 'The unique identifier of the Partnership.'
          type: string
          format: uuid
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        serviceTypeId:
          description: 'The unique identifier of the service type. REQUIRED if the partner uses service contracts'
          type: string
          format: uuid
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        dateStart:
          description: 'The start-date of the employer contract in format YYYY-MM-DD'
          type: string
          format: date
          example: '2024-01-01'
        dateEnd:
          description: 'The end-date of the employer contract in format YYYY-MM-DD'
          type: string
          format: date
          example: '2024-03-01'
          nullable: true
        contractStatus:
          $ref: '#/components/schemas/EmployerContractStatusEnumOptions'
        closePrevious:
          description: 'When adding a new employer contract and the employer already has an open employment contract with no end date you can use this parameter to close the previous contract at the start date of the current contract.'
          type: boolean
          example: true
          nullable: true
        incomingDossiers:
          description: 'Indicate if dossiers started before the start-date are associated to this employer-contract'
          type: boolean
          example: true
          nullable: true
        contractNumber:
          description: 'The administrative contractnumber associated to this employer-contract'
          type: string
          example: '58697'
          nullable: true
        accountNumber:
          description: 'The administrative accountnumber associated to this employer-contract'
          type: string
          example: '7105698'
          nullable: true
        contractHoursFrom:
          description: 'For non service contracts you can determine the minimum hours per week for the contract'
          type: number
          example: 80
          nullable: true
        contractHoursUntil:
          description: 'For non service contracts you can determine the maximum hours per week for the contract'
          type: number
          example: 80
          nullable: true
      type: object
    Contract:
      properties:
        id:
          description: 'The unique identifier of the contract'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 684de7ad-3fe7-4a68-9384-46b1ed85d5f5
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the contract. This key serves as an alternative to the 'id' field for referencing the contract."
          type: string
          maxLength: 191
          minLength: 0
          example: Contract-12345
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the contract'
          type: string
          maxLength: 191
          minLength: 0
          example: database_old@contract_23578
          nullable: true
        type:
          $ref: '#/components/schemas/ContractType'
        service:
          $ref: '#/components/schemas/ServiceType'
        accountnumber:
          description: 'Account number associated with the contract'
          type: string
          maxLength: 191
          minLength: 0
          example: AN2345
          nullable: true
        active:
          description: 'Indication if the contract is active'
          type: boolean
          example: true
        dateStart:
          description: 'The start date of the contract in YYYY-MM-DD format'
          type: string
          format: date
          example: '2023-01-01'
        dateEnd:
          description: 'The end date of the contract in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-12-31'
        dateCreated:
          description: 'The date and time that the contract was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the contract was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    ContractTypeTypeEnumOptions:
      type: string
      enum:
        - base
        - custom
    BillingTypeEnumOptions:
      type: string
      enum:
        - post-calculation
        - fixed
        - budget
        - credits
    ContractType:
      properties:
        id:
          description: 'The unique identifier of the contract type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 29a41d82-3b1a-42ba-b93a-292d5f01716c
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the contract-type. This key serves as an alternative to the 'id' field for referencing the contract-type."
          type: string
          maxLength: 191
          minLength: 0
          example: ext1234
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the contract type'
          type: string
          maxLength: 191
          minLength: 0
          example: old_id@1234
          nullable: true
        name:
          description: 'The name of the contract type'
          type: string
          maxLength: 191
          minLength: 1
          example: Basis
        code:
          description: 'The code of the contract type'
          type: string
          maxLength: 191
          minLength: 0
          example: BASIC
          nullable: true
        description:
          description: 'The description of the contract type'
          type: string
          maxLength: 65535
          minLength: 0
          example: 'This contract only supports the mandatory actions of the WVP'
          nullable: true
        subscriptionFee:
          description: 'The subscription fee of the contract type. Default 0.00'
          type: number
          format: double
          pattern: '(\d{0,8}.\d{0,2})'
          example: 250
        type:
          $ref: '#/components/schemas/ContractTypeTypeEnumOptions'
        billingType:
          $ref: '#/components/schemas/BillingTypeEnumOptions'
        dateStart:
          description: 'The start date of this contracttype in YYYY-MM-DD format'
          type: string
          format: date
          example: '2000-01-01'
        dateEnd:
          description: 'The end date of this contract in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-12-31'
        dateCreated:
          description: 'The date and type that the contract type was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the contract type was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2021-01-23 12:34:56'
      type: object
    EmployerContractStatusEnumOptions:
      type: string
      enum:
        - active
        - ended
        - blocked
    EmployerContract:
      properties:
        id:
          description: 'The unique identifier of the employer contract'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: c492aff5-1285-4eaf-932c-c2a291d692ca
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer-contract. This key serves as an alternative to the 'id' field for referencing the employer-contract."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-EMP-CNT-321
          nullable: true
        migrationKey:
          description: 'An internal key, used for migration between subsystems, to identify the employer contract'
          type: string
          maxLength: 191
          minLength: 0
          example: MIG-EMPCNT-123
          nullable: true
        contractType:
          $ref: '#/components/schemas/ContractType'
        employer:
          $ref: '#/components/schemas/EmployerWithoutRelations'
        partnership:
          $ref: '#/components/schemas/Partnership'
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnitWithoutRelations'
        contractStatus:
          $ref: '#/components/schemas/EmployerContractStatusEnumOptions'
        accountNumber:
          description: 'The administrative account number associated with the contract'
          type: string
          maxLength: 191
          minLength: 0
          example: AN-123.456
          nullable: true
        contractNumber:
          description: 'The administrative contract number associated with the contract'
          type: string
          maxLength: 191
          minLength: 0
          example: CN-234.23556-3
          nullable: true
        contractHoursFrom:
          description: 'The minimum starting hours of the employer contract'
          type: number
          format: float
          example: 80
          nullable: true
        contractHoursUntil:
          description: 'The maximum starting hours of the employer contract'
          type: number
          format: float
          example: 80
          nullable: true
        dateStart:
          description: 'The start date of the employer-contract in YYYY-MM-DD format'
          type: string
          format: date
          example: '2020-01-23'
        dateEnd:
          description: 'The end date of the employer-contract in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-01-23'
          nullable: true
        dateCreated:
          description: 'The date and time the contract was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time that the contract was last updated in our system, Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    EmployerServiceContract:
      properties:
        id:
          description: 'ID of the service contract'
          type: string
          format: uuid
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the service contract. This key serves as an alternative to the 'id' field for referencing the service contract."
          type: string
        migrationKey:
          description: 'Migration key associated with the contract'
          type: string
        contractType:
          $ref: '#/components/schemas/ContractType'
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        employer:
          $ref: '#/components/schemas/Employer'
        partnership:
          $ref: '#/components/schemas/Partnership'
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        contractStatus:
          $ref: '#/components/schemas/EmployerContractStatusEnumOptions'
        dateStart:
          description: 'The start date in YYYY-MM-DD format'
          type: string
          format: date
        dateEnd:
          description: 'The end date in YYYY-MM-DD format'
          type: string
          format: date
          nullable: true
        dateCreated:
          description: 'The date the contract was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date the contract was updated'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    Module:
      properties:
        id:
          description: 'ID of the module'
          type: string
          format: uuid
        name:
          description: 'The name of the module'
          type: string
        description:
          description: 'The description of the module'
          type: string
        subscriptionFee:
          description: 'The subscription fee of the module'
          type: number
        code:
          description: 'The code of the module'
          type: string
        dateCreated:
          description: 'The date the module was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date the module was updated'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    OwnRiskContract:
      properties:
        id:
          description: 'The unique identifier of the own risk contract'
          type: string
          format: uuid
          example: 02719655-0eac-4e49-8371-8c25172f987d
        type:
          description: 'The type of the own risk contract'
          type: string
          example: wga
        dateCreated:
          description: 'The date the own risk contract was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date the own risk contract was updated'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    Partnership:
      properties:
        id:
          description: 'The unique identifier of the partnership'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 3d47336e-a5a7-4fc6-b703-e4cd13d9ea4c
        name:
          description: 'The name of the partnership'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Standaard samenwerkingsovereenkomst'
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the partnership. This key serves as an alternative to the 'id' field for referencing the partnership."
          type: string
          maxLength: 191
          minLength: 0
          example: EXt-KEY-123
          nullable: true
        active:
          description: 'Whether the partnership is active'
          type: boolean
        default:
          description: 'Whether the partnership is the default partnership'
          type: boolean
        dateCreated:
          description: 'The date and time the partnership was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date and time the partnership was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    ServiceType:
      properties:
        id:
          description: 'The unique identifier of the service type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 07d07e69-7bfb-4cf8-9446-08a0feac1212
        name:
          description: 'The name of the service type'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Standaard dienstverlening'
        active:
          description: 'Indication if the service type is active'
          type: boolean
          example: true
        dateCreated:
          description: 'The date and time that the service type was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the service type was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-12-23 12:34:56'
      type: object
    GetAbsenceCourseResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AbsenceCourse'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetAbsenceCourseSortOptions:
      type: string
      enum:
        - dateStart
        - '-dateStart'
        - externalKey
        - '-externalKey'
    GetAbsenceCourseIncludeOptions:
      type: string
      enum:
        - dossier
        - dossier.nursingAddress
        - absenceReason
    PatchAbsenceCourseRequestBody:
      required:
        - id
      properties:
        id:
          description: 'The unique identifier of the absence course'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 22ac850c-144e-4fda-8ccb-2e098116012d
        employmentId:
          description: "The unique identifier of the employment the absence is related to, exclusive with 'employmentKey'. Either this field is mandatory or field employmentKey is mandatory."
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: e8f92546-5970-43ae-9f44-2fd4687bfd6b
        employmentKey:
          description: "The external key of the employment the absence is related to, exclusive with 'employmentId'. Either this field is mandatory or field employmentId is mandatory."
          type: string
          maxLength: 191
          minLength: 0
          example: dvb-1001-1
          nullable: true
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the absence-course. This key serves as an alternative to the 'id' field for referencing the absence-course."
          type: string
          maxLength: 191
          minLength: 0
          example: verzuimverloop-1001-01
          nullable: true
        dateStart:
          description: 'The startdate of the absencecourse. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2025-02-10'
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        absenceReasonId:
          description: 'Set absence reason based on the unique identifier of the absence reason'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: c7f56e2a-7b9c-48d9-b9fa-a0c057e9df06
        absenceReasonCode:
          description: "Set absence reason based on the 'code' of the absence reason (code is user-configurable)"
          type: string
          maxLength: 191
          minLength: 0
          example: sick
          nullable: true
        wageValue:
          description: "Wage value ('loonwaarde') at the point in time the absence course is recorded"
          type: number
          format: float
        workedHours:
          description: 'Worked hours at the point in time the absence course is recorded'
          type: integer
          format: int32
          example: 2
        recoveryPercentage:
          description: 'Percentage of recovery, 0 being fully absent, 100 being fully recovered'
          type: integer
          format: int32
          maximum: 100
          minimum: 0
          example: 25
        recoveryReason:
          oneOf:
            -
              $ref: '#/components/schemas/RecoveryReasonEnumOptions'
          nullable: true
          description: "Reason for recovery, only allowed with 'recoveryPercentage' equal to 100"
          example: recovered
      type: object
    PostAbsenceCourseRequestBody:
      required:
        - dateStart
        - employmentId
        - employmentKey
        - recoveryPercentage
      properties:
        newDossier:
          description: 'Flag to indicate if a new dossier is expected to be created, will perform additional validations - if the absence course is within 28 days of a previous absence course a new dossier will not actually be created, instead the absence course will be added to the previous dossier and it will become a compiled dossier'
          type: boolean
          example: false
          nullable: true
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the absence-course. This key serves as an alternative to the 'id' field for referencing the absence-course."
          type: string
          maxLength: 191
          minLength: 0
          example: verzuimverloop-1001-01
          nullable: true
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        accidentType:
          $ref: '#/components/schemas/AccidentTypeEnumOptions'
        absenceReasonId:
          description: 'Set absence reason based on the unique identifier of the absence reason'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: c7f56e2a-7b9c-48d9-b9fa-a0c057e9df06
        absenceReasonCode:
          description: "Set absence reason based on the 'code' of the absence reason (code is user-configurable)"
          type: string
          maxLength: 191
          minLength: 0
          example: sick
        employmentId:
          description: "The unique identifier for the employment the absence is related to, exclusive with 'employmentKey'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 22ac850c-144e-4fda-8ccb-2e098116012d
        employmentKey:
          description: "The external key of the employment the absence is related to, exclusive with 'employmentId'"
          type: string
          maxLength: 191
          minLength: 0
          example: dvb-1001-1
        dateReported:
          description: "Date the absence was reported, if omitted defaults to 'now'"
          type: string
          format: date
          example: '2025-02-12'
        dateStart:
          description: 'The startdate of the absencecourse. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2025-02-10'
        wageValue:
          description: "Wage value ('loonwaarde') at the point in time the absence course is recorded"
          type: number
          format: double
        workedHours:
          description: 'Worked hours at the point in time the absence course is recorded'
          type: integer
          format: int32
        recoveryReason:
          $ref: '#/components/schemas/RecoveryReasonEnumOptions'
        dateEmploymentEnd:
          description: "End date of employment. If the employment's base type allows it can automatically end the employment, will be ignored in other cases"
          type: string
          format: date
          example: '2025-03-01'
        setDossierKey:
          description: 'If a new dossier is being created the external key for that dossier will be set to this value, ignored for existing or compiled dossiers'
          type: string
          maxLength: 191
          minLength: 0
          example: dos-1234
          nullable: true
        expectedDurationDays:
          description: 'Expected duration of the absence in days, purely informational'
          type: integer
          format: int32
          example: 5
        recoveryPercentage:
          description: 'Percentage of recovery, 0 being fully absent, 100 being fully recovered, required'
          type: integer
          format: int32
          maximum: 100
          minimum: 0
          example: 25
      type: object
    GetDossierDocumentTypeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierDocumentType'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetDossierNoteTypeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierNoteType'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetDossierUploadTypeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierUploadType'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetDossierContentDocumentResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierDocumentResource'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    PatchDossierDocumentRequestBody:
      properties:
        id:
          description: 'The identifier in an external system associated to the document'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          description: 'The external identifier for the document'
          type: string
          maxLength: 191
          minLength: 1
          example: exKey123
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the document. This key serves as an alternative to the 'id' field for referencing the document."
          type: string
          maxLength: 191
          minLength: 0
          example: exKey123
          nullable: true
        documentTypeId:
          description: 'The unique identifier of the document type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: 'The unique identifier of the dossier section'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: 'Whether the document is for both parties'
          type: boolean
          example: true
        inReview:
          description: 'Whether the document is in review'
          type: boolean
          example: false
        title:
          description: 'The title of the document'
          type: string
          maxLength: 191
          minLength: 1
          example: 'document title'
        content:
          description: 'The content of the document'
          type: string
          maxLength: 67108863
          minLength: 1
          example: 'Content of this document.'
        reviewByCompanyDoctor:
          description: 'Whether the document is reviewed by the company doctor. Required if inReview is true'
          type: boolean
          example: true
        dateCreated:
          description: 'The date the document was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2021-12-31 23:59:59'
      type: object
    PostDossierDocumentRequestBody:
      required:
        - dossierId
        - documentTypeId
        - dossierSectionId
        - forBothParties
        - title
        - content
      properties:
        dossierId:
          description: 'The Unique identifier of the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the document. This key serves as an alternative to the 'id' field for referencing the document."
          type: string
          maxLength: 191
          minLength: 0
          example: exKey123
          nullable: true
        documentTypeId:
          description: 'The unique identifier of the document type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: 'The unique identifier of the dossier section'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: 'Whether the document is for both parties'
          type: boolean
          example: true
        inReview:
          description: 'Whether the document is in review'
          type: boolean
          example: false
        title:
          description: 'The title of the document'
          type: string
          maxLength: 191
          minLength: 1
          example: 'document title'
        content:
          description: 'The content of the document'
          type: string
          maxLength: 67108863
          minLength: 1
          example: 'Content of this document.'
        dateCreated:
          description: 'The date the document was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2021-12-31 23:59:59'
      type: object
    GetDossierExternalResourceResourceResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierExternalResourceResource'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetDossierExternalResourceSortOptions:
      type: string
      enum:
        - name
        - '-name'
    PatchDossierExternalResourceRequestBody:
      properties:
        id:
          description: "The unique identifier of the external resource to be updated. Required if 'key' is not provided. Mutually exclusive with 'key'."
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        key:
          description: "The identifier of the external resource in an external system to be updated. Required if 'id' is not provided. Mutually exclusive with 'id'."
          type: string
          maxLength: 191
          minLength: 1
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the external resource. This key serves as an alternative to the 'id' field for referencing the external resource."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-RES-4830
          nullable: true
        priority:
          description: 'Priority position of the external resource, ordering is low to high'
          type: integer
        name:
          description: 'Name of the external resource'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Verzuimbeleid [intranet]'
        url:
          description: 'URL of the external resource'
          type: string
          format: uri
          maxLength: 191
          minLength: 1
          example: 'http://intranet.local/res/90dd731a-5e65-43f9-82df-bba234855918'
        icon:
          description: 'Icon of the external resource'
          type: string
          maxLength: 191
          minLength: 0
          example: fa-cloud
          nullable: true
      type: object
    PostDossierExternalResourceRequestBody:
      properties:
        priority:
          description: 'Priority position of the external resource'
          type: integer
          example: 10
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the external resource. This key serves as an alternative to the 'id' field for referencing the external resource."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-RES-349578
          nullable: true
        name:
          description: 'Name of the external resource'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Verzuimbeleid intranet'
        url:
          description: 'URL of the external resource'
          type: string
          format: uri
          maxLength: 191
          minLength: 1
          example: 'http://intranet.local/resource/90dd731a-5e65-43f9-82df-bba234855918'
        icon:
          description: 'Icon of the external resource'
          type: string
          maxLength: 191
          minLength: 1
          example: fa-cloud
        dossierId:
          description: 'The unique identifier of the dossier associated with the external resource'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 90dd731a-5e65-43f9-82df-bba234855918
      type: object
    GetDossierContentNoteResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierNoteResource'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    PatchDossierNoteRequestBody:
      properties:
        id:
          description: 'The unique identifier of the note to mutate'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          description: 'The external identifier for the note to mutate'
          type: string
          maxLength: 191
          minLength: 1
          example: Note@KeyXY
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the note. This key serves as an alternative to the 'id' field for referencing the note."
          type: string
          maxLength: 191
          minLength: 0
          example: Note@KeyXY
          nullable: true
        noteTypeId:
          description: 'The unique identifier of the note type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: 'The unique identifier of the dossier section'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        taskId:
          description: 'The unique identifier of the task where the note is associated with'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        isConcept:
          description: 'Whether the note is a concept'
          type: boolean
          example: true
        forBothParties:
          description: 'Whether the note is for both parties'
          type: boolean
          example: true
        medicalOnly:
          description: 'Whether the note is only visible for medical users'
          type: boolean
          example: false
        title:
          description: 'The title of the note'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Note title'
        content:
          description: 'The content of the note'
          type: string
          maxLength: 67108863
          minLength: 1
          example: 'Content of this note.'
        dateCreated:
          description: 'The date and time the note was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2021-12-31 23:59:59'
      type: object
    PostDossierNoteRequestBody:
      required:
        - dossierId
        - noteTypeId
        - dossierSectionId
        - forBothParties
        - medicalOnly
        - title
        - content
      properties:
        dossierId:
          description: 'The unique identifier of the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the note. This key serves as an alternative to the 'id' field for referencing the note."
          type: string
          maxLength: 191
          minLength: 0
          example: exKey123
          nullable: true
        noteTypeId:
          description: 'The unique identifier of the note type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: 'The unique identifier of the dossier section'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        taskId:
          description: 'The unique identifier of the task where the note is associated to'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        isConcept:
          description: 'Whether the note is a concept'
          type: boolean
          example: true
        forBothParties:
          description: 'Whether the note is for both parties'
          type: boolean
          example: true
        medicalOnly:
          description: 'Whether the note is for medical users only'
          type: boolean
          example: false
        title:
          description: 'The title of the note'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Note title'
        content:
          description: 'The content of the note'
          type: string
          maxLength: 67108863
          minLength: 1
          example: 'Content of this note.'
        dateCreated:
          description: 'The date the note was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2021-12-31 23:59:59'
      type: object
    GetDossierContentUploadResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierUploadResource'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    PatchDossierUploadRequestBody:
      properties:
        id:
          description: 'The unique identifier of the upload'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          description: 'Current external identifier for the upload'
          type: string
          maxLength: 191
          minLength: 1
          example: exKey123
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the upload. This key serves as an alternative to the 'id' field for referencing the upload."
          type: string
          maxLength: 191
          minLength: 0
          example: exKey123
          nullable: true
        uploadTypeId:
          description: 'The unique identifier of the upload type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: 'The unique identifier of the dossier section'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: 'Whether the upload is for both parties'
          type: boolean
          example: true
        title:
          description: 'The title of the upload'
          type: string
          maxLength: 191
          minLength: 1
          example: 'upload title'
        note:
          description: 'An optional note or comment attached to the upload, offering additional context or details regarding the file.'
          type: string
          maxLength: 65535
          minLength: 0
          example: 'Content of this upload.'
          nullable: true
        dateCreated:
          description: 'The date the upload was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2021-12-31 23:59:59'
      type: object
    PostDossierUploadRequestBody:
      required:
        - dossierId
        - uploadTypeId
        - dossierSectionId
        - forBothParties
        - title
        - file
      properties:
        dossierId:
          description: 'The unique identifier of the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the upload. This key serves as an alternative to the 'id' field for referencing the upload."
          type: string
          maxLength: 191
          minLength: 0
          example: exKey123
          nullable: true
        uploadTypeId:
          description: 'The unique identifier of the upload type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: 'The unique identifier of the dossier section'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: 'Whether the upload is for both parties'
          type: boolean
          example: true
        title:
          description: 'The title of the upload'
          type: string
          maxLength: 191
          minLength: 1
          example: 'upload title'
        note:
          description: 'An optional note or comment attached to the upload, offering additional context or details regarding the file.'
          type: string
          maxLength: 65535
          minLength: 0
          example: 'Note of this upload.'
          nullable: true
        file:
          description: 'Base64-encoded file content'
          type: string
          format: byte
          example: JVBERi0xLjcNCiW1tbW1DQoxIDAgb2JqDQo8PC9UeXBlL5jZXMgODg1IDAgUj4=
        dateCreated:
          description: 'The date the upload was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2021-12-31 23:59:59'
      type: object
    GetDossierTaskResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierTask'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetDossierTaskSortOptions:
      type: string
      enum:
        - code
        - '-code'
        - name
        - '-name'
        - dateStart
        - '-dateStart'
    GetDossierTaskIncludeOptions:
      type: string
      enum:
        - dossier
        - dossier.employment
        - dossier.employment.employee
        - dossier.employment.employee.employerPerson
        - baseTask
    DossierTaskResource:
      title: 'Dossier Task Resource'
      description: 'Representation of a dossier task with properties required for updating.'
      properties:
        id:
          description: 'The unique identifier of the dossier task to be updated.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier-task. This key serves as an alternative to the 'id' field for referencing the dossier-task."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT12345
          nullable: true
        migrationKey:
          description: 'A key used for identifying the task during migration processes.'
          type: string
          maxLength: 191
          minLength: 0
          example: MIG2024
          nullable: true
        dossierId:
          description: 'The unique identifier of the dossier associated with the task.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        absenceCourseId:
          description: 'The unique identifier for the course related to absences within the dossier task.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        taskId:
          description: 'The unique identifier of the task within the dossier.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        taskStatus:
          oneOf:
            -
              $ref: '#/components/schemas/TaskStatusEnumOptions'
          nullable: true
          description: 'Current status of the task.'
          example: open
        title:
          description: 'Title or short description of the task.'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Review Document'
          nullable: true
        content:
          description: 'Detailed content or description of the task.'
          type: string
          maxLength: 65535
          minLength: 0
          example: 'Review the attached document for any errors.'
          nullable: true
        isPostponed:
          description: 'Indication that the task is postponed by a user.'
          type: boolean
          example: false
          nullable: true
        userId:
          description: 'The unique identifier of the user responsible for the task.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        dateStart:
          description: 'Scheduled start date of the task in format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-11-12 09:00:00'
          nullable: true
        dateCompleted:
          description: 'The date and time when the task was marked as completed.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-11-15 17:00:00'
          nullable: true
        dateEnd:
          description: 'The date and time by which the task should be completed.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-11-16 17:00:00'
          nullable: true
      type: object
    PostDossierTaskRequestBody:
      description: 'Dossier Task data'
      required:
        - dossierId
        - taskId
        - taskStatusId
        - title
        - isPostponed
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier-task. This key serves as an alternative to the 'id' field for referencing the dossier-task."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-KEY-345897
          nullable: true
        migrationKey:
          description: 'A key used for identifying the task during migration processes.'
          type: string
          maxLength: 191
          minLength: 0
          example: MIG-KEY-345
          nullable: true
        dossierId:
          description: 'The unique identifier of the dossier where the task should be associated with'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        absenceCourseId:
          description: 'The unique identifier of the absence course associated with the dossier task'
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        taskId:
          description: 'The unique identifier of the associated base task of the dossier-task'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: false
        taskStatus:
          $ref: '#/components/schemas/TaskStatusEnumOptions'
        title:
          description: 'The title of the task'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Opstellen Plan van Aanpak'
          nullable: false
        content:
          description: 'The description of the task'
          type: string
          maxLength: 65535
          minLength: 0
          example: 'Werknemers en werkgevers maken samen het Plan van aanpak. Hierin staan afspraken over wat de werknemer gaat doen om weer aan het werk te kunnen gaan. En welke hulp daarbij nodig is.'
          nullable: true
        isPostponed:
          description: 'Indicate whether the task is postponed by a user'
          type: boolean
          nullable: false
        dateCompleted:
          description: 'The date and time that the task is marked as completed'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          nullable: true
        dateStart:
          description: 'The date when the task is scheduled to start.'
          type: string
          format: date
          nullable: true
        dateEnd:
          description: 'The date when the task is scheduled to be completed'
          type: string
          format: date
          nullable: true
        userId:
          description: 'The unique identifier of the user responsible for the task.'
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
      type: object
    GetPregnancyDossierResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PregnancyDossier'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetDossierSortOptions:
      type: string
      enum:
        - dateStart
        - '-dateStart'
        - externalKey
        - '-externalKey'
        - dateUpdated
        - '-dateUpdated'
    GetIllnessDossierIncludeOptions:
      type: string
      enum:
        - absenceCourses
        - employment
        - nursingAddress
    GetDossierIncludeOptions:
      type: string
      enum:
        - employment
    GetDossierSectionResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierSection'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetReturnToWorkAdviceResponse:
      properties:
        data:
          $ref: '#/components/schemas/ReturnToWorkAdvice'
      type: object
    PatchBasicRequestBody:
      properties:
        id:
          description: 'The id for the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 1
          example: EXT-DOS-458
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateReported:
          description: 'Date the dossier was reported in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateCompleted:
          description: 'The date the dossier completed in format YYYY-MM-DD, this property is prohibited unless dossierStatus is set to completed'
          type: string
          format: date
          example: '2020-01-23'
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        employmentId:
          description: 'The unique identifier of the employment. Only one employment identifier is allowed.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: e3eab6bd-4adc-4d9b-9620-2b0c49ecb7d3
        employmentKey:
          description: 'The external key of the employment. Only one employment identifier is allowed.'
          type: string
          maxLength: 191
          minLength: 1
          example: EXT-Key-4385
      type: object
    DossierClosureReasonEnumOptions:
      type: string
      enum:
        - completed
        - cancelled
        - outdated
    PatchBirthLeaveDossierRequestBody:
      required:
        - id
      properties:
        id:
          description: 'The unique identifier of the dossier to be updated'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 3f8a90e8-ab71-4ef4-bcdf-a1ef5b71ab62
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          example: EXT-KEY-DOS123
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "Date the dossier was reported, if omitted defaults to 'now'"
          type: string
          format: date
          example: '2021-12-23'
        dateStart:
          description: 'The date the dossier started'
          type: string
          format: date
          example: '2021-12-23'
        employmentId:
          description: "The unique identifier of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 391b510c-1899-443b-9b72-5883ccebad1e
        employmentKey:
          description: "The key of the employment, required if 'employmentId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DVB-354
          nullable: true
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        dossierOfficerId:
          description: "The id of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 65eb91e5-4e61-4144-91ea-f60af3a08a78
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          example: ArboUser-234
          nullable: true
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        dossierClosureReason:
          $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
        contractId:
          description: 'The unique identifier of the contract'
          type: string
          format: uuid
        expectedDurationDays:
          description: 'The expected duration of the dossier in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
        beneficiary:
          $ref: '#/components/schemas/BirthLeaveBeneficiaryEnumOptions'
        dateOfBirthExpected:
          description: 'The expected birthdate of the child in format YYYY-MM-DD'
          type: string
          format: date
        dateStartActual:
          description: 'The actual start date of the requested leave in format YYYY-MM-DD'
          type: string
          format: date
        weeks:
          description: 'The number of weeks of leave'
          type: integer
          maximum: 9
          minimum: 1
          example: 8
      type: object
    PatchIllnessRequestBody:
      required:
        - id
      properties:
        id:
          description: 'The unique identifier of the dossier to update'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "The date the dossier was reported in format YYYY-MM-DD, if omitted defaults to 'now'"
          type: string
          format: date
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
        employmentId:
          description: "The unique identifier of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        employmentKey:
          description: "The key of the employment, required if 'employmentId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        dossierOfficerId:
          description: "The unique identifier of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        dossierClosureReason:
          $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
        contractId:
          description: 'The unique identifier of the contract.'
          type: string
          format: uuid
        expectedDurationDays:
          description: 'The expected duration of the dossier in days (informative)'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
      type: object
    PatchMedicalPreventiveDossierRequestBody:
      properties:
        id:
          description: 'The unique identifier of the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DOS-546
          nullable: true
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: 'The unique identifier of the employment associated with the medical preventive dossier.'
          type: string
          format: uuid
          example: 64fd4be3-6cd8-4dae-a265-ab2453896b75
        employmentKey:
          description: 'The key of the employment associated with the medical preventive dossier.'
          type: string
          example: EXT-DVB-6468
      type: object
    PatchPaidParentalLeaveDossierRequestBody:
      required:
        - id
      properties:
        id:
          description: 'The unique identifier of the dossier to be updated'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        dossierStatus:
          oneOf:
            -
              $ref: '#/components/schemas/DossierStatusEnumOptions'
          nullable: true
          description: "The status of the dossier, if omitted defaults to 'open', unless 'dateCompleted' is set  in the past, then it defaults to 'completed'"
        dateReported:
          description: "Date the dossier was reported, if omitted defaults to 'now'"
          type: string
          format: date
          nullable: true
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
        employmentId:
          description: "The unique identifier of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
        employmentKey:
          description: "The external key of the employment, required if 'employmentId' is omitted"
          type: string
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        dossierOfficerId:
          description: "The unique identifier of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        dossierClosureReason:
          $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
        contractId:
          description: 'The unique identifier of the contract'
          type: string
          format: uuid
        expectedDurationDays:
          description: 'The expected duration of the dossier in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
        paidParentalLeaveType:
          $ref: '#/components/schemas/PaidParentalLeaveTypeEnumOptions'
        dateOfBirth:
          description: 'The date of birth of the child in format YYYY-MM-DD'
          type: string
          format: date
        children:
          description: 'The number of children associated to this leave'
          type: integer
        dateAdmission:
          description: 'The date of admission in format YYYY-MM-DD'
          type: string
          format: date
      type: object
    RequestedLeavePeriodEnumOptions:
      description: "The requested leave period in weeks, this will calculate and fill the 'expectedDurationDays' property."
      type: integer
      enum:
        - 4
        - 5
        - 6
        - 8
        - 9
        - 10
    PatchPregnancyDossierRequestBody:
      properties:
        dateOfBirthExpected:
          description: 'The expected birthdate of the child'
          type: string
          format: date
        dateOfActualBirth:
          description: 'The actual birthdate of the child'
          type: string
          format: date
        dateActualLeave:
          description: 'The actual start date of the requested leave'
          type: string
          format: date
        dateExpectedLeave:
          description: 'The expected start date of the requested leave'
          type: string
          format: date
        dateFirstWorkingDay:
          description: 'The first working day after the leave period'
          type: string
          format: date
        dateActualFirstWorkingDay:
          description: 'The actual first working day after the leave period'
          type: string
          format: date
        expectsMultiples:
          description: 'Indicates if the pregnancy is expected to be multiple births'
          type: boolean
        hospitalizationChild:
          description: 'Indicates if the child was hospitalized'
          type: boolean
        flexibleLeave:
          description: 'Flag to indicate if the leave is flexible'
          type: boolean
        requestedLeavePeriod:
          $ref: '#/components/schemas/RequestedLeavePeriodEnumOptions'
        dateStartActual:
          description: 'The actual start date of the requested leave'
          type: string
          format: date
      type: object
    PatchPreventiveDossierRequestBody:
      properties:
        id:
          description: 'The unique identifier of the dossier to be updated'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        dateReported:
          description: 'The date the dossier was reported in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: 'The unique identifier of the employment'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 4907e15a-112b-431d-9592-5f4868892e75
        employmentKey:
          description: 'The key of the employment'
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DVB-438957
          nullable: true
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
      type: object
    PatchSpoor2RequestBody:
      required:
        - id
      properties:
        id:
          description: 'The unique identifier of the dossier to be updated'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 5aee6f57-343d-46a9-9555-0973f0310b05
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DOS-123
          nullable: true
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "Date the dossier was reported in format YYYY-MM-DD, if omitted defaults to 'now'"
          type: string
          format: date
          example: '2020-01-23'
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
        employmentId:
          description: "The unique identifier of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: d76c5058-c84f-41b5-8c2a-3380f8a6a490
        employmentKey:
          description: "The key of the employment, required if 'employmentId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DVB-348957
          nullable: true
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
          maxLength: 191
          minLength: 0
          example: dosnr-2345
          nullable: true
        dossierOfficerId:
          description: "The unique identifier of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: b7b8adf3-d46b-4e02-aa96-490af4cce097
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          example: arbo-user-348
          nullable: true
        safetyNet:
          oneOf:
            -
              $ref: '#/components/schemas/SafetyNetEnumOptions'
          nullable: true
          description: 'If applicable, the type of safety net (vangnet) that applies to this dossier'
        dossierClosureReason:
          oneOf:
            -
              $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
          nullable: true
          description: 'The reason the dossier was closed'
          example: completed
        contractId:
          description: 'The unique identifier of the contract'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 06cbdad1-3501-4587-9cc5-b643b0aa62c2
        expectedDurationDays:
          description: 'The expected duration of the dossier in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        traject:
          $ref: '#/components/schemas/Spoor2TrajectEnumOptions'
      type: object
    PatchWGADossierRequestBody:
      properties:
        id:
          description: 'The id for the dossier'
          type: string
          format: uuid
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "Date the absence was reported, if omitted defaults to 'now'"
          type: string
          format: date
        dateStart:
          description: 'The date the dossier started'
          type: string
          format: date
        employmentId:
          description: "The id of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
        employmentKey:
          description: "The key of the employment, required if 'employmentId' is omitted"
          type: string
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
        dossierOfficerId:
          description: "The id of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        dossierClosureReason:
          $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
        contractId:
          description: 'The id of the contract'
          type: string
          format: uuid
        expectedDurationDays:
          description: 'The expected duration of the absence in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed'
          type: string
          format: date
      type: object
    PatchZwerdDossierRequestBody:
      properties:
        id:
          description: 'The unique identifier of the dossier to be updated'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: ext-dos-1234
          nullable: true
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: 'The unique identifier of the employment'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 0df61c83-63e3-44d9-8a0d-ca76b6d78d78
        employmentKey:
          description: 'The key of the employment'
          type: string
          maxLength: 191
          minLength: 0
          example: DVB-4857
          nullable: true
        payrollNumber:
          description: 'The payroll number of the employee'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        daySalary:
          description: 'The daily salary of the employee'
          type: number
          format: float
        dateEmploymentEnd:
          description: "The date the employee's employment was completed in format YYYY-MM-DD"
          type: string
          format: date
      type: object
    PostBasicDossierResponseBody:
      allOf:
        -
          $ref: '#/components/schemas/PublicApiPostResponse'
        -
          properties:
            data:
              $ref: '#/components/schemas/DossierWithoutRelations'
          type: object
    PostBasicDossierRequestBody:
      required:
        - dateStart
        - dossierStatus
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 1
          example: EXT-DOS-458
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateReported:
          description: "Date the dossier was reported in format YYYY-MM-DD, if omitted defaults to 'now'"
          type: string
          format: date
          example: '2020-01-23'
        dateCompleted:
          description: 'The date the dossier completed in format YYYY-MM-DD, this property is prohibited unless dossierStatus is set to completed'
          type: string
          format: date
          example: '2020-01-23'
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        employmentId:
          description: 'The unique identifier of the employment, this property is required unless `employmentKey` is used. Only one employment identifier is allowed.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: e3eab6bd-4adc-4d9b-9620-2b0c49ecb7d3
        employmentKey:
          description: 'The external key of the employment, this property is required unless `employmentId` is used. Only one employment identifier is allowed.'
          type: string
          maxLength: 191
          minLength: 1
          example: EXT-Key-4385
      type: object
    PostBirthLeaveRequestBody:
      required:
        - beneficiary
        - dateOfBirthExpected
        - weeks
        - dateStart
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "Date the absence was reported, if omitted defaults to 'now'"
          type: string
          format: date
          example: '2025-01-23'
        dateStart:
          description: 'The date the dossier started'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: "The unique identifier of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        employmentKey:
          description: "The key of the employment, required if 'employmentId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
        dossierOfficerId:
          description: "The unqiue identifier of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        dossierClosureReason:
          $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
        contractId:
          description: 'The unique identifier of the contract'
          type: string
          format: uuid
        expectedDurationDays:
          description: 'The expected duration of the absence in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed'
          type: string
          format: date
        beneficiary:
          $ref: '#/components/schemas/BirthLeaveBeneficiaryEnumOptions'
        dateOfBirthExpected:
          description: 'The expected birthdate of the child'
          type: string
          format: date
        dateStartActual:
          description: 'The actual start date of the requested leave'
          type: string
          format: date
        weeks:
          description: 'The number of weeks of leave'
          type: integer
          maximum: 9
          minimum: 1
          example: 8
      type: object
    PostCompanyDossierRequestBody:
      required:
        - organinzationalUnitId
        - dateStart
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
        dateStart:
          description: 'The date the dossier started'
          type: string
          format: date
        organinzationalUnitId:
          description: "The id of the organizational unit, required if 'employmentKey' is omitted"
          type: string
          format: uuid
      type: object
    PostMedicalPreventiveDossierRequestBody:
      required:
        - dateStart
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DOS-123
          nullable: true
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: 'The unique identifier of the employment associated with the medical preventive dossier.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: f17b5868-0dc7-4221-9ec9-daaea69663c4
        employmentKey:
          description: 'The key of the employment associated with the medical preventive dossier.'
          type: string
          example: EXT-DVB-3215
      type: object
    PostPaidParentalLeaveRequestBody:
      required:
        - dateOfBirth
        - dateFirstLeave
        - paidParentalLeaveType
        - weeks
        - dateStart
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EX-KEY-1234
          nullable: true
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "Date the paid parental leave dossier was reported in format YYYY-MM-DD, if omitted defaults to 'now'"
          type: string
          format: date
          example: '2020-01-23'
        dateStart:
          description: 'The date the Paid parental leave dossier is started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2025-12-23'
        employmentId:
          description: "The unique identifier of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 050baab3-61e1-4edc-b5ac-656989f8cac5
        employmentKey:
          description: "The external key of the employment, required if 'employmentId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-KEY-312
          nullable: true
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
          maxLength: 191
          minLength: 0
          example: '123'
          nullable: true
        dossierOfficerId:
          description: "The unique identifier of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
        dossierOfficerKey:
          description: "The external key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
          nullable: true
        safetyNet:
          oneOf:
            -
              $ref: '#/components/schemas/SafetyNetEnumOptions'
          nullable: true
          description: 'If applicable, the type of safety net (vangnet) that applies to this absence'
        dossierClosureReason:
          $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
        contractId:
          description: 'The unique identifier of the contract'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 88a500c7-5095-44b8-a58f-4af561ba1d72
          nullable: true
        expectedDurationDays:
          description: 'The expected duration of the absence in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
        paidParentalLeaveType:
          $ref: '#/components/schemas/PaidParentalLeaveTypeEnumOptions'
        dateOfBirth:
          description: 'The date of birth of the child in format YYYY-MM-DD'
          type: string
          format: date
        dateFirstLeave:
          description: 'The start date of the requested leave in format YYYY-MM-DD'
          type: string
          format: date
        dateAdmission:
          description: 'The date of admission in format YYYY-MM-DD'
          type: string
          format: date
        weeks:
          description: 'The number of weeks of leave. Maximum of 9 weeks'
          type: integer
          maximum: 9
          minimum: 0
          example: 8
        children:
          description: 'The number of children the leave applies to'
          type: integer
          example: 1
      type: object
    PostPregnancyDossierRequestBody:
      required:
        - dateStart
        - employmentId
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
        dateStart:
          description: 'The date the dossier started'
          type: string
          format: date
        employmentId:
          description: 'The id of the employment'
          type: string
          format: uuid
        employmentKey:
          description: 'The key of the employment'
          type: string
        dateOfBirthExpected:
          description: 'The expected date of birth'
          type: string
          format: date
        dateOfActualBirth:
          description: 'The actual date of birth'
          type: string
          format: date
        dateActualLeave:
          description: 'The actual start date of birth leave'
          type: string
          format: date
        dateExpectedLeave:
          description: 'The expected leave date'
          type: string
          format: date
        dateFirstWorkingDay:
          description: 'The first working day'
          type: string
          format: date
        dateActualFirstWorkingDay:
          description: 'The actual first working day'
          type: string
          format: date
        expectsMultiples:
          description: 'Flag to indicate if multiple babies are expected'
          type: boolean
        hospitalizationChild:
          description: 'Flag to indicate if the child had to be Hospitalized'
          type: boolean
        flexibleLeave:
          description: 'Flag to indicate if the leave is flexible'
          type: boolean
          nullable: true
        dateReported:
          description: 'The report date'
          type: string
          format: date
        dateCompleted:
          description: 'The date the dossier was completed'
          type: string
          format: date
        requestedLeavePeriod:
          $ref: '#/components/schemas/RequestedLeavePeriodEnumOptions'
      type: object
    PostPreventiveDossierRequestBody:
      required:
        - dateStart
        - dateReported
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: 9eaf406e-5d5c-4321-a501-bcce0ec2e3a8
          nullable: true
        dateReported:
          description: 'The date the dossier was reported in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: 'The unique identifier of the employment'
          type: string
          format: uuid
          example: f9b1f280-fbee-4e04-ab44-9de8e2a1a099
        employmentKey:
          description: 'The key of the employment'
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DVB-34
          nullable: true
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
      type: object
    PostSpoor2RequestBody:
      required:
        - dateStart
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-Key-3495
          nullable: true
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "Date the absence was reported in format YYYY-MM-DD, if omitted defaults to 'now'"
          type: string
          format: date
          example: '2020-01-23'
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: "The unique identifier of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: f1c00550-dd23-4d0a-b4df-a859aae28f3b
        employmentKey:
          description: "The key of the employment, required if 'employmentId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DVB-349587
          nullable: true
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
          maxLength: 191
          minLength: 0
          example: dos-123
          nullable: true
        dossierOfficerId:
          description: "The unique identifier of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: bbfdb4f9-cb33-4eb2-89b6-cb34cada755f
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
          maxLength: 191
          minLength: 0
          example: ARBO-USR-3485
          nullable: true
        safetyNet:
          oneOf:
            -
              $ref: '#/components/schemas/SafetyNetEnumOptions'
          nullable: true
          description: 'If applicable, the type of safety net (vangnet) that applies to this absence'
        dossierClosureReason:
          oneOf:
            -
              $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
          nullable: true
          description: 'The reason the dossier was closed'
          example: completed
        contractId:
          description: 'The unique identifier of the contract'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 9413a090-0ca1-410e-a044-799d86873fd1
        expectedDurationDays:
          description: 'The expected duration of the absence in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        traject:
          $ref: '#/components/schemas/Spoor2TrajectEnumOptions'
      type: object
    PostWGADossierRequestBody:
      required:
        - dateStart
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        dateReported:
          description: "Date the absence was reported, if omitted defaults to 'now'"
          type: string
          format: date
        dateStart:
          description: 'The date the dossier started'
          type: string
          format: date
        employmentId:
          description: "The id of the employment, required if 'employmentKey' is omitted"
          type: string
          format: uuid
        employmentKey:
          description: "The key of the employment, required if 'employmentId' is omitted"
          type: string
        dossierNumber:
          description: 'The dossier number, defaults to 0'
          type: string
        dossierOfficerId:
          description: "The id of the dossier officer, required if 'dossierOfficerKey' is omitted"
          type: string
          format: uuid
        dossierOfficerKey:
          description: "The key of the dossier officer, required if 'dossierOfficerId' is omitted"
          type: string
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        dossierClosureReason:
          $ref: '#/components/schemas/DossierClosureReasonEnumOptions'
        contractId:
          description: 'The id of the contract'
          type: string
          format: uuid
        expectedDurationDays:
          description: 'The expected duration of the absence in days'
          type: integer
        dateCompleted:
          description: 'The date the dossier was completed'
          type: string
          format: date
      type: object
    PostZwerdDossierRequestBody:
      required:
        - dateStart
        - dateEmploymentEnd
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DOS-458
          nullable: true
        dateStart:
          description: 'The date the dossier started in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        employmentId:
          description: 'The unique identifier of the employment'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: e3eab6bd-4adc-4d9b-9620-2b0c49ecb7d3
        employmentKey:
          description: 'The key of the employment'
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-Key-4385
          nullable: true
        payrollNumber:
          description: 'The payroll number of the employee'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        daySalary:
          description: 'The daily salary of the employee'
          type: number
          format: float
          nullable: true
        dateEmploymentEnd:
          description: "The date the employee's employment was completed in format YYYY-MM-DD"
          type: string
          format: date
      type: object
    RecoveryReasonEnumOptions:
      type: string
      enum:
        - recovered
        - ill-out-of-service
        - passed-away
        - partial-recovery
        - fully-sick-again
    AbsenceCourse:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/AbsenceCourseWithoutRelations'
        -
          properties:
            employeeExternalKey:
              description: 'External key of the associated employee'
              type: string
              maxLength: 191
              minLength: 0
              example: PNR1001
              nullable: true
            employmentExternalKey:
              description: 'External key of the associated employment'
              type: string
              maxLength: 191
              minLength: 0
              example: DVB-1234/01-01
              nullable: true
            employmentId:
              description: 'The unique identifier of the associated employment'
              type: string
              format: uuid
              maxLength: 36
              minLength: 36
              example: b6387abe-6507-4e99-b21d-8142dfcaaeb5
              nullable: true
            absenceReason:
              oneOf:
                -
                  $ref: '#/components/schemas/AbsenceReason'
              nullable: true
              description: 'The absence reason associated with the absence course, available if the relation is included in the query'
            dossier:
              oneOf:
                -
                  $ref: '#/components/schemas/Dossier'
              nullable: true
              description: 'The dossier associated with the absence course, available if the relation is included in the query'
          type: object
    AbsenceCourseWithoutRelations:
      properties:
        id:
          description: 'The unique identifier of the absence course'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 8f22b22b-c174-4ba9-abdf-e5fb52c14a6c
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the absence-course. This key serves as an alternative to the 'id' field for referencing the absence-course."
          type: string
          maxLength: 191
          minLength: 0
          example: verzuimverloop-132.04
          nullable: true
        dateReported:
          description: 'The reporting date of the absence-course in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-02-12'
        dateStart:
          description: 'The start date of the absence-course in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-02-10'
        dateEnd:
          description: 'The end date of the absence-course in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-02-12'
        recoveryPercentage:
          description: 'Percentage of recovery'
          type: number
          format: float
          maximum: 100
          minimum: 0
          example: 25
        recoveryReason:
          oneOf:
            -
              $ref: '#/components/schemas/RecoveryReasonEnumOptions'
          nullable: true
          description: 'The recovery reason associated with the absence course'
          example: recovered
        wageValue:
          description: "The wage value ('loonwaarde') related to this absence-course"
          type: number
          format: float
        workedHours:
          description: 'The hours that have been worked on the first date of the absence-course.'
          type: number
          format: float
          example: 2
        safetyNet:
          oneOf:
            -
              $ref: '#/components/schemas/SafetyNetEnumOptions'
          nullable: true
          description: 'Specifies the applicable safety net (vangnet) category'
          example: unknown
        dateCreated:
          description: 'The date and time the absence course was created in YYYY-MM-DD HH:MM:SS format'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2025-02-10 12:34:56'
        dateUpdated:
          description: 'The date and time the absence course was last updated in YYYY-MM-DD HH:MM:SS format'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2025-02-12 12:34:56'
      type: object
    BirthLeaveDossier:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            birthLeave:
              $ref: '#/components/schemas/BirthLeave'
          type: object
    BirthLeaveBeneficiaryEnumOptions:
      type: string
      enum:
        - employee
        - employer
    BirthLeave:
      properties:
        id:
          description: 'The unique identifier of the birth leave dossier.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 08ae0679-5eba-4c62-b61c-d59a1acebb27
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-KEY-321
          nullable: true
        beneficiary:
          $ref: '#/components/schemas/BirthLeaveBeneficiaryEnumOptions'
        dateOfBirthExpected:
          description: 'The expected birthdate of the child in format YYYY-MM-DD'
          type: string
          format: date
        dateStartActual:
          description: 'The actual start date of the requested leave in format YYYY-MM-DD'
          type: string
          format: date
        weeks:
          description: 'The number of weeks of leave'
          type: integer
      type: object
    DossierAddress:
      properties:
        id:
          description: 'A unique identifier for the DossierAddress, used to distinctly refer to the address entry within the system.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: a1b2c3d4-5678-9012-3456-7890abcdef12
        street:
          description: 'The street name and any additional location details such as apartment or suite numbers'
          type: string
          maxLength: 191
          minLength: 0
          example: Dorpstraat
          nullable: true
        number:
          description: 'The house or building number, often including additional identifiers.'
          type: string
          maxLength: 191
          minLength: 0
          example: 123A
          nullable: true
        city:
          description: 'The name of the city where the address is located.'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Het Dorp'
          nullable: true
        postalCode:
          description: 'The postal or ZIP code associated with the location.'
          type: string
          maxLength: 191
          minLength: 0
          example: 1234AB
          nullable: true
        country:
          description: 'The country code of the address in ISO3166-alpha-2 format.'
          type: string
          maxLength: 2
          minLength: 2
          pattern: '([A-Z]{2})'
          example: NL
          nullable: true
      type: object
    DossierDocumentResource:
      properties:
        id:
          description: 'The unqiue identifier of the Dossier.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the document. This key serves as an alternative to the 'id' field for referencing the document."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        title:
          description: 'The title of the Dossier Document.'
          type: string
          maxLength: 191
          minLength: 1
        content:
          description: 'The content of the Dossier Document.'
          type: string
          maxLength: 67108863
          minLength: 1
        isConcept:
          description: 'Whether the Dossier Document is a concept.'
          type: boolean
        inReview:
          description: 'Whether the Dossier Document is in review.'
          type: boolean
        forBothParties:
          description: 'Whether the Dossier Document is for both parties.'
          type: boolean
        dateCreated:
          description: 'The date and time the Dossier Document was created.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date and time the Dossier Document was last updated.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dossier:
          oneOf:
            -
              $ref: '#/components/schemas/Dossier'
          nullable: true
          description: 'The dossier associated with the document.'
        documentType:
          oneOf:
            -
              $ref: '#/components/schemas/DossierDocumentType'
          nullable: true
          description: 'The document type associated with the document.'
        dossierSection:
          oneOf:
            -
              $ref: '#/components/schemas/DossierSection'
          nullable: true
          description: 'The dossier section associated with the document.'
      type: object
    DossierDocumentType:
      properties:
        id:
          description: 'The unique identifier of the document type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the document-type. This key serves as an alternative to the 'id' field for referencing the document-type."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the document type'
          type: string
          maxLength: 191
          minLength: 0
        name:
          description: 'Name of the document type'
          type: string
          maxLength: 191
          minLength: 1
        code:
          description: 'Code of the document type'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        communicateWithEmployee:
          description: 'Indication if the documents needs to be shared with the employee'
          type: boolean
        reviewable:
          description: 'Indication if the documents are reviewable'
          type: boolean
        isMedical:
          description: 'Indication if the document are available in medical'
          type: boolean
        isAbsence:
          description: 'Indication if the document are available in absence dossier'
          type: boolean
        isHr:
          description: 'Indication if the document are available in HR'
          type: boolean
        feedbackToDossier:
          description: "Indication if the document are available as 'feedback to dossier' (terugkoppeling in dossier)"
          type: boolean
        forceDiagnose:
          description: 'Force diagnose'
          type: boolean
        feedbackDocumentTypeId:
          description: 'The unique identifier of the feedback document'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        dateCreated:
          description: 'Date and time the document type was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'Date the document type was last updated in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    DossierNoteResource:
      properties:
        id:
          description: 'The unique identifier of the Dossier Note.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the note. This key serves as an alternative to the 'id' field for referencing the note."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        title:
          description: 'The title of the Dossier Note.'
          type: string
          maxLength: 191
          minLength: 1
        content:
          description: 'The content of the Dossier Note.'
          type: string
          maxLength: 67108863
          minLength: 1
        forBothParties:
          description: 'Whether the Dossier Note is for both parties.'
          type: boolean
        medicalOnly:
          description: 'Whether the Dossier Note is medical only.'
          type: boolean
        isConcept:
          description: 'Whether the Dossier Note is a concept.'
          type: boolean
        dateCreated:
          description: 'The date and time the Dossier Note was created in our system.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date and time the Dossier Note was updated in our system.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dossier:
          oneOf:
            -
              $ref: '#/components/schemas/Dossier'
          nullable: true
          description: 'The dossier associated with the document.'
        noteType:
          oneOf:
            -
              $ref: '#/components/schemas/DossierNoteType'
          nullable: true
          description: 'The note type associated with the document.'
        dossierSection:
          oneOf:
            -
              $ref: '#/components/schemas/DossierSection'
          nullable: true
          description: 'The dossier section associated with the document.'
      type: object
    DossierNoteType:
      properties:
        id:
          description: 'The unique identifier of the Note type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the note-type. This key serves as an alternative to the 'id' field for referencing the note-type."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the note type'
          type: string
          maxLength: 191
          minLength: 0
        name:
          description: 'Name of the note type'
          type: string
          maxLength: 191
          minLength: 1
        code:
          description: 'Code of the note type'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        isMedical:
          description: 'Indicates if the note type is available in medical'
          type: boolean
        isMedicalConfidential:
          description: 'Indicates if the note type is medical confidential'
          type: boolean
        isAbsence:
          description: 'Indicates if the note type is available in an absence dossier'
          type: boolean
        isHr:
          description: 'Indicates if the note type is available in HR'
          type: boolean
        dateCreated:
          description: 'Date and time the note type was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'Date and time the note type was last updated in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    DossierUploadResource:
      properties:
        id:
          description: 'The unique identifier of the Dossier.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the upload. This key serves as an alternative to the 'id' field for referencing the upload."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        title:
          description: 'The title of the Dossier Upload.'
          type: string
          maxLength: 191
          minLength: 1
        note:
          description: 'An optional note or comment attached to the upload, offering additional context or details regarding the file'
          type: string
          maxLength: 65535
          minLength: 0
          nullable: true
        forBothParties:
          description: 'Whether the Dossier Upload is for both parties.'
          type: boolean
        communicateWithEmployee:
          description: 'Whether the Dossier Upload is communicated with employees.'
          type: boolean
        dateCreated:
          description: 'The date and time the Dossier Upload was created in our system.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date and time the Dossier Upload was last updated in our system.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dossier:
          oneOf:
            -
              $ref: '#/components/schemas/Dossier'
          nullable: true
          description: 'The dossier associated with the upload.'
        uploadType:
          oneOf:
            -
              $ref: '#/components/schemas/DossierUploadType'
          nullable: true
          description: 'The upload type associated with the upload.'
        dossierSection:
          oneOf:
            -
              $ref: '#/components/schemas/DossierSection'
          nullable: true
          description: 'The dossier section associated with the upload.'
      type: object
    DossierUploadType:
      properties:
        id:
          description: 'The unique identifier of the upload type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: cc0b44dd-9270-44ca-bff6-837cb23cbfcb
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the upload-type. This key serves as an alternative to the 'id' field for referencing the upload-type."
          type: string
          maxLength: 191
          minLength: 0
          example: external-key-2
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the upload type'
          type: string
          maxLength: 191
          minLength: 0
          example: migrationKey@23
          nullable: true
        name:
          description: 'Name of the upload type'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Medical certificate - 2nd opinion'
        code:
          description: 'Code of the upload type'
          type: string
          maxLength: 191
          minLength: 0
          example: MED-2ND-OPINION
          nullable: true
        communicateWithEmployee:
          description: 'Indication if the upload will be communicated with employee'
          type: boolean
        isMedical:
          description: 'Whether the upload type is available in medical'
          type: boolean
        isAbsence:
          description: 'Whether the upload type is available in absence dossiers'
          type: boolean
        isHr:
          description: 'Whether the upload type is available in HR'
          type: boolean
        feedbackToDossier:
          description: 'Indication if the feedback will be placed into the dossier (terugkoppeling in dossier)'
          type: boolean
        dateCreated:
          description: 'Date the upload type was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'Date the upload type was last updated in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    DossierExternalResourceResource:
      properties:
        id:
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 22ac850c-144e-4fda-8ccb-2e098116012d
        dossier:
          oneOf:
            -
              $ref: '#/components/schemas/Dossier'
          nullable: true
          description: 'Dossier associated with the external resource'
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the external-resource. This key serves as an alternative to the 'id' field for referencing the external-resource."
          type: string
          nullable: true
        name:
          description: 'Name of the dossier external resource'
          type: string
        url:
          description: 'URL of the dossier external resource'
          type: string
        icon:
          description: 'Icon of the dossier external resource'
          type: string
        dateCreated:
          description: 'The date the dossier external resource was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date the dossier external resource was updated'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    DossierTypeEnumOptions:
      type: string
      enum:
        - illness
        - pregnancy
        - preventive
        - medical
        - adoption
        - organ-donation
        - company-dossier
        - wga
        - zwerd
        - objection-and-appeal
        - reintegration
        - medical-preventive
        - frequent-absence
        - research-by-occupational-health-expert
        - employee
        - absence-dossier
        - budgetcoaching
        - rie
        - pago
        - pmo
        - workplace-survey
        - training
        - vitality
        - care-coaching
        - consultancy
        - job-coaching
        - act-meting
        - career-guidance
        - assessment
        - outplacement
        - acquisition-of-employment
        - spoor-3
        - development-advice
        - spoor-2
        - birth-leave
        - illness-and-zwerd
        - paid-parental-leave
    DossierStatusEnumOptions:
      type: string
      enum:
        - open
        - completed
    SafetyNetEnumOptions:
      type: string
      enum:
        - disposal
        - special-employment
        - sick-due-to-pregnancy
        - not-specified
        - sick-due-to-childbirth
        - sick-due-to-organ-donation
        - unknown
    AccidentTypeEnumOptions:
      type: string
      enum:
        - private
        - private-with-liable
        - work-related-accident
        - work-related-accident-with-liable
    IllnessDossier:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            absenceCourses:
              description: 'List of absence courses related to this illness dossier'
              type: array
              items:
                $ref: '#/components/schemas/AbsenceCourseWithoutRelations'
            nursingAddress:
              $ref: '#/components/schemas/DossierAddress'
          type: object
    Dossier:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            employment:
              $ref: '#/components/schemas/EmploymentWithoutRelations'
            nursingAddress:
              $ref: '#/components/schemas/DossierAddress'
          type: object
    DossierWithPossibleRelationToEmployee:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            employment:
              $ref: '#/components/schemas/EmploymentWithPossibleRelationToEmployee'
          type: object
    DossierWithoutRelations:
      properties:
        id:
          description: 'A unique identifier for the dossier, used to distinctly identify and track the dossier within the system.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: d6b8f889-53a6-45e9-9f22-8e020f765b1a
        type:
          $ref: '#/components/schemas/DossierTypeEnumOptions'
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: External-Dossier-Key
          nullable: true
        dateReported:
          description: 'Date the dossier was reported, formatted in ISO8601 (YYYY-MM-DD).'
          type: string
          format: date
          example: '2020-01-23'
        dateStart:
          description: 'The effective start date of the Dossier, formatted in ISO8601 (YYYY-MM-DD).'
          type: string
          format: date
          example: '2024-01-01'
        dateEnd:
          description: 'The completion or closure date of the Dossier, formatted in ISO8601 (YYYY-MM-DD).'
          type: string
          format: date
          example: '2024-12-31'
        protocol:
          $ref: '#/components/schemas/ProtocolEnumOptions'
        dossierStatus:
          $ref: '#/components/schemas/DossierStatusEnumOptions'
        safetyNet:
          $ref: '#/components/schemas/SafetyNetEnumOptions'
        accidentType:
          $ref: '#/components/schemas/AccidentTypeEnumOptions'
        expectedDurationDays:
          description: 'The expected duration of the dossier in days. This field indicates the expected length of time the dossier is expected to remain open or active. Applies to illness and pregnancy dossiers.'
          type: integer
          example: 28
          nullable: true
        dateCreated:
          description: 'The date and time indicating when the dossier was initially created in the system. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-01-01 07:00:00'
        dateUpdated:
          description: 'The date and time showing the most recent update to the dossier. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-12-31 18:30:00'
      type: object
    DossierSection:
      properties:
        id:
          description: 'The unique identifier of the DossierSection'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 701a33f4-9793-46c3-a5db-76fa39390b70
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier-section. This key serves as an alternative to the 'id' field for referencing the dossier-section."
          type: string
          maxLength: 191
          minLength: 0
          example: section-notes
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the dossier section'
          type: string
          maxLength: 191
          minLength: 0
          example: old@key1234
          nullable: true
        name:
          description: 'The name of the dossier section'
          type: string
          maxLength: 191
          minLength: 1
          example: Notities
        code:
          description: 'Code of the dossier section'
          type: string
          maxLength: 191
          minLength: 0
          example: NOTES
          nullable: true
        color:
          description: 'Color of the dossier section.'
          type: string
          pattern: '^#[A-F0-9]{6}$'
        canContainNotes:
          description: 'Whether the dossier section can contain notes'
          type: boolean
          example: true
        canContainDocuments:
          description: 'Whether the dossier section can contain documents'
          type: boolean
          example: false
        dossierType:
          $ref: '#/components/schemas/DossierTypeEnumOptions'
        dateCreated:
          description: 'Date and time the dossier section was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'Date and time the dossier section was last updated in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    TaskStatusEnumOptions:
      type: string
      enum:
        - open
        - finished
        - cancelled
        - overdue
    DossierTask:
      properties:
        id:
          description: 'The unique identifier of the DossierTask'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 17b7c8ee-11e3-4c5e-ac18-6980062f8612
          nullable: false
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier-task. This key serves as an alternative to the 'id' field for referencing the dossier-task."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-KEY-564
          nullable: true
        migrationKey:
          description: 'A key used for identifying the task during migration processes.'
          type: string
          maxLength: 191
          minLength: 0
          example: Migration-479.10345
          nullable: true
        dossier:
          $ref: '#/components/schemas/DossierWithPossibleRelationToEmployee'
        baseTask:
          $ref: '#/components/schemas/Task'
        taskStatus:
          $ref: '#/components/schemas/TaskStatusEnumOptions'
        title:
          description: 'The title of the dossier-task'
          type: string
          example: 'Opstellen Plan van Aanpak'
          nullable: false
        content:
          description: 'The content of the dossier-task'
          type: string
          example: 'Werknemers en werkgevers maken samen het Plan van aanpak. Hierin staan afspraken over wat de werknemer gaat doen om weer aan het werk te kunnen gaan. En welke hulp daarbij nodig is.'
          nullable: true
        isPostponed:
          description: 'Indicates whether the dossier task is postponed by a user'
          type: boolean
          example: false
          nullable: false
        dateStart:
          description: 'The date when the task is scheduled to start.'
          type: string
          format: date
          nullable: true
        dateEnd:
          description: 'The date when the task is scheduled to be completed.'
          type: string
          format: date
          nullable: true
        dateCompleted:
          description: 'The date and time when the task is marked as completed'
          type: string
          format: date
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          nullable: true
        dateCreated:
          description: 'The date and time of the creation of the dossier-task'
          type: string
          format: date
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          nullable: true
        dateUpdated:
          description: 'The date and time of the last-update of the dossier-task'
          type: string
          format: date
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          nullable: true
      type: object
    PaidParentalLeaveDossier:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            paidParentalLeave:
              $ref: '#/components/schemas/PaidParentalLeave'
          type: object
    PaidParentalLeaveTypeEnumOptions:
      type: string
      enum:
        - birth
        - adoption
        - foster-care
        - cohabiting
    PaidParentalLeave:
      properties:
        id:
          description: 'The unique identifier of the Paid Parental Leave.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: feea3034-0832-45ed-b329-bd49ace32cdd
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-DOS-123
          nullable: true
        paidParentalLeaveType:
          $ref: '#/components/schemas/PaidParentalLeaveTypeEnumOptions'
        dateOfBirth:
          description: 'The date of birth of the child in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateFirstLeave:
          description: 'The start date of the requested leave in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateAdmission:
          description: 'The date of admission in format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-12-23'
          nullable: true
        weeks:
          description: 'The number of weeks of leave with a max of 9 weeks'
          type: integer
          maximum: 9
          minimum: 1
          example: 8
        children:
          description: 'The number of children the leave applies to'
          type: integer
          example: 1
          nullable: true
      type: object
    PregnancyDossier:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            pregnancy:
              $ref: '#/components/schemas/Pregnancy'
          type: object
    Pregnancy:
      properties:
        id:
          description: 'The unique identifier of the Pregnancy Dossier.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: ceb83b98-7a6f-42db-b51e-24d60d281964
          nullable: true
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          example: WAZO-123
          nullable: true
        dateOfBirthExpected:
          description: 'The expected date of birth. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2025-01-23'
          nullable: true
        dateOfActualBirth:
          description: 'The actual date of birth. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2025-01-27'
          nullable: true
        dateActualLeave:
          description: 'The actual start date of birth leave. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2024-12-24'
          nullable: true
        dateExpectedLeave:
          description: 'The expected leave date. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2024-12-24'
          nullable: true
        dateFirstWorkingDay:
          description: 'The first working day. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2024-05-01'
          nullable: true
        dateActualFirstWorkingDay:
          description: 'The actual first working day after the leave. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2024-12-01'
          nullable: true
        expectsMultiples:
          description: 'Flag to indicate if multiple babies are expected'
          type: boolean
          example: false
        hospitalizationChild:
          description: 'Flag to indicate if the child had to be hospitalized'
          type: boolean
          example: false
        flexibleLeave:
          description: 'Flag to indicate if the leave is flexible'
          type: boolean
          example: false
      type: object
    ReturnToWorkAdviceAbsenceCourse:
      properties:
        dateStart:
          description: 'The start date of the absence-course in YYYY-MM-DD format'
          type: string
          format: date
          example: '2020-01-01'
        dateEnd:
          description: 'The end date of the absence-course in YYYY-MM-DD format'
          type: string
          format: date
          example: '2020-01-15'
          nullable: true
        recoveryPercentage:
          description: 'Percentage of recovery'
          type: number
          format: float
          maximum: 100
          minimum: 0
          example: 25
      type: object
    ReturnToWorkAdvice:
      properties:
        employerId:
          description: 'The unique identifier of the employer associated with the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: d101331b-d372-4c0a-bf88-38335eec5863
        employeeId:
          description: 'The unique identifier of the employee associated with the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 53bc19b7-2a3d-4891-8c23-a4d7f7d49bac
        dossierId:
          description: 'The unique identifier of the dossier'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 1c6534b9-2ad3-418d-bca8-0e34944a7256
        dateReport:
          description: 'The date and time when the dossier was reported'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        absenceCourses:
          type: array
          items:
            $ref: '#/components/schemas/ReturnToWorkAdviceAbsenceCourse'
      type: object
    Spoor2Dossier:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            safetyNet:
              $ref: '#/components/schemas/SafetyNetEnumOptions'
            spoor2:
              $ref: '#/components/schemas/Spoor2'
          type: object
    Spoor2TrajectEnumOptions:
      type: string
      enum:
        - haalbaarheidsonderzoek
        - spoor-2
        - spoor-2-orienterend
        - spoor-3
        - outplacement
        - jobcoaching
        - loopbaancoaching
        - loopbaancoaching-orientatie
        - talentenanalyse-act-meting
        - ontwikkeltraject
    Spoor2:
      properties:
        id:
          description: 'The unique identifier of the Dossier.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        traject:
          $ref: '#/components/schemas/Spoor2TrajectEnumOptions'
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
      type: object
    ZwerdDossier:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DossierWithoutRelations'
        -
          properties:
            safetyNet:
              $ref: '#/components/schemas/SafetyNetEnumOptions'
            zwerd:
              $ref: '#/components/schemas/Zwerd'
          type: object
    Zwerd:
      properties:
        id:
          description: 'The unique identifier of the Dossier.'
          type: string
          format: uuid
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier. This key serves as an alternative to the 'id' field for referencing the dossier."
          type: string
      type: object
    GetDossierOfficerResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DossierOfficer'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    DossierOfficer:
      properties:
        id:
          description: 'The unique identifier of the Dossier officer. (dossierverantwoordelijke)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 6a81c97f-407b-4ab6-bed3-3b46737530d5
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the dossier-officer. This key serves as an alternative to the 'id' field for referencing the dossier-officer."
          type: string
          maxLength: 191
          minLength: 0
          example: user-1234
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the dossier officer.'
          type: string
          maxLength: 191
          minLength: 0
          example: staging-923478
          nullable: true
        username:
          description: 'The username of the dossier officer. This is available if the user relation is loaded.'
          type: string
          maxLength: 191
          minLength: 0
          example: dossierofficer-1
          nullable: true
        person:
          $ref: '#/components/schemas/MasterPerson'
      type: object
    GetEmployeeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmployeeSortOptions:
      type: string
      enum:
        - externalKey
        - '-externalKey'
    GetEmployeeIncludeOptions:
      type: string
      enum:
        - person
        - employments
        - employments.employmentContracts
        - currentOrLastEmploymentContract.organizationalUnit.employer
        - addresses
        - employmentContract
        - communicationMethods
    EmployeeRequestBodyPerson:
      properties:
        initials:
          description: 'The Initials of the employee'
          type: string
          maxLength: 30
          minLength: 0
          example: J.A.
          nullable: true
        firstName:
          description: 'The first name of the employee'
          type: string
          maxLength: 255
          minLength: 0
          example: John
          nullable: true
        prefix:
          description: 'The prefix of the name of the employee'
          type: string
          maxLength: 16
          minLength: 0
          example: 'van der'
          nullable: true
        lastName:
          description: 'The lastname of the employee'
          type: string
          maxLength: 100
          minLength: 1
          example: Veen
        prefixPartner:
          description: 'The prefix of the name of the partner of the employee'
          type: string
          maxLength: 16
          minLength: 0
          example: 'van der'
          nullable: true
        lastnamePartner:
          description: 'The lastname of the partner of the employee'
          type: string
          maxLength: 100
          minLength: 0
          example: Veen
          nullable: true
        namePreference:
          $ref: '#/components/schemas/namePreferenceEnumOptions'
        salutation:
          $ref: '#/components/schemas/SalutationEnumOptions'
        gender:
          $ref: '#/components/schemas/GenderEnumOptions'
        dateOfBirth:
          description: 'The date of birth of the employee. Format YYYY-MM-DD'
          type: string
          format: date
          example: '1970-01-01'
        dateOfDeath:
          description: 'The date of death of the employee. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2025-01-01'
        nationality:
          description: 'The nationality of the employee in ISO 3166-1 alpha-2 format (2 letters).'
          type: string
          pattern: '^[A-Z]{2}$'
          example: NL
        placeOfBirth:
          description: 'The city of birth of the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: Enschede
          nullable: true
        maritalStatus:
          $ref: '#/components/schemas/MaritalStatusEnumOptions'
        noRisk:
          description: "Indicates if there is a No risk indication for the employee. This option can be found in the application under on employee level the lifebuoy, and then under the 'Safety net' tab."
          type: boolean
          example: false
        sfb:
          description: "Indicates if there is Structural Functional Disability (SFB) decision  for the Employee. This option can be found in the application under on employee level the lifebuoy, and then under the 'Safety net' tab."
          type: boolean
          example: false
        socialSecurityNumber:
          description: "The SSN(BSN) of the employee. This corresponds to the field 'Citizen service number' and can be found in the edit employee screen. "
          type: string
          pattern: '^\d{9}$'
          example: '123456789'
      type: object
    EmployeeRequestBodyAddress:
      properties:
        street:
          description: 'The street of the primary address of the employee.'
          type: string
          maxLength: 191
          minLength: 0
          example: Stationsplein
          nullable: true
        number:
          description: 'The number with additions of the primary address of the employee.'
          type: string
          maxLength: 191
          minLength: 0
          example: 12B
          nullable: true
        postalCode:
          description: 'The postal code of the primary address of the employee.'
          type: string
          maxLength: 191
          minLength: 0
          example: 1234AB
          nullable: true
        city:
          description: 'The city of the primary address of the employee .'
          type: string
          maxLength: 191
          minLength: 0
          example: Hengelo
          nullable: true
        country:
          description: 'The country of the employee in ISO 3166-1 alpha-2 format (2 letters).'
          type: string
          pattern: '^[A-Z]{2}$'
          example: NL
      type: object
    EmployeeRequestBodyCommunicationMethods:
      properties:
        privateEmail:
          description: 'The private emailaddress of the employee'
          type: string
          format: email
          maxLength: 191
          minLength: 0
          example: private-email@domain.ext
          nullable: true
        privatePhone:
          description: 'The private phonenumber of the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: '+49123456789'
          nullable: true
        privateMobile:
          description: 'The private mobile phone of the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: '(+31/0)6 123 456 78'
          nullable: true
        businessEmail:
          description: 'The business email of the employee'
          type: string
          format: email
          maxLength: 191
          minLength: 0
          example: John.Doe@company.com
          nullable: true
        businessPhone:
          description: 'The business phone of the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: '088-800 8000 #3'
          nullable: true
        businessMobile:
          description: 'The business mobile phone of the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: +316-123456789
          nullable: true
      type: object
    PatchEmployeeRequestBody:
      required:
        - employeeId
      properties:
        employeeId:
          description: 'The unique identifier of the employee to update'
          type: string
          format: uuid
          example: f9e8d7c6-1234-5678-9012-abcdef987654
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employee. This key serves as an alternative to the 'id' field for referencing the employee."
          type: string
          maxLength: 191
          minLength: 0
          example: EMP-PATCH-EXT-KEY-789
          nullable: true
        person:
          $ref: '#/components/schemas/EmployeeRequestBodyPerson'
        address:
          $ref: '#/components/schemas/EmployeeRequestBodyAddress'
        communicationMethods:
          $ref: '#/components/schemas/EmployeeRequestBodyCommunicationMethods'
      type: object
    PostEmployeeRequestBodyUWV:
      properties:
        registrationNumber:
          description: 'The UWV registration number of the employee'
          type: string
        sectorId:
          description: 'The UWV sector of the employee'
          type: integer
        riskCode:
          description: 'The UWV risk code of the employee'
          type: string
        waitingPeriod:
          description: 'The waiting period (related to UWV) of the employee'
          type: integer
        payrollDiscountIndication:
          description: 'Indication for payroll discount (related to UWV) for the Employee.'
          type: boolean
      type: object
    PostEmployeeRequestBodyEmployment:
      properties:
        organizationalUnitId:
          description: 'The unique identifier of the Organizational Unit the employee belongs to. Mutually exclusive with organizationalUnitKey. Only one of these fields is mandatory.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        organizationalUnitKey:
          description: 'The external key of the Organizational Unit the employee belongs to. Mutually exclusive with organizationalUnitId. Only one of these fields is mandatory.'
          type: string
          maxLength: 191
          minLength: 0
          example: ORG-UNIT-KEY-001
          nullable: true
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employee. This key serves as an alternative to the 'id' field for referencing the employee."
          type: string
          maxLength: 191
          minLength: 0
          example: EMP-EXT-KEY-789
          nullable: true
        employeeNumber:
          description: 'The employee/personnel number of the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: EMP123456
          nullable: true
        externalSupervisorId:
          description: 'The unique identifier of the external supervisor of the employee'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 789e1234-e89b-12d3-a456-426614174000
          nullable: true
        internalSupervisorId:
          description: 'The unique identifier of the internal supervisor of the employee (should be another employee.id)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 456e7890-e89b-12d3-a456-426614174000
          nullable: true
        employmentTypeId:
          description: 'The id of the employment type of the employee. This can be obtained by listing the employment-types. Mutually exclusive with employmentTypeCode'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 223e4567-e89b-12d3-a456-426614174111
          nullable: true
        employmentTypeCode:
          description: 'The code of the employment type of the employee. Mutually exclusive with employmentTypeId'
          type: string
          maxLength: 191
          minLength: 0
          example: FULLTIME
          nullable: true
        jobTitle:
          description: 'The job title (position) of the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Software Engineer'
          nullable: true
        dateStart:
          description: 'The start date of the first Employment Contract of the employee. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2020-01-23'
        dateEnd:
          description: 'The end date of the first Employment Contract of the employee. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2025-12-31'
        dateSeniority:
          description: 'The seniority (AOW) date of the employee. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2060-05-15'
        employmentEndReason:
          $ref: '#/components/schemas/EmploymentEndReasonEnumOptions'
        normHoursPerWeek:
          description: 'Standard hours per week the employees of the OU works.'
          type: number
          format: float
          example: 40
          nullable: true
        hoursPerWeek:
          description: 'Hours per week the employee works.'
          type: number
          format: float
          example: 32
          nullable: true
        paymentPeriod:
          oneOf:
            -
              $ref: '#/components/schemas/PaymentPeriodEnumOptions'
          nullable: true
          description: 'The salary payment period of the employee.'
          example: month
      type: object
    PostEmployeeRequestBody:
      required:
        - person.initials
        - person.surname
        - person.namePreference
        - person.gender
        - person.dateOfBirth
        - address.street
        - address.number
        - address.postalCode
        - address.city
        - employment.hoursPerWeek
        - employment.dateStart
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employee. This key serves as an alternative to the 'id' field for referencing the employee."
          type: string
          maxLength: 191
          minLength: 0
          example: ext-key-987654321
          nullable: true
        person:
          $ref: '#/components/schemas/EmployeeRequestBodyPerson'
        address:
          $ref: '#/components/schemas/EmployeeRequestBodyAddress'
        communicationMethods:
          $ref: '#/components/schemas/EmployeeRequestBodyCommunicationMethods'
        employment:
          $ref: '#/components/schemas/PostEmployeeRequestBodyEmployment'
        uwv:
          $ref: '#/components/schemas/PostEmployeeRequestBodyUWV'
      type: object
    Employee:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/EmployeeWithoutRelations'
        -
          properties:
            person:
              oneOf:
                -
                  $ref: '#/components/schemas/EmployerPersonResource'
              nullable: true
              description: 'The personal details associated with the employee, available if the relation is included in the query'
            addresses:
              description: 'The addresses associated with the employee, available if the relation is included in the query'
              type: array
              items:
                $ref: '#/components/schemas/EmployerPersonAddressResource'
              nullable: true
            communicationMethods:
              description: 'The communication methods associated with the employee, available if the relation is included in the query'
              type: array
              items:
                $ref: '#/components/schemas/EmployerPersonCommunicationsResource'
              nullable: true
            employmentContract:
              oneOf:
                -
                  $ref: '#/components/schemas/EmploymentContractResource'
              nullable: true
              description: 'The current or last employment contract associated with the employee, available if the relation is included in the query'
            dossiers:
              type: array
              items:
                $ref: '#/components/schemas/Dossier'
            employments:
              description: 'The employments associated with the employee, available if the relation is included in the query'
              type: array
              items:
                $ref: '#/components/schemas/Employment'
          type: object
    EmployeeWithPersonRelation:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/EmployeeWithoutRelations'
        -
          properties:
            person:
              $ref: '#/components/schemas/EmployerPersonResource'
          type: object
    EmployeeWithoutRelations:
      properties:
        id:
          description: 'The unique identifier of the employee'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employee. This key serves as an alternative to the 'id' field for referencing the employee."
          type: string
          maxLength: 191
          minLength: 0
          example: ext-key-987654321
          nullable: true
        socialSecurityNumber:
          description: "The SSN (BSN) of the employee. This corresponds to the field 'Citizen service number' and can be found in the edit employee screen."
          type: string
          maxLength: 191
          minLength: 0
          pattern: '^\d{9}$'
          example: '123456789'
          nullable: true
        noRisk:
          description: "No risk indication for the employee. This option can be found in the application under on employee level the lifebuoy, and then under the 'Safety net' tab."
          type: boolean
          example: true
        sfb:
          description: "Structural Functional Disability (SFB) status of the employee. This option can be found in the application on employee level under the lifebuoy icon, and then under the 'Safety net' tab."
          type: boolean
          example: false
        absenceFrequency:
          description: 'The number of absences for the employee over the past 12 months. Updated nightly.'
          type: integer
          example: 5
        dateCreated:
          description: 'The date and time the employee was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time the absence course was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    GetEmployerArboServiceResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ArboService'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmployerResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Employer'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmployerSortOptions:
      type: string
      enum:
        - externalKey
        - '-externalKey'
        - name
        - '-name'
    GetEmployerIncludeOptions:
      type: string
      enum:
        - organizationalUnitsCount
        - insurancePolicies
        - employerDivision
        - companyDoctor.user
        - dossierOfficer.user
        - arboService
        - visitorAddress.country
        - postalAddress
        - contracts.type
        - contracts.service
        - contactPersons
        - ownRiskContracts.type
        - communications
        - contactPersons.details
    PatchEmployerRequestBody:
      description: 'You should only send the fields that need to be updated; any omitted fields will remain unchanged.'
      properties:
        id:
          description: "The unique identifier to specify the employer to be updated. This ID is required if the employer is being identified through this method, and it cannot be used simultaneously with the 'key' option."
          type: string
          format: uuid
          example: 4453e0e4-1d5d-4c1e-ac42-c541c50a34a3
        key:
          description: "An identifier provided by an external system that uniquely specifies the employer to be updated. This key serves as an alternative to the 'id' field for referencing the employer; only one of 'id' or 'key' is needed in a request to identify the employer."
          type: string
          example: 1234@external-key|test
        name:
          description: 'The (legal) name of the employer'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Visma Verzuim B.V.'
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer. This key serves as an alternative to the 'id' field for referencing the employer."
          type: string
          maxLength: 191
          minLength: 0
          example: 1c440145-0172-42c9-854a-3e95285a793d@CRM
          nullable: true
        relationNumber:
          description: 'A relation number identifying the employer in systems like invoicing or CRM'
          type: string
          maxLength: 191
          minLength: 0
          example: 1234-567890
          nullable: true
        policyNumber:
          description: "An administrative field to attach the employer's insurance policy number."
          type: string
          maxLength: 191
          minLength: 0
          example: POL-123-456-7890
          nullable: true
        email:
          description: 'The emailaddress of the employer'
          type: string
          format: email
          maxLength: 191
          minLength: 0
          example: email@email.com
          nullable: true
        phone:
          description: 'The phonenumber of the company'
          type: string
          maxLength: 191
          minLength: 0
          example: '0612345678'
          nullable: true
        employerDivisionId:
          description: 'The unique identifier of employer division'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: c9ef0d79-7c66-406d-ae4a-a66515992ef7
        companyDoctorId:
          description: 'The unique identifier of company doctor (bedrijfsarts)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 5bddb39b-8e8c-4794-a6c0-0141298827b6
          nullable: true
        dossierOfficerId:
          description: 'The unique identifier of the dossier officer (dossierverantwoordelijke)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 8d113cc8-2bd5-4a75-8ebd-ec71acdff9c2
          nullable: true
        arboServiceId:
          description: "The unique identifier of the arboservice, obtainable by the list of arboservice. (field in application 'arbodienst')"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: f814d306-ee4e-4d18-9a54-6c00d881e469
          nullable: true
        visitAddress:
          $ref: '#/components/schemas/Address'
        postalAddress:
          $ref: '#/components/schemas/Address'
      type: object
    EmployerRequestBodyContract:
      required:
        - contractTypeId
        - partnershipId
        - dateStart
      properties:
        contractTypeId:
          description: 'The unique identifier of the contracttype (contractsoorten)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 0d85701d-bef9-4dcc-b08d-94fb56994688
          nullable: true
        partnershipId:
          description: 'The unique identifier of their partnership (samenwerkingsverbanden)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 5c4f3c02-a861-4bb7-ba82-f07595c87881
          nullable: true
        contractnumber:
          description: 'The contractnumber according to this contract'
          type: string
          maxLength: 191
          minLength: 0
          example: abc123
          nullable: true
        serviceTypeId:
          description: "The identifier of the servicetype ('dienstverlening soorten', only applicable when 'dienstverlening' is enabled)"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 023645ba-461d-44c1-b40e-98f3cd9fdad9
          nullable: true
        accountnumber:
          description: 'The customer/account number according to this contract'
          type: string
          maxLength: 191
          minLength: 0
          example: abc123
          nullable: true
        dateStart:
          description: 'The startdate of the contract. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2023-01-01'
        dateEnd:
          description: 'The enddate of the contract. Format YYYY-MM-DD, defaults to NULL'
          type: string
          format: date
          example: '2024-01-01'
          nullable: true
        status:
          $ref: '#/components/schemas/EmployerContractStatusEnumOptions'
        incomingDossiers:
          description: 'Indicates the presence of incoming dossiers initiated before the contract start date.'
          type: boolean
          example: true
          nullable: true
      type: object
    PostEmployerRequestBody:
      description: 'Employer data'
      required:
        - name
        - employerDivisionId
        - arboServiceId
        - contract
      properties:
        name:
          description: 'The (legal) name of the employer'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Visma Verzuim B.V'
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer. This key serves as an alternative to the 'id' field for referencing the employer."
          type: string
          maxLength: 191
          minLength: 0
          example: Externalkey-123
          nullable: true
        relationNumber:
          description: 'A relation number identifying the employer in systems like invoicing or CRM'
          type: string
          maxLength: 191
          minLength: 0
          example: 1234-567890
          nullable: true
        policyNumber:
          description: "An administrative field to attach the employer's insurance policy number."
          type: string
          maxLength: 191
          minLength: 0
          example: POL-123-456-7890
          nullable: true
        email:
          description: 'The emailaddress of the employer'
          type: string
          format: email
          maxLength: 191
          minLength: 0
          example: email@email.com
          nullable: true
        phone:
          description: 'The phonenumber of the company'
          type: string
          maxLength: 191
          minLength: 0
          example: '0612345678'
          nullable: true
        employerDivisionId:
          description: 'The unique identifier of employer division'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: c9ef0d79-7c66-406d-ae4a-a66515992ef7
          nullable: true
        companyDoctorId:
          description: 'The unique identifier of company doctor (bedrijfsarts)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 5bddb39b-8e8c-4794-a6c0-0141298827b6
          nullable: true
        dossierOfficerId:
          description: 'The unique identifier of the dossier officer (dossierverantwoordelijke)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 8d113cc8-2bd5-4a75-8ebd-ec71acdff9c2
          nullable: true
        arboServiceId:
          description: "The unique identifier of the arboservice, obtainable by the list of arboservices. (field in application 'arbodienst')"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: f814d306-ee4e-4d18-9a54-6c00d881e469
          nullable: true
        visitAddress:
          $ref: '#/components/schemas/Address'
        postalAddress:
          $ref: '#/components/schemas/Address'
        contract:
          $ref: '#/components/schemas/EmployerRequestBodyContract'
      type: object
    Address:
      description: Address
      required:
        - street
        - number
        - postalCode
        - city
        - region
        - country
      properties:
        street:
          description: 'The name of the street'
          type: string
          example: Demmersweg
        number:
          description: 'The housenumber of the address, including the suffix'
          type: string
          example: 15a
        postalCode:
          description: "The postalcode/zipcode of the address. If country-code is set to 'NL', the zipcode is validate on format '1234AB' or '1234 AB')"
          type: string
          example: 1234AB
        country:
          description: 'The country of the address. Format in ISO3166-1 alpha-2'
          type: string
          maxLength: 2
          minLength: 2
          example: NL
        region:
          description: 'The regionname of the address'
          type: string
          example: Overijssel
        city:
          description: 'The city of the address'
          type: string
          example: Hengelo
      type: object
    ArboService:
      properties:
        id:
          description: 'The unique identifier of the arbo service (arbodienst)'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 5e517511-5e36-4a1f-9405-c5a58dfdce74
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the arbo-service. This key serves as an alternative to the 'id' field for referencing the arbo-service."
          type: string
          maxLength: 191
          minLength: 0
          example: arbo-1234
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the arbo service'
          type: string
          maxLength: 191
          minLength: 0
          example: database_234@84739
          nullable: true
        name:
          description: 'The name of the arbo service'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Arbodienst B.V.'
        dateCreated:
          description: 'The date and time that the arbo service was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-02-20 12:34:56'
        dateUpdated:
          description: 'The date and time that the arbo service was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-02-20 12:34:56'
      type: object
    EmployerAddress:
      properties:
        uuid:
          description: 'The unique identifier of the employer address'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: e55ee864-3845-4a4d-880c-93ccbf5ccc55
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the address. This key serves as an alternative to the 'id' field for referencing the address."
          type: string
          maxLength: 191
          minLength: 0
          example: 'address book software - 1234'
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the employer address'
          type: string
          maxLength: 191
          minLength: 0
          example: staging_1234
          nullable: true
        country:
          description: 'The country of the employer address in ISO 3166-1 alpha-2 format'
          type: string
          maxLength: 2
          minLength: 2
          example: NL
          nullable: true
        street:
          description: 'The street of the employer address'
          type: string
          maxLength: 100
          minLength: 0
          example: Demmersweg
          nullable: true
        number:
          description: 'The number, including the suffix, of the employer address'
          type: string
          maxLength: 30
          minLength: 0
          example: 42A
          nullable: true
        postalCode:
          description: 'The postal code of the employer address, (no validation)'
          type: string
          maxLength: 20
          minLength: 0
          example: '1234 AB'
          nullable: true
        city:
          description: 'The city of the employer address'
          type: string
          maxLength: 80
          minLength: 0
          example: Hengelo
          nullable: true
        dateCreated:
          description: 'The date and time that the employer address was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the employer address was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    CommunicationTypeEnumOptions:
      type: string
      enum:
        - phone
        - email
        - mobile
    EmployerCommunication:
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the communication. This key serves as an alternative to the 'id' field for referencing the communication."
          type: string
          maxLength: 191
          minLength: 0
          example: CRM@134679
          nullable: true
        migrationKey:
          description: 'The internal key used in migrations to match employer communications objects across different application instances.'
          type: string
          maxLength: 191
          minLength: 0
          example: old_database@132435
          nullable: true
        employerId:
          description: 'The unique identifier of the employer associated with the employer communication'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: c2794803-6dec-4f1a-b8e5-30376beeda1a
        type:
          $ref: '#/components/schemas/CommunicationTypeEnumOptions'
        value:
          description: 'The value of the communication method (e.g. email address, phone number)'
          type: string
          maxLength: 191
          minLength: 1
          example: '088 800 8000'
        isPrimary:
          description: 'Indicates if this communication type is the primary/preferred method.'
          type: boolean
          example: true
        dateCreated:
          description: 'The date and time that the employer communication was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the employer communication was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    Employer:
      properties:
        id:
          description: 'The unique identifier of the employer'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: ca86e1b8-3aa8-4494-9353-fe7a898297ab
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer. This key serves as an alternative to the 'id' field for referencing the employer."
          type: string
          maxLength: 191
          minLength: 0
          example: 1c440145-0172-42c9-854a-3e95285a793d@CRM
          nullable: true
        migrationKey:
          description: 'An internal key used in migrations to match employer objects across different application instances.'
          type: string
          maxLength: 191
          minLength: 0
          example: old_database@980159c2-8f38-4190-b124-e95bdce961da
          nullable: true
        name:
          description: 'The (legal) name of the employer'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Visma Verzuim B.V.'
        relationNumber:
          description: 'A relation number identifying the employer in systems like invoicing or CRM'
          type: string
          maxLength: 191
          minLength: 0
          example: 1234-567890
          nullable: true
        policyNumber:
          description: "An administrative field to attach the employer's insurance policy number."
          type: string
          maxLength: 191
          minLength: 0
          example: POL-123-456-7890
          nullable: true
        communications:
          type: array
          items:
            $ref: '#/components/schemas/EmployerCommunication'
        allowCommunications:
          description: 'Determines whether our application can send communications (email, etc.) to employees of the employer'
          type: boolean
          example: true
        arboCanView:
          description: 'Determine if the arbo-user can view this employer'
          type: boolean
          example: true
        arboCanEdit:
          description: 'Determine if the arbo-user can edit this employer'
          type: boolean
          example: true
        absencePregnancyRegistrationByInterface:
          description: 'Determine if the pregnancy dossiers will be registered by the interface. Mainly used for non-public-api interfaces'
          type: boolean
          example: true
        insurancePolicies:
          type: array
          items:
            $ref: '#/components/schemas/InsurancePolicy'
        employerDivision:
          $ref: '#/components/schemas/EmployerDivision'
        companyDoctor:
          $ref: '#/components/schemas/CompanyDoctor'
        dossierOfficer:
          $ref: '#/components/schemas/DossierOfficer'
        arboService:
          $ref: '#/components/schemas/ArboService'
        contracts:
          type: array
          items:
            $ref: '#/components/schemas/Contract'
        visitorAddress:
          $ref: '#/components/schemas/EmployerAddress'
        postalAddress:
          $ref: '#/components/schemas/EmployerAddress'
        contactPersons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPerson'
        ownRiskContracts:
          type: array
          items:
            $ref: '#/components/schemas/OwnRiskContract'
        dateCreated:
          description: 'The date and time that the employer was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the employer was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        remark:
          description: 'The remarks/comments added to the employer.'
          type: string
          maxLength: 65535
          minLength: 0
          example: '2020-01-23 12:34:56'
          nullable: true
        organizationalUnitsCount:
          description: 'The number of organizational units associated with the employer'
          type: integer
          example: 12
      type: object
    EmployerWithoutRelations:
      properties:
        id:
          description: 'The unique identifier of the employer'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: ca86e1b8-3aa8-4494-9353-fe7a898297ab
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer. This key serves as an alternative to the 'id' field for referencing the employer."
          type: string
          maxLength: 191
          minLength: 0
          example: 1c440145-0172-42c9-854a-3e95285a793d@CRM
          nullable: true
        migrationKey:
          description: 'An internal key used in migrations to match employer objects across different application instances.'
          type: string
          maxLength: 191
          minLength: 0
          example: old_database@980159c2-8f38-4190-b124-e95bdce961da
          nullable: true
        name:
          description: 'The (legal) name of the employer'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Visma Verzuim B.V.'
        relationNumber:
          description: 'A relation number identifying the employer in systems like invoicing or CRM'
          type: string
          maxLength: 191
          minLength: 0
          example: 1234-567890
          nullable: true
        policyNumber:
          description: "An administrative field to attach the employer's insurance policy number."
          type: string
          maxLength: 191
          minLength: 0
          example: POL-123-456-7890
          nullable: true
        allowCommunications:
          description: 'Determines whether our application can send communications (email, etc.) to employees of the employer'
          type: boolean
          example: true
        arboCanView:
          description: 'Determine if the arbo-user can view this employer'
          type: boolean
          example: true
        arboCanEdit:
          description: 'Determine if the arbo-user can edit this employer'
          type: boolean
          example: true
        absencePregnancyRegistrationByInterface:
          description: 'Determine if the pregnancy dossiers will be registered by the interface. Mainly used for non-public-api interfaces'
          type: boolean
          example: true
        dateCreated:
          description: 'The date and time that the employer was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time that the employer was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        remark:
          description: 'The remarks/comments added to the employer.'
          type: string
          maxLength: 65535
          minLength: 0
          example: 'Internal remark with regards to this employer'
          nullable: true
      type: object
    GetEmployerDivisionResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmployerDivision'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmployerDivisionSortOptions:
      type: string
      enum:
        - externalKey
        - '-externalKey'
    EmployerDivision:
      title: 'Employer Division'
      properties:
        id:
          description: 'The unique identifier for the Employer Division'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 472d87df-796d-4910-8796-ee49eddac03f
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer division. This key serves as an alternative to the 'id' field for referencing the employer division."
          type: string
          maxLength: 191
          minLength: 0
          example: external-identifier-243934
          nullable: true
        migrationKey:
          description: 'An internal key used in migration to identify Employer Division in other instances'
          type: string
          maxLength: 191
          minLength: 0
          example: staging_db-21334432
          nullable: true
        parentId:
          description: 'The unique identifier for the parent employer division'
          type: string
          format: uuid
          example: 1c6a86c9-f1de-47e2-9fd5-e7d8a28eff2e
          nullable: true
        name:
          description: 'Name of the Employer Division'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Segment A employers'
        color:
          description: 'Color-code associated with the Employer Division. Format #RRGGBB'
          type: string
          pattern: '#([A-F0-9]{6})'
          example: '#FF0000'
        dateCreated:
          description: 'The creation date of the Employer Division in our system. Format YYYY-MM-DD'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'Last update date of the Employer Division in our system. Format YYYY-MM-DD'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    EmployerPersonAddressResource:
      properties:
        id:
          description: 'The unique identifier of the employer person address'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 4df0ddbb-d2d0-4ca5-86ea-735008161e36
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the address. This key serves as an alternative to the 'id' field for referencing the address."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-KEY-123
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the employer person address'
          type: string
          maxLength: 191
          minLength: 0
          example: old_123445
          nullable: true
        personId:
          description: 'The person identifier associated with the employer person address'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 60e0a62d-b64c-4a36-a012-61e1bf9aad7a
        street:
          description: 'The street of the address associated with the employer person address.'
          type: string
          maxLength: 191
          minLength: 0
          example: Demmersweg
          nullable: true
        number:
          description: 'The number of the address associated with the employer person address. including the suffix.'
          type: string
          maxLength: 191
          minLength: 0
          example: 42A
          nullable: true
        postalCode:
          description: 'The postal code of the address associated with the employer person address. Will NOT be validated.'
          type: string
          maxLength: 191
          minLength: 0
          example: '1234 AB'
          nullable: true
        city:
          description: 'The city of the address associated with the employer person address.'
          type: string
          maxLength: 191
          minLength: 0
          example: Hengelo
          nullable: true
        primary:
          description: 'Indication if the address is flagged as primary or not.'
          type: boolean
          example: false
        dateCreated:
          description: 'The date and time the employer person address was created in our system (format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time the employer person address was last updated in our system (format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    CommunicationPurposeEnumOptions:
      type: string
      enum:
        - personal
        - business
    EmployerPersonCommunicationsResource:
      properties:
        uuid:
          description: 'The unique identifier of the communication method'
          type: string
          maxLength: 36
          minLength: 36
          example: b1dd6bdd-09dd-449b-84bb-888a6105a185
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the communication method. This key serves as an alternative to the 'id' field for referencing the communication method."
          type: string
          maxLength: 191
          minLength: 0
          example: crm_23345
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the current communication method'
          type: string
          maxLength: 191
          minLength: 0
          example: staging_12343
          nullable: true
        value:
          description: 'The value associated with the current communication method'
          type: string
          maxLength: 191
          minLength: 0
          example: something@mail.address
          nullable: true
        primary:
          description: 'Indication if the communication method is flagged as primary or not.'
          type: boolean
          example: true
        type:
          $ref: '#/components/schemas/CommunicationTypeEnumOptions'
        purpose:
          $ref: '#/components/schemas/CommunicationPurposeEnumOptions'
        dateCreated:
          description: 'The date and time the employer person communication was created in our system (format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time the employer person communication was last updated in our system (format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    namePreferenceEnumOptions:
      type: string
      enum:
        - own
        - partner
        - own-partner
        - partner-own
    MaritalStatusEnumOptions:
      type: string
      enum:
        - single
        - married
        - partnership
        - widowed
        - widowed-after-marriage
        - widowed-after-partnership
        - divorced
        - divorced-after-marriage
        - divorced-after-partnership
        - unknown
    SalutationEnumOptions:
      type: string
      enum:
        - full
        - short
    EmployerPersonResource:
      properties:
        id:
          description: 'The unique identifier of the employer person'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: cd51b3c0-447b-4f9c-ab4e-2dc29e3fd1f3
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employer person. This key serves as an alternative to the 'id' field for referencing the employer person."
          type: string
          maxLength: 191
          minLength: 0
          example: person-23875
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the employer person'
          type: string
          maxLength: 191
          minLength: 0
          example: old@482390
          nullable: true
        initials:
          description: 'The initials of the employer person'
          type: string
          maxLength: 30
          minLength: 0
          example: J
          nullable: true
        firstName:
          description: 'The firstname associated with the employer person'
          type: string
          maxLength: 255
          minLength: 0
          example: John
          nullable: true
        lastName:
          description: 'The lastname associated with the employer person'
          type: string
          maxLength: 100
          minLength: 1
          example: Doe
        lastNamePartner:
          description: 'The lastname of the partner associated with the employer person'
          type: string
          maxLength: 255
          minLength: 0
          example: Smith
          nullable: true
        namePreference:
          $ref: '#/components/schemas/namePreferenceEnumOptions'
        prefix:
          description: 'The prefix associated with the employer person'
          type: string
          maxLength: 16
          minLength: 0
          example: 'van der'
          nullable: true
        prefixPartner:
          description: 'The prefix of the name of the partner associated with the employer person'
          type: string
          maxLength: 16
          minLength: 0
          example: van
          nullable: true
        placeOfBirth:
          description: 'The city of birth associated with the employer person'
          type: string
          maxLength: 191
          minLength: 0
          example: Amsterdam
          nullable: true
        gender:
          $ref: '#/components/schemas/GenderEnumOptions'
        dateOfBirth:
          description: 'The date of birth associated with the employer person. Format YYYY-MM-DD'
          type: string
          format: date
          example: '1970-01-01'
        dateOfDeath:
          description: 'The date of death associated with the employer person. Format YYYY-MM-DD'
          type: string
          format: date
          example: '2024-12-01'
          nullable: true
        maritalStatus:
          $ref: '#/components/schemas/MaritalStatusEnumOptions'
        salutation:
          $ref: '#/components/schemas/SalutationEnumOptions'
        dateCreated:
          description: 'The date and time the employer person was created in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time the employer person was last updated in our system. Format YYYY-MM-DD HH:MM:SS'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
      type: object
    GetEmployerRoleResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmployerRole'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmployerRoleIncludeOptions:
      type: string
      enum:
        - arboRole
    EmployerRole:
      properties:
        id:
          description: 'The unique identifier of the Employer Role'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 782a1624-3213-4945-aee0-524c491bb821
        name:
          description: 'The name of the Employer Role'
          type: string
          maxLength: 191
          minLength: 1
          example: 'HR Manager'
        employerId:
          description: 'The unique identifier of the Employer associated to this role'
          type: string
          format: uuid
          example: 16007745-c6ad-4c00-8087-420d204090b5
        externalKey:
          description: 'The key used by external systems associated with the employer-role'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        migrationKey:
          description: 'The internal key, used by migrations between different subsytems, associated to the employer-role.'
          type: string
          maxLength: 191
          minLength: 0
          example: Staging@8372
          nullable: true
        code:
          description: 'The code associated to the employer-role.'
          type: string
          maxLength: 191
          minLength: 0
          example: HRM
          nullable: true
        baseRoleName:
          description: 'The name of the base-role associated to the employer-role'
          type: string
          maxLength: 191
          minLength: 0
          example: 'HR medewerkers'
          nullable: true
        active:
          description: 'Indication that the employer-role is active'
          type: boolean
        arboRole:
          oneOf:
            -
              $ref: '#/components/schemas/ArboRole'
          nullable: true
      type: object
    GetEmploymentContractResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmploymentContractResource'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmploymentContractResourceSortOptions:
      type: string
      enum:
        - externalKey
        - dateUpdated
        - '-externalKey'
        - '-dateUpdated'
    GetEmploymentContractResourceIncludeOptions:
      type: string
      enum:
        - organizationalUnit.employer
        - employmentType
        - employment.employee.person
    GetEmploymentResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Employment'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetEmploymentSortOptions:
      type: string
      enum:
        - externalKey
        - '-externalKey'
        - dateUpdated
        - '-dateUpdated'
    GetEmploymentIncludeOptions:
      type: string
      enum:
        - employmentEndReason
        - employee.person
        - supervisor
        - externalSupervisor
        - currentOrLastEmploymentContract
        - firstEmploymentContract
        - uwvSector
        - employmentContracts
        - employmentContracts.employmentType
        - currentOrLastEmploymentContract.organizationalUnit.employer
        - currentOrLastEmploymentContract.employmentType
    GetEmploymentTypeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmploymentType'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationLinks'
      type: object
    PatchEmploymentContractRequestBody:
      properties:
        id:
          description: "Employment Contract ID, mutually exclusive with 'key'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
          nullable: true
        key:
          description: "Employment Contract external key, mutually exclusive with 'id'"
          type: string
          maxLength: 191
          minLength: 0
          example: EmploymentContract@Key
          nullable: true
        employmentTypeId:
          description: "The ID of the new Employment Type, mutually exclusive with 'employmentTypeCode'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 58d28f4f-ecdf-4420-b7a0-aeb5aa367376
          nullable: true
        employmentTypeCode:
          description: "The code of the new Employment Type, mutually exclusive with 'employmentTypeId'"
          type: string
          maxLength: 191
          minLength: 0
          example: 'employment@type#code'
          nullable: true
        organizationalUnitId:
          description: "The ID of the new Organizational Unit, mutually exclusive with 'organizationalUnitKey'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 42a384fb-de7e-421c-ba81-2598fb510016
          nullable: true
        organizationalUnitKey:
          description: "The External Key of the new Organizational Unit, mutually exclusive with 'organizationalUnitId'"
          type: string
          maxLength: 191
          minLength: 0
          example: OrganizationalUnit@Key
          nullable: true
        paymentPeriod:
          oneOf:
            -
              $ref: '#/components/schemas/PaymentPeriodEnumOptions'
          nullable: true
          description: "The new payment period wording - e.g. 'month' - for the employment contract."
          example: month
        dateStart:
          description: 'New start date for the employment contract'
          type: string
          format: date
          example: '2000-01-01'
          nullable: true
        dateEnd:
          description: 'New end date for the employment contract, if applicable'
          type: string
          format: date
          example: '2037-03-03'
          nullable: true
        jobTitle:
          description: 'New job title for the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Chief Executive Officer'
          nullable: true
        normHoursPerWeek:
          description: 'The new normal hours to be worked per week as part of the employment contract'
          type: number
          example: 40.01
          nullable: true
        hoursPerWeek:
          description: 'The new actual hours worked per week as part of the employment contract'
          type: number
          example: 39.02
          nullable: true
        costCenterDescription:
          description: 'New Cost Center Description for the employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: 'This cost center has an updated description'
          nullable: true
        costCenterCode:
          description: 'New Cost Center Code for the employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: CCC123
          nullable: true
      type: object
    PatchEmploymentRequestBody:
      properties:
        id:
          description: "Employment ID, mutually exclusive with 'key'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
          nullable: true
        key:
          description: "Employment external key, mutually exclusive with 'id'"
          type: string
          maxLength: 191
          minLength: 0
          example: Employment@Key
          nullable: true
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employment. This key serves as an alternative to the 'id' field for referencing the employment."
          type: string
          maxLength: 191
          minLength: 0
          example: Employment@Key@New
          nullable: true
        waitingDays:
          description: 'The waiting period for the employment'
          type: integer
          example: 3
          nullable: true
        uwvSector:
          description: 'The UWV sector for the Employment'
          type: integer
          example: 2
          nullable: true
        employmentEndReason:
          oneOf:
            -
              $ref: '#/components/schemas/EmploymentEndReasonEnumOptions'
          nullable: true
          description: 'The new employment end reason wording for the employment'
          example: end-employment
        internalSupervisorId:
          description: "The unique identifier of the new internal supervisor for the employment. Mutually exclusive with 'externalSupervisorId'."
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
          nullable: true
        externalSupervisorId:
          description: "The unique identifier of the new external supervisor for the employment. Mutually exclusive with 'internalSupervisorId'."
          type: string
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
          nullable: true
        uwvRiskCode:
          description: 'The new uwv risk code of the employment'
          type: string
          example: testRiskCode
          nullable: true
        employeeNumber:
          description: 'The new employee number on the employment'
          type: string
          maxLength: 191
          minLength: 0
          example: testEmployeeNumber
          nullable: true
      type: object
    PostEmploymentContractRequestBody:
      required:
        - paymentPeriod
        - dateStart
      properties:
        employmentId:
          description: "Employment ID, mutually exclusive with 'employmentKey'"
          type: string
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
        employmentKey:
          description: "Employment Key, mutually exclusive with 'employmentId'"
          type: string
          maxLength: 191
          minLength: 0
          example: Employment@Key
          nullable: true
        employmentTypeId:
          description: "The ID of the Employment Type for the new Employment Contract, mutually exclusive with 'employmentTypeCode'"
          type: string
          maxLength: 36
          minLength: 36
          example: 58d28f4f-ecdf-4420-b7a0-aeb5aa367376
        employmentTypeCode:
          description: "The Code of the Employment Type for the new Employment Contract, mutually exclusive with 'employmentTypeId'"
          type: string
          maxLength: 191
          minLength: 0
          example: ab12
          nullable: true
        organizationalUnitId:
          description: "The ID of the Organizational Unit, mutually exclusive with 'organizationalUnitKey'"
          type: string
          maxLength: 36
          minLength: 36
          example: 42a384fb-de7e-421c-ba81-2598fb510016
        organizationalUnitKey:
          description: "Organizational Unit Key, mutually exclusive with 'organizationalUnitId'"
          type: string
          maxLength: 191
          minLength: 0
          example: OrganizationalUnit@Key
          nullable: true
        paymentPeriod:
          $ref: '#/components/schemas/PaymentPeriodEnumOptions'
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employment contract. This key serves as an alternative to the 'id' field for referencing the employment contract."
          type: string
          maxLength: 191
          minLength: 0
          example: External@Key
          nullable: true
        dateStart:
          description: 'Start date for the new employment contract'
          type: string
          format: date
          example: '2000-01-01'
        dateEnd:
          description: 'End date for the new employment contract, if applicable'
          type: string
          format: date
          example: '2037-03-03'
          nullable: true
        jobTitle:
          description: 'Job title for the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Chief Executive Officer'
          nullable: true
        normHoursPerWeek:
          description: 'The normal hours to be worked per week as part of the new employment contract'
          type: number
          example: 40
          nullable: true
        hoursPerWeek:
          description: 'The current actual hours worked per week as part of the new employment contract'
          type: number
          example: 39
          nullable: true
        costCenterDescription:
          description: 'Cost Center Description for the new employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: 'This cost center has a description'
          nullable: true
        costCenterCode:
          description: 'Cost Center Code for the new employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: CCC123
          nullable: true
      type: object
    PostEmploymentRequestBody:
      properties:
        employeeId:
          description: "The unique identifier of the employee, mutually exclusive with 'employeeKey'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
        employeeKey:
          description: "The identifier of an external system, associated with the employee, mutually exclusive with 'employeeId'"
          type: string
          maxLength: 191
          minLength: 0
          example: Employee@Key
        employmentTypeId:
          description: "The unique identifier of the employment type for the new employment contract, mutually exclusive with 'employmentTypeCode'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 58d28f4f-ecdf-4420-b7a0-aeb5aa367376
        employmentTypeCode:
          description: "The code of the employment type for the new employment contract, mutually exclusive with 'employmentTypeId'"
          type: string
          maxLength: 191
          minLength: 0
          example: FULL-TIME
        organizationalUnitId:
          description: "The unique identifier of the Organizational Unit, mutually exclusive with 'organizationalUnitKey'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 42a384fb-de7e-421c-ba81-2598fb510016
        organizationalUnitKey:
          description: "The key of the Organizational Unit, mutually exclusive with 'organizationalUnitId'"
          type: string
          maxLength: 191
          minLength: 0
          example: OrganizationalUnit@Key
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employment. This key serves as an alternative to the 'id' field for referencing the employment."
          type: string
          maxLength: 191
          minLength: 0
          example: External@Key
          nullable: true
        waitingDays:
          description: 'The number of waiting days'
          type: integer
          example: 3
          nullable: true
        uwvSector:
          description: 'The UWV Sector in which the employment belongs'
          type: integer
          example: 2
          nullable: true
        employmentEndReason:
          $ref: '#/components/schemas/EmploymentEndReasonEnumOptions'
        internalSupervisorId:
          description: 'ID identifier for the employee set as a supervisor to the employment'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 42a384fb-de7e-421c-ba81-2598fb510016
          nullable: true
        externalSupervisorId:
          description: 'ID identifier for the external supervisor set as a supervisor to the employment'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 42a384fb-de7e-421c-ba81-2598fb510016
          nullable: true
        uwvRiskCode:
          description: 'Uwv Risk Code'
          type: string
          example: Uwv@Risk@Code
        dateStart:
          description: 'Start date for the new employment contract, defaults to current day'
          type: string
          format: date
          example: '2000-01-01'
          nullable: true
        dateEnd:
          description: 'End date for the new employment contract, if applicable'
          type: string
          format: date
          example: '2037-03-03'
          nullable: true
        jobTitle:
          description: 'Job title for the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Chief Executive Officer'
          nullable: true
        normHoursPerWeek:
          description: 'The normal hours to be worked per week as part of the new employment contract'
          type: number
          example: 40
          nullable: true
        hoursPerWeek:
          description: 'The current actual hours worked per week as part of the new employment contract'
          type: number
          example: 39
          nullable: true
        employeeNumber:
          description: 'The employee number related to the employment'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Employee@Number#12345'
          nullable: true
        paymentPeriod:
          $ref: '#/components/schemas/PaymentPeriodEnumOptions'
      type: object
    PaymentPeriodEnumOptions:
      type: string
      enum:
        - hour
        - day
        - week
        - four-weeks
        - month
        - year
    EmploymentContractResource:
      properties:
        id:
          description: 'The unqiue identifier of the employment contract'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employment contract. This key serves as an alternative to the 'id' field for referencing the employment contract."
          type: string
          maxLength: 191
          minLength: 0
          example: External@Key
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: Migration@Key
          nullable: true
        employment:
          $ref: '#/components/schemas/EmploymentWithPossibleRelationToEmployer'
        dateStart:
          description: 'The start date associated with the employment contract. (Format YYYY-MM-DD)'
          type: string
          format: date
          example: '1990-01-01'
        dateEnd:
          description: 'The end date associated with the employment contract. (Format YYYY-MM-DD)'
          type: string
          format: date
          example: '2000-01-01'
          nullable: true
        jobTitle:
          description: 'The job title (position) associated with the employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Chief Executive Officer'
          nullable: true
        employmentType:
          $ref: '#/components/schemas/EmploymentType'
        normHoursPerWeek:
          description: 'Standard hours per week associated with the employment contract.'
          type: number
          format: double
          example: 40
          nullable: true
        hoursPerWeek:
          description: 'Hours per week associated with the employment contract.'
          type: number
          format: double
          example: 32
          nullable: true
        functionYears:
          description: 'Represents the total number of years an employee has held a specific function or role within the organization'
          type: integer
          example: 10
          nullable: true
        paymentPeriod:
          oneOf:
            -
              $ref: '#/components/schemas/PaymentPeriodEnumOptions'
          nullable: true
          description: 'Defines the time interval for which an employee receives salary payments.'
          example: month
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        univeralSalary:
          description: 'The universal(uniform) salary associated with the employment contract.'
          type: number
          format: double
          example: 99899.34
          nullable: true
        dateCreated:
          description: 'The date and time the employment contract was created in our system. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time the employment contract was last updated in our system. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    EmploymentContractWithPossibleRelationToEmployer:
      properties:
        id:
          description: 'The unqiue identifier of the employment contract'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employment contract. This key serves as an alternative to the 'id' field for referencing the employment contract."
          type: string
          maxLength: 191
          minLength: 0
          example: External@Key
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: Migration@Key
          nullable: true
        dateStart:
          description: 'The start date associated with the employment contract. (Format YYYY-MM-DD)'
          type: string
          format: date
          example: '1990-01-01'
        dateEnd:
          description: 'The end date associated with the employment contract. (Format YYYY-MM-DD)'
          type: string
          format: date
          example: '2000-01-01'
          nullable: true
        jobTitle:
          description: 'The job title (position) associated with the employment contract'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Chief Executive Officer'
          nullable: true
        normHoursPerWeek:
          description: 'Standard hours per week associated with the employment contract.'
          type: number
          format: double
          example: 40
          nullable: true
        hoursPerWeek:
          description: 'Hours per week associated with the employment contract.'
          type: number
          format: double
          example: 32
          nullable: true
        functionYears:
          description: 'Represents the total number of years an employee has held a specific function or role within the organization'
          type: integer
          example: 10
          nullable: true
        paymentPeriod:
          oneOf:
            -
              $ref: '#/components/schemas/PaymentPeriodEnumOptions'
          nullable: true
          description: 'Defines the time interval for which an employee receives salary payments.'
          example: month
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnitWithPossibleRelationToEmployer'
        univeralSalary:
          description: 'The universal(uniform) salary associated with the employment contract.'
          type: number
          format: double
          example: 99899.34
          nullable: true
        dateCreated:
          description: 'The date and time the employment contract was created in our system. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date and time the employment contract was last updated in our system. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    EmploymentEndReasonEnumOptions:
      type: string
      enum:
        - end-employment
        - sick-during-end-of-employment
        - reach-aow
        - death
        - dismissal
        - retirement
        - temporary-old-age-pension
        - wia
        - termination-of-temporary-employment
        - unknown
        - within-probationary-period
        - dismissal-own-request
        - immediate-dismissal
        - mutual-termination-of-employment
    Employment:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/EmploymentWithoutRelations'
        -
          properties:
            employee:
              $ref: '#/components/schemas/EmployeeWithoutRelations'
            employmentContracts:
              type: array
              items:
                $ref: '#/components/schemas/EmploymentContractResource'
            employmentEndReason:
              $ref: '#/components/schemas/EmploymentEndReasonEnumOptions'
            internalSupervisorId:
              description: 'The unique identifier of the internal supervisor associated with this employment'
              type: string
              format: uuid
              maxLength: 36
              minLength: 36
              example: 123e4567-e89b-12d3-a456-556614174000
              nullable: true
            externalSupervisorId:
              description: 'The unique identifier of the external supervisor associated with this employment'
              type: string
              format: uuid
              maxLength: 36
              minLength: 36
              example: 789e1234-e89b-12d3-a456-426614174000
              nullable: true
            currentOrLastEmploymentContract:
              $ref: '#/components/schemas/EmploymentContractResource'
            firstEmploymentContractId:
              description: 'The unique identifier of the first employment contract associated with this employment'
              type: string
              format: uuid
              maxLength: 36
              minLength: 36
              example: 456e7890-e89b-12d3-a456-426614174000
            uwvSector:
              description: 'The name of the UWV sector associated with this employment'
              type: string
              maxLength: 191
              example: 'Elektrotechnische industrie'
              nullable: true
          type: object
    EmploymentWithoutRelations:
      properties:
        uuid:
          description: 'The unique identifier of the employment'
          type: string
          maxLength: 36
          minLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employment. This key serves as an alternative to the 'id' field for referencing the employment."
          type: string
          maxLength: 191
          minLength: 0
          example: External-Key-123
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the employment'
          type: string
          maxLength: 191
          minLength: 0
          example: Migration-Key-456
          nullable: true
        employmentNumber:
          description: 'The total number of employments for the employee'
          type: string
          maxLength: 191
          minLength: 0
          example: '3'
          nullable: true
        primary:
          description: 'Indication if the employment is flagged as primary or not.'
          type: boolean
          example: true
        dateSeniority:
          description: 'The seniority (aow) date of the employee associated with this employment. Format YYYY-MM-DD HH:MM:SS.'
          type: string
          format: date
          example: '2060-05-30'
        employeeNumber:
          description: 'The employee number of the employee associated with this employment'
          type: string
          maxLength: 191
          minLength: 0
          example: '34'
          nullable: true
        dateStartChainProvision:
          description: 'The date of the start of the chain provision in YYYY-MM-DD format'
          type: string
          format: date
          example: '2020-01-23'
          nullable: true
        uwvRiskCode:
          description: 'The UWV risk code of the Employee associated with this employment.'
          type: string
          maxLength: 191
          minLength: 0
          example: RISK-123
          nullable: true
        waitingPeriod:
          description: 'The waiting period (related to UWV) of the Employee associated with this employment.'
          type: integer
          example: 30
        dateCreated:
          description: 'The date and time the employment was created in our system. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time the employment was last updated in our system. (Format YYYY-MM-DD HH:MM:SS)'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    EmploymentWithPossibleRelationToEmployee:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/EmploymentWithoutRelations'
        -
          properties:
            employee:
              $ref: '#/components/schemas/EmployeeWithPersonRelation'
          type: object
    EmploymentWithPossibleRelationToEmployer:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/EmploymentWithoutRelations'
        -
          properties:
            employmentContracts:
              type: array
              items:
                $ref: '#/components/schemas/EmploymentContractWithPossibleRelationToEmployer'
          type: object
    EmploymentType:
      properties:
        id:
          description: 'The unique identifier of the employment type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: a1b2c3d4-5678-9012-3456-7890abcdef12
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the employment type. This key serves as an alternative to the 'id' field for referencing the employment type."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-EMP-TYPE-001
          nullable: true
        migrationKey:
          description: 'The migration key of the employment type'
          type: string
          maxLength: 191
          minLength: 0
          example: MIG-KEY-EMP-123
          nullable: true
        name:
          description: 'The name of the employment type'
          type: string
          maxLength: 191
          minLength: 1
          example: Full-Time
        code:
          description: 'The code of the employment type'
          type: string
          maxLength: 191
          minLength: 0
          example: FT01
          nullable: true
        indefiniteContract:
          description: "Whether the employment type is for a contract of indefinite duration ('onbepaalde tijd')"
          type: boolean
          example: true
        education:
          description: 'Whether the employment type is for education (internship)'
          type: boolean
          example: false
      type: object
    GetExternalSupervisorResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExternalSupervisor'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetExternalSupervisorIncludeOptions:
      type: string
      enum:
        - person
    ExternalSupervisor:
      properties:
        id:
          description: 'The unique identifier of the external supervisor.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 142d9b0c-0aba-446a-8205-88906b42be65
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the external supervisor. This key serves as an alternative to the 'id' field for referencing the external supervisor."
          type: string
          maxLength: 191
          minLength: 0
          example: some-external-reference@source-system
          nullable: true
        migrationKey:
          description: 'The migration key associated with the external supervisor.'
          type: string
          maxLength: 191
          minLength: 0
          example: staging-6758
          nullable: true
        employerId:
          description: 'The unique identifier for the employer associated with the external supervisor. Null if the external supervisor is not authorized for the employer, in this scenario they are probably authorized on an OU underneath of the employer'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 944aaeea-df07-43a3-a68b-6affe31223b3
          nullable: true
        organizationalUnitId:
          description: 'The unique identifier for the Organizational Unit associated with the external supervisor. Could be null if the external supervisor is authorized on the employer or the employer division the employer is part of.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: ef414880-76d8-494a-b6a9-f1eda24e2f7f
          nullable: true
        jobTitle:
          description: "The job title (called 'position' in our application) assigned to the external supervisor."
          type: string
          maxLength: 191
          minLength: 0
          example: Leidinggevende
          nullable: true
        person:
          $ref: '#/components/schemas/EmployerPersonResource'
      type: object
    InsurancePolicy:
      properties:
        id:
          description: 'The unique identifier of the insurance policy'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 99b31865-c41f-403e-a612-3a6309386255
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the insurance policy. This key serves as an alternative to the 'id' field for referencing the insurance policy."
          type: string
          maxLength: 191
          minLength: 0
          example: insurance_policy-1234
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the insurance policy'
          type: string
          maxLength: 191
          minLength: 0
          example: old_database@1234
          nullable: true
        policyNumber:
          description: 'The policy number of the insurance policy'
          type: string
          maxLength: 191
          minLength: 0
          example: POL-987-654321
          nullable: true
        dateStart:
          description: 'The start date of the insurance policy in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-01-01'
        dateEnd:
          description: 'The end date of the insurance policy in YYYY-MM-DD format'
          type: string
          format: date
          example: '2025-12-31'
        dateCreated:
          description: 'The date and time that the insurance policy was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-11-15 12:34:56'
        dateUpdated:
          description: 'The date and time that the insurance policy was last updated in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-11-15 12:34:56'
      type: object
    MasterPerson:
      properties:
        id:
          description: 'The unique identifier of the person information record'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: cbdfcd45-6339-431f-8223-4cc4eaf11874
        name:
          description: 'The displayname of the person (auto-generated, based on surname and initials)'
          type: string
          example: 'Doe, J'
        surname:
          description: 'The Surname/Lastname of the person'
          type: string
          maxLength: 100
          minLength: 1
          example: Doe
        initials:
          description: 'Initials of the person'
          type: string
          maxLength: 30
          minLength: 0
          example: J
          nullable: true
        nickname:
          description: "The person's first name"
          type: string
          maxLength: 255
          minLength: 0
          example: John
          nullable: true
        primaryEmail:
          description: 'Primary Emailaddress of the person'
          type: string
          format: email
          example: john.doe@company.com
        gender:
          $ref: '#/components/schemas/GenderEnumOptions'
      type: object
    GetOperationResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    VatPercentageEnumOptions:
      type: integer
      enum:
        - 0
        - 6
        - 21
    Operation:
      properties:
        id:
          description: 'The unique identifier of the operation'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 30c959ca-4558-4bcb-98ff-828510ae0fb5
        name:
          description: 'The name of the operation'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Opstellen plan van aanpak'
        description:
          description: 'The description of the operation'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Het plan van aanpak moet uiterlijk in de 8e week worden opgesteld.'
          nullable: true
        code:
          description: 'The code of the operation'
          type: string
          maxLength: 191
          minLength: 0
          example: PVA
          nullable: true
        shortCode:
          description: 'The short code of the operation'
          type: string
          maxLength: 191
          minLength: 0
          example: PVA
          nullable: true
        normTime:
          description: 'The time used to perform the operation in minutes'
          type: integer
          example: 75
          nullable: true
        vatPercentage:
          $ref: '#/components/schemas/VatPercentageEnumOptions'
        hourlyPayment:
          description: 'Indicates whether the operation has hourly payment.'
          type: boolean
          example: true
        pricePerQuantity:
          description: 'The price per unit of the operation, used for invoicing.'
          type: number
          nullable: true
        pricePerHour:
          description: 'The price per hour of the operation, used for invoicing.'
          type: number
          nullable: true
        internalPrice:
          description: 'The internal price of the operation'
          type: number
          nullable: true
        shouldBeBilled:
          description: 'Indicates whether the operation should be billed.'
          type: boolean
        dateCreated:
          description: 'The date and time when the operation was created in the system.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time when the operation was last updated in the system.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    GetBillableOperationResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Operationable'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetBillableOperationSortOptions:
      type: string
      enum:
        - dateExecuted
        - '-dateExecuted'
        - dateUpdated
        - '-dateUpdated'
        - dateDeleted
        - '-dateDeleted'
        - externalKey
        - '-externalKey'
    GetBillableOperationIncludeOptions:
      type: string
      enum:
        - dossierTask
        - employment.employee
        - dossier
        - dossier.employment.employee
        - dossier.employment.employmentContracts
        - dossier.employment.employmentContracts.organizationalUnit
        - dossier.employment.employmentContracts.organizationalUnit.employer
    Operationable:
      description: 'JSON resource representing an billable operation.'
      properties:
        id:
          description: 'The unique identifier of the billable operation.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 7b1dbb22-b145-419c-bd27-415a4e85e6c9
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the billable operation. This key serves as an alternative to the 'id' field for referencing the billable operation."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-SYS-43523345
          nullable: true
        operation:
          $ref: '#/components/schemas/Operation'
        employer:
          $ref: '#/components/schemas/EmployerWithoutRelations'
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        dossier:
          $ref: '#/components/schemas/Dossier'
        dossierTask:
          $ref: '#/components/schemas/DossierTask'
        employment:
          $ref: '#/components/schemas/EmploymentWithPossibleRelationToEmployer'
        time:
          description: 'The time in minutes that is registered during the execution of the operation.'
          type: integer
          example: 75
        vatPercentage:
          $ref: '#/components/schemas/VatPercentageEnumOptions'
        pricePerHour:
          description: 'The price per hour associated with the billable operation.'
          type: number
          example: 35
          nullable: true
        pricePerQuantity:
          description: 'The price per quantity associated with the billable operation.'
          type: number
          example: 150
          nullable: true
        dateExecuted:
          description: 'The date executed associated with the billable operation.'
          type: string
          format: date
          example: '2020-01-23'
        dateCreated:
          description: 'The date of creation of the billable operation.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'The date of update of the billable operation.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateDeleted:
          description: 'The date of deletion of the billable operation.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-12-01 12:34:56'
          nullable: true
      type: object
    GetOrganizationalUnitResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationalUnit'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetOrganizationalUnitSortOptions:
      type: string
      enum:
        - name
        - officialName
        - code
        - sbiCode
        - number
        - kvkNumber
        - vatNumber
        - relationNumber
        - externalKey
        - '-name'
        - '-officialName'
        - '-code'
        - '-sbiCode'
        - '-number'
        - '-kvkNumber'
        - '-vatNumber'
        - '-relationNumber'
        - '-externalKey'
    GetOrganizationalUnitIncludeOptions:
      type: string
      enum:
        - employer
        - parentOrganizationalUnit
        - companyDoctor
        - dossierOfficer
        - internalSupervisor
        - externalSupervisor
        - contactPersons
        - visitorAddress
        - postalAddress
        - communications
    GetOrganizationalUnitTypeResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationalUnitType'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetOrganizationalUnitTypeIncludeOptions:
      type: string
      enum:
        - employer
    PatchOrganizationalUnitRequestBody:
      properties:
        id:
          description: "Unique identifier of the organizational unit to be updated. Required if not provided in the path and 'key' is not provided. Mutually exclusive with 'key'"
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 0a631224-f554-4762-95bc-c7c53accbd67
        key:
          description: "External key of the organizational unit to be updated. Required if no 'id' is provided. Mutually exclusive with 'id'."
          type: string
          maxLength: 191
          minLength: 1
          example: EXT-OU-348957
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the organizational unit. This key serves as an alternative to the 'id' field for referencing the organizational unit."
          type: string
          maxLength: 191
          minLength: 0
          example: EXt-OU-89347
          nullable: true
        parentOrganizationalUnitId:
          description: "The unique identifier of the parent organizational unit, mutually exclusive with 'parentOrganizationalUnitKey', nullable"
          type: string
          format: uuid
          nullable: true
        parentOrganizationalUnitKey:
          description: "The key of the parent organizational unit, mutually exclusive with 'parentOrganizationalUnitId'"
          type: string
        organizationalUnitTypeId:
          description: 'The unique identifier of the Organizational Unit Type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 0a87380e-690f-418c-a8c6-c70155063235
        organizationalUnitTypeKey:
          description: "Organizational Unit Type key, default available values are 'company', 'department' and 'region' - mutually exclusive with 'organizationalUnitTypeId'"
          type: string
        name:
          description: 'Name of the organizational unit'
          type: string
          maxLength: 191
          minLength: 1
          example: Afdeling
        code:
          description: 'Code of the organizational unit'
          type: string
          maxLength: 191
          minLength: 0
          example: AFD
          nullable: true
        company:
          $ref: '#/components/schemas/PatchOrganizationalUnitRequestBodyCompanyData'
        internalSupervisorId:
          description: 'The unique identifier for the employee set as a supervisor to the Organizational Unit'
          type: string
          format: uuid
          example: 42a384fb-de7e-421c-ba81-2598fb510016
        externalSupervisorId:
          description: 'The unique identifier for the external supervisor set as a supervisor to the Organizational Unit'
          type: string
          format: uuid
          example: 42a384fb-de7e-421c-ba81-2598fb510016
        visitAddress:
          $ref: '#/components/schemas/OrganizationalUnitAddress'
        postalAddress:
          $ref: '#/components/schemas/OrganizationalUnitAddress'
        communications:
          $ref: '#/components/schemas/OrganizationalUnitCommunication'
        dateStart:
          description: 'Start date of the organizational unit, format as YYYY-MM-DD'
          type: string
          format: date
        dateEnd:
          description: 'End date of the organizational unit, format as YYYY-MM-DD, nullable'
          type: string
          format: date
          nullable: true
      type: object
    PatchOrganizationalUnitRequestBodyCompanyData:
      properties:
        legalName:
          description: 'The Legal name of the company'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Visma Verzuim B.V.'
        legalForm:
          $ref: '#/components/schemas/LegalFormEnumOptions'
        normHours:
          description: 'Norm hours of the company'
          type: integer
          example: 40
        relationNumber:
          description: 'The administrative relationnumber of the company (shown in reports)'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        kvkNumber:
          description: 'The registered KVK number of the company'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        vatNumber:
          description: 'The VAT (BTW) number of the company'
          type: string
          maxLength: 191
          minLength: 0
          nullable: true
        uwv:
          $ref: '#/components/schemas/OrganizationalUnitCompanyUwv'
      type: object
    PostOrganizationalUnitRequestBody:
      required:
        - name
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the organizational unit. This key serves as an alternative to the 'id' field for referencing the organizational unit."
          type: string
        employerId:
          description: "Employer ID of the organizational unit, mutually exclusive with 'employerKey'"
          type: string
        employerKey:
          description: "Employer externalKey of the organizational unit, mutually exclusive with 'employerId'"
          type: string
        parentOrganizationalUnitId:
          description: "Parent organizational unit ID of the organizational unit, mutually exclusive with 'parentOrganizationalUnitKey'"
          type: string
        parentOrganizationalUnitKey:
          description: "Parent organizational unit key of the organizational unit, mutually exclusive with 'parentOrganizationalUnitId'"
          type: string
        organizationalUnitTypeId:
          description: "Organizational unit type ID of the organizational unit - mutually exclusive with 'organizationalUnitTypeKey'"
          type: string
        organizationalUnitTypeKey:
          description: "Organizational unit type key of the organizational unit, default values are 'company', 'department' and 'region' - mutually exclusive with 'organizationalUnitTypeId'"
          type: string
        name:
          description: 'Name of the organizational unit'
          type: string
        code:
          description: 'Code of the organizational unit'
          type: string
        companyDoctorId:
          description: "Company doctor ID of the organizational unit. mutually exclusive with 'companyDoctorKey'"
          type: string
        companyDoctorKey:
          description: "Company doctor key of the organizational unit. mutually exclusive with 'companyDoctorId'"
          type: string
        dossierOfficerId:
          description: "Dossier officer ID of the organizational unit. mutually exclusive with 'dossierOfficerKey'"
          type: string
        dossierOfficerKey:
          description: "Dossier officer key of the organizational unit, mutually exclusive with 'dossierOfficerId'"
          type: string
        company:
          $ref: '#/components/schemas/PostOrganizationalUnitRequestBodyCompanyData'
      type: object
    PostOrganizationalUnitRequestBodyCompanyData:
      properties:
        legalName:
          description: 'Legal name of the company'
          type: string
        legalForm:
          $ref: '#/components/schemas/LegalFormEnumOptions'
        normHours:
          description: 'Norm hours of the company'
          type: integer
          example: 40
        relationNumber:
          description: 'Your relation number for the company (shown in reports)'
          type: string
        kvkNumber:
          description: 'KVK number of the company'
          type: string
        vatNumber:
          description: 'VAT number of the company'
          type: string
        uwv:
          $ref: '#/components/schemas/OrganizationalUnitCompanyUwv'
        internalSupervisorId:
          description: 'ID identifier for the employee set as a supervisor to the Organizational Unit'
          type: string
          format: uuid
          example: 42a384fb-de7e-421c-ba81-2598fb510016
        externalSupervisorId:
          description: 'ID identifier for the external supervisor set as a supervisor to the Organizational Unit'
          type: string
          format: uuid
          example: 42a384fb-de7e-421c-ba81-2598fb510016
        contactPerson:
          $ref: '#/components/schemas/ContactPerson'
        visitAddress:
          $ref: '#/components/schemas/OrganizationalUnitAddress'
        postalAddress:
          $ref: '#/components/schemas/OrganizationalUnitAddress'
        communications:
          $ref: '#/components/schemas/OrganizationalUnitCommunication'
        dateStart:
          description: 'Start date, defaults to '
          type: string
          format: date
        dateEnd:
          description: 'End date'
          type: string
          format: date
      type: object
    LegalFormEnumOptions:
      type: string
      enum:
        - sole-proprietorship
        - partnership
        - limited-liability-partnership
        - limited-partnership
        - private-limited-company
        - public-limited-company
        - cooperative-and-mutual-insurance-company
        - foundation
        - association
    OrganizationalUnitCompany:
      properties:
        legalName:
          description: 'Legal name of the company, equivalent to the official name of the organizational unit'
          type: string
          maxLength: 150
          minLength: 1
          example: 'Visma Verzuim B.V.'
        legalForm:
          $ref: '#/components/schemas/LegalFormEnumOptions'
        relationNumber:
          description: 'A relation number identifying the company in systems like invoicing or CRM'
          type: string
          maxLength: 191
          minLength: 0
          example: crm1234
          nullable: true
        normHours:
          description: 'Norm hours per week of the company, used for reports and statistics'
          type: number
          example: 40
        kvkNumber:
          description: 'KVK number of the company'
          type: string
          maxLength: 191
          minLength: 0
          example: '90001354'
          nullable: true
        vatNumber:
          description: 'VAT (BTW) number of the company'
          type: string
          maxLength: 191
          minLength: 0
          example: NL927309349B01
          nullable: true
        uwv:
          $ref: '#/components/schemas/OrganizationalUnitCompanyUwv'
        dossierOfficer:
          $ref: '#/components/schemas/DossierOfficer'
        companyDoctor:
          $ref: '#/components/schemas/CompanyDoctor'
      type: object
    OrganizationalUnitAddress:
      properties:
        uuid:
          description: 'The unique identifier of the OrganizationalUnit address'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 43fafaa2-a5b6-4071-8727-1c982d85f3c5
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the address. This key serves as an alternative to the 'id' field for referencing the address."
          type: string
          maxLength: 191
          minLength: 0
          example: Address-1234
          nullable: true
        migrationKey:
          description: 'The migration key associated with the OrganizationalUnit address'
          type: string
          maxLength: 191
          minLength: 0
          example: old_db-12345
          nullable: true
        country:
          description: 'The country-code of the OrganizationalUnit address in ISO 3166-1 alpha-2 format'
          type: string
          maxLength: 2
          minLength: 2
          example: NL
          nullable: true
        street:
          description: 'The street of the OrganizationalUnit address'
          type: string
          maxLength: 100
          minLength: 0
          example: Demmersweg
          nullable: true
        number:
          description: 'The number with additions of the OrganizationalUnit address'
          type: string
          maxLength: 30
          minLength: 0
          example: 42A
          nullable: true
        postalCode:
          description: 'The postal code of the OrganizationalUnit address.'
          type: string
          maxLength: 20
          minLength: 0
          example: '1234 AB'
          nullable: true
        city:
          description: 'The city of the OrganizationalUnit address'
          type: string
          maxLength: 80
          minLength: 0
          example: Hengelo
          nullable: true
        dateCreated:
          description: 'The date and time that the OrganizationalUnit address was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time that the OrganizationalUnit address was updated'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    OrganizationalUnitCommunication:
      properties:
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the communication. This key serves as an alternative to the 'id' field for referencing the communication."
          type: string
          maxLength: 191
          minLength: 0
          example: comm-65489
          nullable: true
        migrationKey:
          description: 'The internal migration key associated with the OrganizationalUnit communication'
          type: string
          maxLength: 191
          minLength: 0
          example: other-db-ref-904358
          nullable: true
        OrganizationalUnitId:
          description: 'The OrganizationalUnit ID associated with the OrganizationalUnit communication'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: a170752c-8c64-4462-8c43-98713597000b
        type:
          $ref: '#/components/schemas/CommunicationTypeEnumOptions'
        value:
          description: 'The value of the communication method'
          type: string
          maxLength: 191
          minLength: 1
          example: '088 800 8000'
        isPrimary:
          description: 'Whether this is the primary means of communication for this type'
          type: boolean
          example: true
        dateCreated:
          description: 'The date and time that the OrganizationalUnit communication was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The date and time that the OrganizationalUnit communication was last updated'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
      type: object
    OrganizationalUnit:
      properties:
        id:
          description: 'The unique identifier of the organizational unit'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 40b03a3c-e304-4b8f-b4ae-562b315e36f2
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the organizational unit. This key serves as an alternative to the 'id' field for referencing the organizational unit."
          type: string
          maxLength: 191
          minLength: 0
          example: OU_3456
          nullable: true
        migrationKey:
          description: 'The internal migration key of the organizational unit'
          type: string
          maxLength: 191
          minLength: 0
          example: staging-123
          nullable: true
        name:
          description: 'Name of the organizational unit'
          type: string
          maxLength: 150
          minLength: 1
          example: 'IT Department'
        code:
          description: 'Code of the organizational unit'
          type: string
          maxLength: 200
          minLength: 0
          example: IT
          nullable: true
        employer:
          $ref: '#/components/schemas/Employer'
        organizationalUnitType:
          $ref: '#/components/schemas/OrganizationalUnitType'
        parentOrganizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnitWithoutRelations'
        internalSupervisorId:
          description: 'Unique identifier of the User who is assigned as the internal supervisor for the organizational unit.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 40b03a3c-e304-4b8f-b4ae-562b315e36f2
        externalSupervisorId:
          description: 'Unique identifier for the External Supervisor related to the organizational unit'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 40b03a3c-e304-4b8f-b4ae-562b315e36f2
        contactPersons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPerson'
        visitorAddress:
          $ref: '#/components/schemas/OrganizationalUnitAddress'
        postalAddress:
          $ref: '#/components/schemas/OrganizationalUnitAddress'
        communications:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationalUnitCommunication'
        company:
          $ref: '#/components/schemas/OrganizationalUnitCompany'
        dateStart:
          description: 'Start date of the organizational unit in YYYY-MM-DD format'
          type: string
          format: date
          example: '2022-01-23'
        dateEnd:
          description: 'End date of the organizational unit in YYYY-MM-DD format'
          type: string
          format: date
          example: '2030-01-23'
        dateCreated:
          description: 'The datetime of when the organizational unit was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The datetime of when the organizational unit was last-updated in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-01-23 12:34:56'
      type: object
    OrganizationalUnitWithoutRelations:
      properties:
        id:
          description: 'The unique identifier of the organizational unit'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 40b03a3c-e304-4b8f-b4ae-562b315e36f2
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the organizational unit. This key serves as an alternative to the 'id' field for referencing the organizational unit."
          type: string
          maxLength: 191
          minLength: 0
          example: OU_3456
          nullable: true
        migrationKey:
          description: 'The internal migration key of the organizational unit'
          type: string
          maxLength: 191
          minLength: 0
          example: staging-123
          nullable: true
        name:
          description: 'Name of the organizational unit'
          type: string
          maxLength: 150
          minLength: 1
          example: 'IT Department'
        code:
          description: 'Code of the organizational unit'
          type: string
          maxLength: 200
          minLength: 0
          example: IT
          nullable: true
        dateStart:
          description: 'Start date of the organizational unit in YYYY-MM-DD format'
          type: string
          format: date
          example: '2022-01-23'
        dateEnd:
          description: 'End date of the organizational unit in YYYY-MM-DD format'
          type: string
          format: date
          example: '2030-01-23'
        dateCreated:
          description: 'The datetime of when the organizational unit was created in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 01:23:45'
        dateUpdated:
          description: 'The datetime of when the organizational unit was last-updated in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2024-01-23 12:34:56'
      type: object
    OrganizationalUnitWithPossibleRelationToEmployer:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/OrganizationalUnitWithoutRelations'
        -
          properties:
            employer:
              $ref: '#/components/schemas/EmployerWithoutRelations'
          type: object
    OrganizationalUnitType:
      properties:
        id:
          description: 'The unique identifier of the Organizational Unit Type'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: e62251f7-f6e6-45a4-bb39-cdac18444c45
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the organizational unit type. This key serves as an alternative to the 'id' field for referencing the organizational unit type."
          type: string
          maxLength: 191
          minLength: 0
          example: OU-Type-123
          nullable: true
        employer:
          $ref: '#/components/schemas/Employer'
        name:
          description: 'Name of the Organizational Unit Type'
          type: string
          maxLength: 32
          minLength: 1
          example: Afdeling
        color:
          description: 'Color associated with the Organizational Unit Type. Format #RRGGBB'
          type: string
          pattern: '#([A-Z0-9]{6})'
          example: '#FF0000'
        legalEntity:
          description: 'Indicates if it is a legal entity, like companies'
          type: boolean
          example: false
        active:
          description: 'Indicates if the Organizational Unit Type is active'
          type: boolean
          example: true
        dateCreated:
          description: 'Creation datetime of the Organizational Unit Type in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
        dateUpdated:
          description: 'Last update datetime of the Organizational Unit Type in our system'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2020-01-23 12:34:56'
      type: object
    OrganizationalUnitCompanyUwv:
      properties:
        registrationNumber:
          description: "UWV identification number ('aansluitnummer') of the company"
          type: string
        riskCode:
          description: 'UWV risk code of the company'
          type: integer
        sectorId:
          description: 'UWV sector ID of the company'
          type: integer
        payrollTaxIdentificationNumber:
          description: "Payroll tax identification number ('loonheffingsnummer') of the company"
          type: string
      type: object
    RecoveryReason:
      properties:
        id:
          description: 'The ID of the RecoveryReason.'
          type: string
          format: uuid
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the recovery-reason. This key serves as an alternative to the 'id' field for referencing the recovery-reason."
          type: string
        migrationKey:
          description: 'The migration key associated with the RecoveryReason.'
          type: string
        name:
          description: 'The name of the RecoveryReason.'
          type: string
        code:
          description: 'The code assigned to the RecoveryReason.'
          type: string
        isPrimary:
          description: 'Whether this is a primary RecoveryReason or not.'
          type: boolean
      type: object
    GetTaskResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetTaskSortOptions:
      type: string
      enum:
        - externalKey
        - '-externalKey'
        - protocolId
        - '-protocolId'
        - dateCreated
        - '-dateCreated'
        - dateUpdated
        - '-dateUpdated'
        - taskTypeId
        - '-taskTypeId'
        - title
        - '-title'
    ProtocolEnumOptions:
      type: string
      enum:
        - wvp
        - zwangerschap
        - adoptie
        - orgaandonatie
        - zw-erd
        - wga
        - bezwaar-en-beroep
        - reintegratie
        - preventief
        - medisch
        - medisch-preventief
        - frequent-verzuim
        - arbeidsdeskundig-onderzoek
        - afwezigheid
        - budgetcoaching
        - rie
        - pago
        - pmo
        - werkplekonderzoek
        - training
        - vitaliteit
        - zorgcoaching
        - consultancy
        - jobcoaching
        - act-meting
        - loopbaan-begeleiding
        - assessment
        - outplacement
        - overname-dienstverband
        - spoor-3
        - ontwikkeladvies
        - spoor-2
        - werknemer
        - geboorteverlof
        - verzuim-zw-erd
        - bedrijfsdossier
        - betaald-ouderschapsverlof
    TaskTypeEnumOptions:
      type: string
      enum:
        - order
        - legal
        - informative
        - uwv
        - evaluation
    TaskTriggerEnumOptions:
      type: string
      enum:
        - dossier-start
        - report-date
        - absence-start
        - zw-erd-first-sick-day
        - task-condition
        - pregnancy-date-of-birth
        - pregnancy-expected-date-of-birth
        - expected-recovery-date
        - days-after-employment-start
        - date
        - end-probation-period
        - first-working-day
        - employee-profile-start-date
        - employee-profile-end-date
        - date-intake-spoor-2
        - actual-end-date-pregnancy-leave
        - date-of-termination-employment-contract
    Task:
      properties:
        id:
          description: 'The unique identifier of the task.'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 87320886-c919-4cfa-81c7-e978d35da182
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the task. This key serves as an alternative to the 'id' field for referencing the task."
          type: string
          maxLength: 191
          minLength: 0
          example: EXT-KEY-4389057
          nullable: true
        migrationKey:
          description: 'The internal key used by migrations of the task.'
          type: string
          maxLength: 191
          minLength: 0
          example: MIG-KEY-4854
          nullable: true
        title:
          description: 'The title of the task.'
          type: string
          maxLength: 191
          minLength: 1
          example: 'Opstellen Plan van Aanpak'
        description:
          description: 'The description of the task.'
          type: string
          maxLength: 65535
          minLength: 0
          example: 'Werknemers en werkgevers maken samen het Plan van aanpak. Hierin staan afspraken over wat de werknemer gaat doen om weer aan het werk te kunnen gaan'
          nullable: true
        protocolId:
          description: 'The protocol ID associated with the task.'
          type: string
        code:
          description: 'The code associated with the task.'
          type: string
          maxLength: 191
          minLength: 0
          example: PVA
          nullable: true
        invoiceDescription:
          description: 'The invoice description of the task.'
          type: string
          maxLength: 191
          minLength: 0
          example: 'Opstellen Plan van Aanpak'
          nullable: true
        templateId:
          description: 'The template ID associated with the task.'
          type: string
        taskType:
          $ref: '#/components/schemas/TaskTypeEnumOptions'
        taskTrigger:
          $ref: '#/components/schemas/TaskTriggerEnumOptions'
        extraTaskTriggerValue:
          description: 'The extra task trigger value associated with the task.'
          type: string
        taskStartday:
          description: "Number of days before or after the Task should be triggered (configured in taskTrigger). Negative number means before, positive number means after. So, Tasktrigger is 'dossier-start' and 'taskStartDay' = 5, means: this task is generated 5 days after the start of the dossier."
          type: integer
          example: 5
        duration:
          description: 'The duration in days of the task.'
          type: integer
          example: 7
        requestAtAbsence:
          description: 'Indicates if the task is requested at absence. (vrije taak: Aanvraagmogelijkheid bij ziekmelden)'
          type: boolean
        completedDirectly:
          description: 'Indicates if the task is completed immediately after creation.'
          type: boolean
        removeOnClosingDossier:
          description: 'Indicates if the task is completed on closing the dossier.'
          type: boolean
        taskNameForNote:
          description: 'Indicates if the task name is used as the title for the note.'
          type: boolean
        active:
          description: 'Indicates if the task is active.'
          type: boolean
        changeable:
          description: 'Indicates if the task is changeable.'
          type: boolean
        cannotDelay:
          description: 'Indicates if the task cannot be delayed/postponed.'
          type: boolean
        extendEmployment:
          description: 'Indicates if the task extends employment.'
          type: boolean
        automaticTask:
          description: 'Indicates if the task is automatic.'
          type: boolean
        triggerAtMainDossier:
          description: 'Indicates if the task is triggered at main dossier.'
          type: boolean
        triggerAtEmployeeDossier:
          description: 'Indicates if the task is triggered at employee dossier.'
          type: boolean
        triggerAtPartialRecovery:
          description: 'Indicates if the task is triggered at partial recovery.'
          type: boolean
        triggerWhenCompiled:
          description: '(re)trigger task for compiled dossiers.'
          type: boolean
        triggerAtFullRecovery:
          description: 'Indicates if the task is triggered at full recovery.'
          type: boolean
        price:
          description: 'The price of the task.'
          type: number
        normTime:
          description: 'The norm time of the task.'
          type: integer
        rate:
          description: 'The rate of the task.'
          type: number
        vatId:
          $ref: '#/components/schemas/VatPercentageEnumOptions'
        uwvMessageId:
          description: 'The UWV message ID associated with the task.'
          type: string
        dateDeleted:
          description: 'The date and time that the task was deleted.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateCreated:
          description: 'The date and time that the task was created.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
        dateUpdated:
          description: 'The date and time that the task was last updated.'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      type: object
    GetUserResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMetaInformation'
      type: object
    GetUserSortOptions:
      type: string
      enum:
        - dateStart
        - '-dateStart'
        - dateEnd
        - '-dateEnd'
        - externalKey
        - '-externalKey'
        - dateUpdated
        - '-dateUpdated'
        - dateCreated
        - '-dateCreated'
    GetUserIncludeOptions:
      type: string
      enum:
        - arboRole
        - employerRole
        - person
        - authorizations
    UserPerson:
      required:
        - initials
        - surname
        - gender
      properties:
        mail:
          description: 'The e-mail address of the user'
          type: string
          format: email
          example: user1@mail.com
        phone:
          description: 'The phonenumber of the user'
          type: string
          example: '06123456789'
        initials:
          description: 'The initials of the user'
          type: string
          example: J.K.
        surname:
          description: 'The lastname of the user'
          type: string
          example: Doe
        nickname:
          description: 'The firstname of the user'
          type: string
          example: Jan
        prefix:
          description: 'The prefix of the namen of the user'
          type: string
          example: van
        gender:
          $ref: '#/components/schemas/GenderEnumOptions'
      type: object
    PatchUserRequestBody:
      properties:
        id:
          description: 'The unique identifier of the user to mutate'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 1404eaf8-419a-4e00-ada1-2e5dc044ae80
        externalkey:
          description: 'The key known in an external system associated with the user'
          type: string
          maxLength: 191
          minLength: 0
          example: 98798779@12
          nullable: true
        roleId:
          description: 'The unique identifier of the role associated with the user'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 1a4b5a19-7ddf-4cbc-9a4e-7cd05faf195f
        username:
          type: string
          maxLength: 191
          minLength: 1
          example: my-personal-username
        active:
          description: 'Indication if the user account is active'
          type: boolean
          example: true
        hasSystemAccess:
          description: 'Indicates whether the user is allowed to log in to the system. For example, machine users may not require login access.'
          type: boolean
          example: false
        dateStart:
          description: 'The start date of the user account in format YYYY-MM-DD. Defaults to NOW()'
          type: string
          format: date
        dateEnd:
          description: 'The end date of the user account in format YYYY-MM-DD. Defaults to NULL'
          type: string
          format: date
          nullable: true
        employerId:
          description: 'The unique identifier of the employer for assigning the user to a specific employer'
          type: string
          format: uuid
        belongsToEmployeeId:
          description: 'This will associate the user with an employee and prevent the user from being able to see themselves as an employee'
          type: string
          format: uuid
        belongsToEmployeeKey:
          description: 'This will associate the user with an employee and prevent the user from being able to see themselves as an employee'
          type: string
          example: externalEmployeeKey
        employeeId:
          description: 'Key for generating personalia from employee data'
          type: string
          format: uuid
        employeeKey:
          description: 'Key for generating personalia from employee data'
          type: string
          example: employee-unique-identifier
        ssoKey:
          description: 'SSO key unique in scope for partner/employer sso solution, not globally unique'
          type: string
          example: nfr5ffg8jdnksDf3
        person:
          $ref: '#/components/schemas/UserPerson'
      type: object
    PostUserRequestBody:
      properties:
        externalkey:
          description: 'The key known in an external system to identify the user'
          type: string
          maxLength: 191
          minLength: 0
          example: 98798779@12
          nullable: true
        roleId:
          description: 'The unique identifier of the role associated with the user'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
        username:
          type: string
          maxLength: 191
          minLength: 1
          example: my-username
        active:
          description: 'Indication if the user account is active'
          type: boolean
          example: true
        hasSystemAccess:
          description: 'Indicates whether the user is allowed to log in to the system. For example, machine users may not require login access.'
          type: boolean
          example: false
        dateStart:
          description: 'The startdate of the user account in format YYYY-MM-DD. Defaults to NOW()'
          type: string
          format: date
        dateEnd:
          description: 'The end date of the user account in format YYYY-MM-DD. Defaults to NULL'
          type: string
          format: date
          nullable: true
        employerId:
          description: 'The unique identifier of the employer for assigning the user to a specific employer'
          type: string
          format: uuid
        belongsToEmployeeId:
          description: 'This will associate the user with an employee and prevent the user from being able to see themselves as an employee'
          type: string
          format: uuid
        belongsToEmployeeKey:
          description: 'This will associate the user with an employee and prevent the user from being able to see themselves as an employee'
          type: string
          example: externalEmployeeKey
        employeeId:
          description: 'The unique identifier of an employee for generating personalia from employee data'
          type: string
          format: uuid
        employeeKey:
          description: 'Key of an employee for generating personalia from employee data'
          type: string
          example: employee-unique-key
        ssoKey:
          description: 'SSO key unique in scope for partner/employer sso solution, not globally unique'
          type: string
          example: nfr5ffg8jdnksDf3
        sendWelcomeEmail:
          description: "By default no email is sent to new users to invite them to set up their account (set password and 2FA). Set this property to 'true' to automatically send the invitation email"
          type: boolean
          example: true
        person:
          $ref: '#/components/schemas/UserPerson'
      type: object
    UserAuthorizationLevelEnumOptions:
      type: string
      enum:
        - authorized
        - authorized-plus-children
        - not-authorized
        - authorized-signals-only
        - authorized-viewing-only
    UserAuthorizationCleaningTypeEnumOptions:
      type: string
      enum:
        - clean-all
        - clean-api-created
    AuthorizationOrganizationalUnit:
      required:
        - authLevel
      properties:
        id:
          description: 'The unique identifier of the Organization Unit to authorize for.'
          type: string
          format: uuid
          example: c75da545-26c8-43a9-9b0d-43b224f1ad74
        key:
          description: 'The key associated with the organizational unit to authorize for'
          type: string
          example: 1511_interface@155
        authLevel:
          $ref: '#/components/schemas/UserAuthorizationLevelEnumOptions'
        childLevel:
          $ref: '#/components/schemas/UserAuthorizationLevelEnumOptions'
      type: object
    AuthorizationEmployments:
      properties:
        id:
          description: 'The unique identifier of the employment to authorize for'
          type: string
          format: uuid
          example: e0881bc3-db73-4cd8-8a6b-831808f343e0
        key:
          description: 'The key of an employment to authorize for'
          type: string
          example: 1511_interface@155
        authLevel:
          $ref: '#/components/schemas/UserAuthorizationLevelEnumOptions'
      type: object
    AuthorizationEmployers:
      properties:
        id:
          description: 'The unique identifier of the employer to authorize for'
          type: string
          format: uuid
          example: 0cbbdccc-c12d-42f9-9d4c-02716ea30fcc
        key:
          description: 'The key of an employer to authorize for'
          type: string
          example: 1511_interface@155
        authLevel:
          $ref: '#/components/schemas/UserAuthorizationLevelEnumOptions'
      type: object
    UserAuthorization:
      properties:
        cleaning:
          $ref: '#/components/schemas/UserAuthorizationCleaningTypeEnumOptions'
        organizationalUnits:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationOrganizationalUnit'
        employments:
          required:
            - authLevel
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationEmployments'
        employers:
          required:
            - authLevel
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationEmployers'
      type: object
    PostUserAuthorizationsRequestBody:
      properties:
        id:
          description: 'The unique identifier of the user where the authorization is set for'
          type: string
          format: uuid
        externalkey:
          description: 'The key of an external system, associated with the user where the authorization is set for'
          type: string
          example: 98798779@12
        authorization:
          $ref: '#/components/schemas/UserAuthorization'
      type: object
    ArboAuthorizationLevelEnumOptions:
      type: string
      enum:
        - authorized
        - authorized-plus-children
        - not-authorized
        - authorized-signals-only
        - authorized-viewing-only
        - black-authorization
    ArboAuthorizationResource:
      properties:
        organizationalUnitId:
          description: 'The unique identifier of the organizational unit, if applicable'
          type: string
          format: uuid
        employerId:
          description: 'The unique identifier of the employer, if applicable'
          type: string
          format: uuid
        level:
          $ref: '#/components/schemas/ArboAuthorizationLevelEnumOptions'
      type: object
    EmployerAuthorizationResource:
      properties:
        organizationalUnitId:
          description: 'The unique identifier of the organizational unit, if applicable'
          type: string
          format: uuid
        employmentId:
          description: 'The unique identifier of the employment, if applicable'
          type: string
          format: uuid
        level:
          $ref: '#/components/schemas/ArboAuthorizationLevelEnumOptions'
      type: object
    User:
      properties:
        id:
          description: 'The unique identifier of the user'
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          example: 029ff05c-6852-4a65-b6b9-50cb2dd1afea
        username:
          description: 'Username of the user'
          type: string
          maxLength: 191
          minLength: 1
          example: user123
        user_type_id:
          description: 'User type id of the user. Obtainable by the list of usertype'
          type: integer
          example: 15
        arboRole:
          $ref: '#/components/schemas/ArboRole'
        person:
          $ref: '#/components/schemas/MasterPerson'
        masterPerson:
          $ref: '#/components/schemas/MasterPerson'
        dossiersCount:
          description: 'Number of dossiers associated with the user. (calculated)'
          type: integer
          example: 321
        tasksCount:
          description: 'Number of tasks associated with the user. (calculated)'
          type: integer
          example: 50
      type: object
    UserTypeEnumOptions:
      type: string
      enum:
        - internal
        - external
        - employer
    UserAuthorizationResource:
      properties:
        id:
          description: 'The unique identifier of the user'
          type: string
          format: uuid
        externalKey:
          description: 'The key of an external system to identify the user'
          type: string
        username:
          description: 'Username of the user'
          type: string
        type:
          $ref: '#/components/schemas/UserTypeEnumOptions'
        authorizations:
          oneOf:
            -
              $ref: '#/components/schemas/ArboAuthorizationResource'
            -
              $ref: '#/components/schemas/EmployerAuthorizationResource'
      type: object
    UserResource:
      properties:
        id:
          description: 'The unique identifier of the user'
          type: string
          format: uuid
        externalKey:
          description: "An identifier provided by an external system that uniquely specifies the user. This key serves as an alternative to the 'id' field for referencing the user."
          type: string
        ssoKey:
          description: 'The SSO key of the user'
          type: string
          maxLength: 191
          nullable: true
        username:
          description: 'Username of the user'
          type: string
        type:
          $ref: '#/components/schemas/UserTypeEnumOptions'
        arboRole:
          $ref: '#/components/schemas/ArboRole'
        employerRole:
          $ref: '#/components/schemas/EmployerRole'
        person:
          $ref: '#/components/schemas/MasterPerson'
        welcomeEmailSent:
          description: 'Indicates if an email was sent to the user to setup their account'
          type: boolean
        fullyAuthorized:
          description: 'Indicates if the user has root authorization which supersedes all other authorizations'
          type: boolean
        isActive:
          description: 'Indicates if the user is active'
          type: boolean
        isDeleted:
          description: 'Indicates if the user is deleted'
          type: boolean
        dateStart:
          description: 'The date when the user started'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2023-10-01 12:00:00'
          nullable: true
        dateEnd:
          description: 'The date when the user ended'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2023-10-01 12:00:00'
          nullable: true
        dateCreated:
          description: 'The date and time the user was created'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2023-10-01 12:00:00'
        dateUpdated:
          description: 'The date and time the user was last updated'
          type: string
          pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
          example: '2023-10-01 12:00:00'
        authorizations:
          description: 'List of authorizations for the user'
          type: array
          items:
            oneOf:
              -
                $ref: '#/components/schemas/ArboAuthorizationResource'
              -
                $ref: '#/components/schemas/EmployerAuthorizationResource'
      type: object
tags:
  -
    name: 'Absence Reasons'
    description: 'Absence Reasons'
  -
    name: Appointments
    description: Appointments
  -
    name: Authentication
    description: Authentication
  -
    name: Health
    description: Health
  -
    name: 'User Roles'
    description: 'User Roles'
  -
    name: 'Company Doctors'
    description: 'Company Doctors'
  -
    name: ContactPerson
    description: ContactPerson
  -
    name: EmployerContracts
    description: EmployerContracts
  -
    name: AbsenceCourse
    description: AbsenceCourse
  -
    name: Dossier
    description: Dossier
  -
    name: DossierContent
    description: DossierContent
  -
    name: 'Dossier External Resource'
    description: 'Dossier External Resource'
  -
    name: 'Dossier Task'
    description: 'Dossier Task'
  -
    name: 'Return to work advice'
    description: 'Return to work advice'
  -
    name: 'Dossier Officers'
    description: 'Dossier Officers'
  -
    name: Employee
    description: Employee
  -
    name: Employer
    description: Employer
  -
    name: 'Employer Divisions'
    description: 'Employer Divisions'
  -
    name: Employments
    description: Employments
  -
    name: 'External Supervisor'
    description: 'External Supervisor'
  -
    name: Operation
    description: Operation
  -
    name: 'Billable Operation'
    description: 'Billable Operation'
  -
    name: 'Organizational Units'
    description: 'Organizational Units'
  -
    name: Task
    description: Task
  -
    name: User
    description: User
