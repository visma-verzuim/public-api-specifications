openapi: 3.0.0
info:
  title: Public API Documentation
  version: 1.0.0
paths:
  /api/public/absence-reason:
    get:
      tags:
        - Absence Reasons
      summary: Get a list of absence reasons
      operationId: 576aba442c23103ba78ed32a075c88ad
      parameters:
        - name: filter[id]
          in: query
          description: Filter by absence reason UUID
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by absence reason external key
          schema:
            type: string
        - name: filter[code]
          in: query
          description: Filter by absence reason code (code is user-defined)
          schema:
            type: string
        - name: filter[isPrimary]
          in: query
          description: Returns only primary absence reasons when true
          schema:
            type: boolean
        - name: sort[code]
          in: query
          description: Sorts results by absence reason code
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sorts results by absence reason external key
          schema:
            type: string
        - name: sort[name]
          in: query
          description: Sorts results by absence reason name (this is the default sorting method)
          schema:
            type: string
      responses:
        '200':
          description: A list of absence reasons that match the given filters
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AbsenceReason'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/absence-reason?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/absence-reason?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/absence-reason?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/absence-reason?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/absence-reason?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
  /auth/partner/token:
    post:
      tags:
        - Authentication
      summary: Obtain an access token token using the client id and secret
      operationId: 71e458c7c807599c8e8f5cd40d06813f
      requestBody:
        description: Token authentication request body
        required: true
        content:
          application/json:
            schema:
              properties:
                grant_type:
                  type: string
                  example: client_credentials
                client_id:
                  type: string
                  example: 639cb341-b25c-4b72-acee-e0ac2be5c2dd
                client_secret:
                  type: string
                  example: your_client_secret
                scope:
                  properties:
                    absence:
                      type: array
                      items:
                        type: string
                      example:
                        - read
                        - create
                    employee:
                      type: array
                      items:
                        type: string
                      example:
                        - read
                  type: object
              type: object
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthBadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /health:
    get:
      tags:
        - Health
      summary: Health check
      operationId: a7bed433e688cc04ae6b776639978130
      responses:
        '200':
          description: Successful response
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/arbo-role:
    get:
      tags:
        - User Roles
      summary: Get a list of arbo roles that can be assigned to users
      operationId: 8a4f67afcabe86d1e2551b17e244a1a4
      parameters:
        - name: filter[id]
          in: query
          description: Filter arbo roles by uuid
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter arbo roles by external key
          required: false
          schema:
            type: string
        - name: filter[active]
          in: query
          description: Filter arbo roles by active status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A list of available arbo roles
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ArboRole'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/company-doctor:
    get:
      tags:
        - Company Doctors
      summary: Get a list of company doctors
      operationId: 51aa859671c45bf1b1a9ea4054c0e303
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[username]
          in: query
          description: Filter by username
          schema:
            type: string
      responses:
        '200':
          description: A list of company doctors
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompanyDoctor'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/employer-contract/{id}:
    delete:
      tags:
        - EmployerContracts
      summary: Delete an employer contract
      description: Deletes an employer contract based on the ID.
      operationId: 1d33309d5f1cda6e544adcc608069a85
      parameters:
        - name: id
          in: path
          description: Unique identifier of the employer contract to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Employer contract successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/configuration/contract/contract-type:
    get:
      tags:
        - Contracts
      summary: Get a list of contract types that can be applied to employer contracts
      operationId: 9d6231ab25b87de5d323c3c5e7328c43
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[active]
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: filter[search]
          in: query
          description: Performs a 'LIKE %value%' query on the 'name' and 'code' fields
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by externalKey
          schema:
            type: string
        - name: filter[type]
          in: query
          description: Filter by contract type type
          schema:
            type: string
            enum:
              - custom
              - base
        - name: sort
          in: query
          description: sort results by a field
          schema:
            type: string
            enum:
              - code
              - name
              - dateStart
      responses:
        '200':
          description: A list of contract types
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContractType'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/employer-contract:
    get:
      tags:
        - EmployerContracts
      summary: Get a list of employer contracts
      operationId: d2de932de301766d42bd220185f26257
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[employerId]
          in: query
          description: Filter by employer uuid
          schema:
            type: string
        - name: filter[employerKey]
          in: query
          description: Filter by employer external key
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[dateStartFrom]
          in: query
          description: Filter Employer Contracts by start date (Employer Contracts that start on or after this date)
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateStartUntil]
          in: query
          description: Filter Employer Contracts by start date (Employer Contracts that start on or before this date)
          schema:
            type: string
            format: date-time
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter Employer Contracts by update date (Employer Contracts that have been updated on or after this date)
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter Employer Contracts by update date (Employer Contracts that have been updated on or before this date)
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateEndFrom]
          in: query
          description: Filter Employer Contracts by end date (Employer Contracts that end on or after this date)
          schema:
            type: string
            format: date-time-offset
        - name: filter[dateEndFromOrNull]
          in: query
          description: Retrieve Employer Contracts that end after this date or have no end date, i.e. all active contracts on this date.
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateEndUntil]
          in: query
          description: Filter Employer Contracts by end date (Employer Contracts that end on or before this date)
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[status]
          in: query
          description: Filter by status
          schema:
            type: string
            enum:
              - active
              - ended
              - blocked
        - name: include[contractType]
          in: query
          description: Include the contract type in the output
          schema:
            type: string
        - name: include[serviceType]
          in: query
          description: Include the service type (only for service contracts) in the output
          schema:
            type: string
        - name: include[employer]
          in: query
          description: Include the employer in the output
          schema:
            type: string
      responses:
        '200':
          description: A list of service types
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contract'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
    post:
      tags:
        - EmployerContracts
      summary: Create an employer contract
      operationId: 929692eede64bb5d224d034f223326bb
      requestBody:
        description: Employer Contract data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmployerContractRequestBody'
      responses:
        '201':
          description: Employer successfully created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EmployerContract'
                  - $ref: '#/components/schemas/EmployerServiceContract'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - EmployerContracts
      summary: Update an existing employer contract
      description: Update an Employer Contract by applying changes to an existing contract.
      operationId: 774828c5e7ed6d31e0fff89e6ad28f81
      requestBody:
        description: Employer Contract data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployerContractRequestBody'
      responses:
        '200':
          description: Employer successfully updated
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EmployerContract'
                  - $ref: '#/components/schemas/EmployerServiceContract'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/configuration/contract/partnership:
    get:
      tags:
        - Contracts
      summary: Get a list of partnerships that can be applied to employer contracts
      operationId: 5b3391c9260f317b21be24a9aef713ee
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[active]
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: filter[default]
          in: query
          description: Filter by 'default' status
          schema:
            type: boolean
        - name: filter[externalKey]
          in: query
          description: Filter by externalKey
          schema:
            type: string
        - name: filter[search]
          in: query
          description: Performs a 'LIKE %value%' search on the 'name' field
          schema:
            type: string
        - name: sort
          in: query
          description: sort results by a field
          schema:
            type: string
            enum:
              - name
              - dateCreated
      responses:
        '200':
          description: A list of partnerships
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Partnership'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/configuration/contract/service-type:
    get:
      tags:
        - Contracts
      summary: Get a list of service types that can be applied to employer contracts
      operationId: 6e79071185d7184079fecfd59284097b
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[active]
          in: query
          description: Filter by status
          schema:
            type: boolean
      responses:
        '200':
          description: A list of service types
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceType'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/absence-course/{id}:
    delete:
      tags:
        - AbsenceCourse
      summary: Delete an absence course
      description: Deletes an absence course based on the ID. This operation also updates the status of a dossier.
      operationId: 96de61b08511227bba92eae33e198909
      parameters:
        - name: id
          in: path
          description: Unique identifier of the absence course to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Absence course successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/absence-course:
    get:
      tags:
        - AbsenceCourse
      summary: Get a list of absence courses
      operationId: a4e6d75f2d3f39a2a470d55c3e258a34
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific absence course
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: filter[dossierKey]
          in: query
          description: Filter by the external key of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employeeId]
          in: query
          description: Filter by the UUID of a specific employee
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of a specific employment
          schema:
            type: string
        - name: filter[absenceReasonId]
          in: query
          description: Filter by the UUID of a specific absence reason
          schema:
            type: string
        - name: filter[employeeNumber]
          in: query
          description: Filter by an employee's employee number
          schema:
            type: string
        - name: filter[dateStartFrom]
          in: query
          description: Filter by dateStart, combine 'dateStartFrom' and 'dateStartUntil' to filter by a range
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateStartUntil]
          in: query
          description: Filter by dateStart, combine 'dateStartFrom' and 'dateStartUntil' to filter by a range
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateEndFrom]
          in: query
          description: Filter by dateEnd, combine 'dateEndFrom' and 'dateEndUntil' to filter by a range
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateEndUntil]
          in: query
          description: Filter by dateEnd, combine 'dateEndFrom' and 'dateEndUntil' to filter by a range
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by dateUpdated, combine 'dateUpdatedStart' and 'dateUpdatedUntil' to filter by a range
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter by dateUpdated, combine 'dateUpdatedFrom' and 'dateUpdatedUntil' to filter by a range
          schema:
            type: string
            format: date-time-offset
          example: '2024-01-01T12:34:56+01:00'
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of AbsenceCourses
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AbsenceCourse'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - AbsenceCourse
      summary: Create an absence course
      description: 'An AbsenceCourse is an event within an absence dossier: an employee is reported sick, is reported partially or fully recovered, etc. This endpoint starts a new dossier or automagically adds the absence to an existing dossier'
      operationId: 5a1232c1a483b7bebb4eeb342c0d4031
      requestBody:
        description: Absence course data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAbsenceCourseRequestBody'
      responses:
        '201':
          description: Absence course successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbsenceCourse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - AbsenceCourse
      summary: Update an existing absence course
      description: Update an AbsenceCourse by applying changes to an existing course.
      operationId: a6408eaab6a45519e4ab7a0f67e5bb5e
      requestBody:
        description: Absence course data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAbsenceCourseRequestBody'
      responses:
        '200':
          description: Absence course successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbsenceCourse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/{id}:
    delete:
      tags:
        - Dossier
      summary: Delete a dossier
      description: Deletes a dossier based on the ID.
      operationId: 7e50eaf4e937f43214a52f2224d4e601
      parameters:
        - name: id
          in: path
          description: Unique identifier of the dossier to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Dossier successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/configuration/dossier/document-types:
    get:
      tags:
        - DossierContent
      summary: Get a list of document types that can be applied to dossier content
      operationId: f2a2f0654387ab3afbf2c346127cced0
      parameters:
        - name: filter[id]
          in: query
          description: Filter by the document type's UUID
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by the document type's external key
          required: false
          schema:
            type: string
        - name: filter[name]
          in: query
          description: Filter by the document type's name
          required: false
          schema:
            type: string
        - name: filter[code]
          in: query
          description: Filter by the document type's code
          required: false
          schema:
            type: string
        - name: filter[communicateWithEmployee]
          in: query
          description: Filter by communicateWithEmployee to get document types
          required: false
          schema:
            type: boolean
        - name: filter[reviewable]
          in: query
          description: Filter by reviewable to get document types
          required: false
          schema:
            type: boolean
        - name: filter[isMedical]
          in: query
          description: Filter by isMedical to get document types
          required: false
          schema:
            type: boolean
        - name: filter[isAbsence]
          in: query
          description: Filter by isAbsence to get document types
          required: false
          schema:
            type: boolean
        - name: filter[isHr]
          in: query
          description: Filter by isHr to get document types
          required: false
          schema:
            type: boolean
        - name: filter[feedbackToDossier]
          in: query
          description: Filter by feedbackToDossier to get document types
          required: false
          schema:
            type: boolean
        - name: filter[forceDiagnose]
          in: query
          description: Filter by forceDiagnose to get document types
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A list of document types
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierDocumentType'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/document-types?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/document-types?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/document-types?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/document-types?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/document-types?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/configuration/dossier/note-types:
    get:
      tags:
        - DossierContent
      summary: Get a list of note types that can be applied to dossier content
      operationId: df9087f85a5efc49470eabee3e5bc567
      parameters:
        - name: filter[id]
          in: query
          description: Filter by the note type's UUID
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by the note type's external key
          required: false
          schema:
            type: string
        - name: filter[name]
          in: query
          description: Filter by the note type's name
          required: false
          schema:
            type: string
        - name: filter[code]
          in: query
          description: Filter by the note type's code
          required: false
          schema:
            type: string
        - name: filter[isMedical]
          in: query
          description: Filter by the note type's medical status
          required: false
          schema:
            type: boolean
        - name: filter[isMedicalConfidential]
          in: query
          description: Filter by the note type's medical confidentiality status
          required: false
          schema:
            type: boolean
        - name: filter[isAbsence]
          in: query
          description: Filter by the note type's absence status
          required: false
          schema:
            type: boolean
        - name: filter[isHr]
          in: query
          description: Filter by the note type's HR status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A list of note types
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierNoteType'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/note-types?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/note-types?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/note-types?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/note-types?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/note-types?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/configuration/dossier/upload-types:
    get:
      tags:
        - DossierContent
      summary: Get a list of upload types that can be applied to dossier content
      operationId: b6c87240c5fa64e09c02711f38930c98
      parameters:
        - name: filter[id]
          in: query
          description: Filter by the upload type's UUID
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by the upload type's external key
          required: false
          schema:
            type: string
        - name: filter[name]
          in: query
          description: Filter by the upload type's name
          required: false
          schema:
            type: string
        - name: filter[code]
          in: query
          description: Filter by the upload type's code
          required: false
          schema:
            type: string
        - name: filter[communicateWithEmployee]
          in: query
          description: Filter by communicateWithEmployee to get upload types
          required: false
          schema:
            type: boolean
        - name: filter[isMedical]
          in: query
          description: Filter by isMedical to get upload types
          required: false
          schema:
            type: boolean
        - name: filter[isAbsence]
          in: query
          description: Filter by isAbsence to get upload types
          required: false
          schema:
            type: boolean
        - name: filter[isHr]
          in: query
          description: Filter by isHr to get upload types
          required: false
          schema:
            type: boolean
        - name: filter[feedbackToDossier]
          in: query
          description: Filter by feedbackToDossier to get upload types
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A list of upload types
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierUploadType'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/upload-types?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/upload-types?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/upload-types?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/upload-types?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/configuration/dossier/upload-types?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/dossier/content/document/{id}:
    delete:
      tags:
        - DossierContent
      summary: Delete a document
      description: Deletes a document based on the ID.
      operationId: d3daeadd190687cfc2be594d6377efab
      parameters:
        - name: id
          in: path
          description: Unique identifier of the document to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/documents:
    get:
      tags:
        - DossierContent
      summary: Get a list of documents that can be applied to dossier content
      operationId: a1c67fe8683a5cca5e58a720482f231a
      parameters:
        - name: filter[id]
          in: query
          description: Filter by the document's id
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by the document's external key
          required: false
          schema:
            type: string
        - name: filter[title]
          in: query
          description: Filter by the document's title
          required: false
          schema:
            type: string
        - name: filter[forBothParties]
          in: query
          description: Filter by the document's forBothParties status
          required: false
          schema:
            type: boolean
        - name: filter[inReview]
          in: query
          description: Filter by the document's inReview status
          required: false
          schema:
            type: boolean
        - name: filter[isConcept]
          in: query
          description: Filter by the document's concept status
          required: false
          schema:
            type: boolean
        - name: filter[dossierId]
          in: query
          description: Filter by the document's belonging to this dossierId
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the document's updated date. All records from this date onwards will be returned
          required: false
          schema:
            type: string
            format: date-time
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter by the document's updated date. All records up to and including this date will be returned
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of documents
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierDocumentResource'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/document?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/document?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/document?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/document?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/document?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/dossier/content/document/{uuid}:
    patch:
      tags:
        - DossierContent
      summary: Update an existing document
      description: Update an existing document belonging to a dossier
      operationId: d100bf69eba0821956bad0d1310ad1cb
      parameters:
        - name: uuid
          in: path
          description: The uuid of the document
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The document data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierDocumentRequestBody'
      responses:
        '200':
          description: The document was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierDocumentResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/document:
    post:
      tags:
        - DossierContent
      summary: Create a new document
      description: Create a new document for a dossier
      operationId: b607c22f4d20f70ce5ef77db0327b1ec
      requestBody:
        description: The document data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierDocumentRequestBody'
      responses:
        '201':
          description: The document was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierDocumentResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - DossierContent
      summary: Update an existing document
      description: Update an existing document belonging to a dossier
      operationId: 874a67d94527dab510748f86a7fbe666
      requestBody:
        description: The document data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierDocumentRequestBody'
      responses:
        '200':
          description: The document was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierDocumentResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/external-resource/{id}:
    delete:
      tags:
        - Dossier External Resource
      summary: Delete a dossier external resource
      operationId: 90b76bf6096cd0762a64122aaeacd497
      parameters:
        - name: id
          in: path
          description: The ID of the external resource to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Dossier external resource successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier External Resource
      summary: Update an external resource with ID
      description: Update an external resource associated with a dossier using its ID
      operationId: 60c11360c1f9793b3fe54bb5a7ca4d56
      parameters:
        - name: id
          in: path
          description: Unique identifier of the external resource
          required: true
          schema:
            type: string
      requestBody:
        description: Dossier external resource data for updating a dossier external resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierExternalResourceRequestBody'
      responses:
        '200':
          description: Dossier external resource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/external-resource:
    get:
      tags:
        - Dossier External Resource
      summary: Get a list of external resources
      operationId: a7e150f10abaf5652fa6c1ddc870dc7d
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific external resource
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by the external key of the external resource
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: sort[name]
          in: query
          description: Sort by name
          schema:
            type: string
      responses:
        '200':
          description: A List of Dossier external resources that match the given filters
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierExternalResourceResource'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: http://localhost/api/public/external-resource?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: http://localhost/api/public/external-resource?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: http://localhost/api/public/external-resource?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: http://localhost/api/public/external-resource?page[size]=25
                      next:
                        type: string
                        format: uri
                        example: http://localhost/api/public/external-resource?page[number]=1&page[size]=25
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 100
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 4
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier External Resource
      summary: Create an external resource
      description: Create an external resource associated with a dossier
      operationId: 6013b83aff372a6d2aa5e03bea5e5165
      requestBody:
        description: Dossier external resource data for creating a new dossier external resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierExternalResourceRequestBody'
      responses:
        '201':
          description: Dossier external resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier External Resource
      summary: Update an external resource
      description: Update an external resource associated with a dossier by providing either its 'id' or 'key' through the request body
      operationId: d2013dfdef986f2eb2a7566d439f2b03
      requestBody:
        description: Dossier external resource data for updating a dossier external resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierExternalResourceRequestBody'
      responses:
        '200':
          description: Dossier external resource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/{dossierId}/external-resource:
    post:
      tags:
        - Dossier External Resource
      summary: Create an external resource
      description: Create an external resource associated with a dossier
      operationId: 1a4665b8e70c11215f96417854e69501
      parameters:
        - name: dossierId
          in: path
          description: Unique identifier of the dossier the external resource belongs to.
          required: true
          schema:
            type: string
      requestBody:
        description: Dossier external resource data for creating a new dossier external resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierExternalResourceRequestBody'
      responses:
        '201':
          description: Dossier external resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierExternalResourceResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/note/{id}:
    delete:
      tags:
        - DossierContent
      summary: Delete a note
      description: Deletes a note based on the ID.
      operationId: e2f1f302b6fa29a24f04a15319b1bfcf
      parameters:
        - name: id
          in: path
          description: Unique identifier of the note to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Note successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/notes:
    get:
      tags:
        - DossierContent
      summary: Get a list of notes that can be applied to dossier content
      operationId: 5297f5cfae013a802b5e9b334b417036
      parameters:
        - name: filter[id]
          in: query
          description: Filter by the note's id
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by the note's external key
          required: false
          schema:
            type: string
        - name: filter[title]
          in: query
          description: Filter by the note's title
          required: false
          schema:
            type: string
        - name: filter[content]
          in: query
          description: Filter by the note 's content
          required: false
          schema:
            type: string
        - name: filter[forBothParties]
          in: query
          description: Filter by the note's forBothParties status
          required: false
          schema:
            type: boolean
        - name: filter[medicalOnly]
          in: query
          description: Filter by the note's medicalOnly status
          required: false
          schema:
            type: boolean
        - name: filter[isConcept]
          in: query
          description: Filter by the note's concept status
          required: false
          schema:
            type: boolean
        - name: filter[dossierId]
          in: query
          description: Filter by the note's belonging to this dossierId
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the note's updated date. All records from this date onwards will be returned
          required: false
          schema:
            type: string
            format: date-time
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter by the note's updated date. All records up to and including this date will be returned
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of notes
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierNoteResource'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/note?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/note?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/note?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/note?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/note?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/dossier/content/note/{uuid}:
    patch:
      tags:
        - DossierContent
      summary: Update an existing note
      description: Update an existing belonging to a dossier
      operationId: f4e7e9cfcc4b40252f4b468e66470273
      parameters:
        - name: uuid
          in: path
          description: The uuid of the note
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The note data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierNoteRequestBody'
      responses:
        '200':
          description: The note was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierNoteResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/note:
    post:
      tags:
        - DossierContent
      summary: Create a new note
      description: Create a new note for a dossier
      operationId: 066551a33920cef76b87b60e76b68be3
      requestBody:
        description: The note data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierNoteRequestBody'
      responses:
        '201':
          description: The note was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierNoteResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - DossierContent
      summary: Update an existing note
      description: Update an existing note belonging to a dossier
      operationId: 86010b1282b57a43d8ce3926ef8826b4
      requestBody:
        description: The note data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierNoteRequestBody'
      responses:
        '200':
          description: The note was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierNoteResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/upload/{id}:
    delete:
      tags:
        - DossierContent
      summary: Delete a dossier upload
      description: Deletes a dossier upload based on the ID.
      operationId: b03cdb05b886a76836632906258272f7
      parameters:
        - name: id
          in: path
          description: Unique identifier of the dossier upload to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Dossier upload successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/upload:
    get:
      tags:
        - DossierContent
      summary: Get a list of dossier uploads
      operationId: d750ca66813f83ac9a31d4780db6d8eb
      parameters:
        - name: filter[id]
          in: query
          description: Filter by the dossier upload's id
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by the dossier upload's external key
          required: false
          schema:
            type: string
        - name: filter[title]
          in: query
          description: Filter by the dossier upload's title
          required: false
          schema:
            type: string
        - name: filter[forBothParties]
          in: query
          description: Filter by the dossier upload's forBothParties status
          required: false
          schema:
            type: boolean
        - name: filter[dossierId]
          in: query
          description: Filter by the dossier upload's belonging to this dossierId
          required: false
          schema:
            type: boolean
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the dossier upload's updated date. All records from this date onwards will be returned
          required: false
          schema:
            type: string
            format: date-time
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter by the dossier upload's updated date. All records up to and including this date will be returned
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of uploads
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierUploadResource'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/upload?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/upload?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/upload?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/upload?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/content/upload?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
    post:
      tags:
        - DossierContent
      summary: Create a new upload
      description: Create a new upload for a dossier
      operationId: ee6598a7e181edc92449ff09cadd7a6e
      requestBody:
        description: The upload data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDossierUploadRequestBody'
      responses:
        '201':
          description: The upload was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierUploadResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - DossierContent
      summary: Update an existing upload
      description: Update an existing upload belonging to a dossier
      operationId: a33e6c204b2d7032eebece466784a185
      requestBody:
        description: The upload data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierUploadRequestBody'
      responses:
        '200':
          description: The upload was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierUploadResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/content/upload/{uuid}:
    patch:
      tags:
        - DossierContent
      summary: Update an existing upload
      description: Update an existing upload belonging to a dossier
      operationId: bfb2a3909024e6a83afea67bad7d4bfc
      parameters:
        - name: uuid
          in: path
          description: The uuid of the upload
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The upload data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDossierUploadRequestBody'
      responses:
        '200':
          description: The upload was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DossierUploadResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/task:
    get:
      tags:
        - Dossier
      summary: Get a list of contract types that can be applied to employer contracts
      operationId: 919532ae9ae96208191aeae669fff57c
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by externalKey
          schema:
            type: string
        - name: filter[name]
          in: query
          description: Filter by name
          schema:
            type: string
        - name: filter[baseTaskId]
          in: query
          description: Filter by  base task uid
          schema:
            type: string
            format: uuid
        - name: filter[baseTaskCode]
          in: query
          description: Filter by  base task code
          schema:
            type: string
        - name: filter[taskStatus]
          in: query
          description: 'Filter by  task status. Available options: open,finished,canceled,overdue'
          schema:
            type: string
        - name: filter[baseTaskType]
          in: query
          description: 'Filter by  base task type. Available options: order, evaluation, legal, uwv, informative'
          schema:
            type: string
            enum:
              - order
              - evaluation
              - legal
              - uwv
              - informative
        - name: filter[dateCompletedFrom]
          in: query
          description: Filter by  task date completed from
          schema:
            type: string
            format: date-time
        - name: filter[dateCompletedUntil]
          in: query
          description: 'Filter by  task until date completed '
          schema:
            type: string
            format: date-time
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by  task date updated from
          schema:
            type: string
            format: date-time
        - name: filter[dateUpdatedUntil]
          in: query
          description: 'Filter by  task until date updated '
          schema:
            type: string
            format: date-time
        - name: filter[active]
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: sort
          in: query
          description: sort results by a field
          schema:
            type: string
            enum:
              - code
              - name
              - dateStart
      responses:
        '200':
          description: A list of dossier tasks
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierTask'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/dossier/birth-leave:
    get:
      tags:
        - Dossier
      summary: Get a list of birth leave dossiers
      operationId: ee1d0c5bad6b50f8803ffbcb4ce70685
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
            format: date-time
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
            format: date
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
            format: date
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
            format: date-time
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
            format: date
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of birth leave dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BirthLeaveDossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier
      summary: Create a birth leave dossier
      description: This endpoint is used to create a new birth leave dossier.
      operationId: b19eebff1684fd52328ce898ca78b5a8
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PostDossierRequestBody'
                - $ref: '#/components/schemas/PostBirthLeaveRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier:
    get:
      tags:
        - Dossier
      summary: Get a list of dossiers
      operationId: e416e323bc575e01f66eee13662525c4
      parameters:
        - name: filter[id]
          in: query
          description: Filter by ID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the ID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[type]
          in: query
          description: Filter by the dossier type
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the ID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of Dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /api/public/dossier/preventive:
    get:
      tags:
        - Dossier
      summary: Get a list of preventive dossiers
      operationId: 75151379495782283fef835218ad383a
      parameters:
        - name: filter[id]
          in: query
          description: Filter by ID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the ID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the ID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of Preventive Dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier
      summary: Create a preventive dossier
      description: This endpoint is used to create a new preventive dossier.
      operationId: f1940a3a18cf51c4b7b354105a2b1a8d
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPreventiveDossierRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: Update a preventive dossier
      description: This endpoint is used to update a preventive dossier.
      operationId: ea8608fca2395d2f5ec6b8ae55b3188d
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPreventiveDossierRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/medical-preventive:
    get:
      tags:
        - Dossier
      summary: Get a list of Medical Preventive dossiers
      operationId: 8d124e3d41725e6cc06e33900efd9d8b
      parameters:
        - name: filter[id]
          in: query
          description: Filter by ID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the ID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the ID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of Medical Preventive Dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier
      summary: Create a medical preventive dossier
      description: This endpoint is used to create a new medical preventive dossier.
      operationId: 8d498c8b303dc4c7d02ee67f1bc604cb
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMedicalPreventiveDossierRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: Update a medical preventive dossier
      description: This endpoint is used to update a medical preventive dossier.
      operationId: 7cef874f4b7d832ae2a21a1d6a5d9b99
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMedicalPreventiveDossierRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/configuration/dossier/section:
    get:
      tags:
        - DossierContent
      summary: Get a list of dossier sections that can be applied to dossier contents
      operationId: 0afe2c20c2a7a875e2bd4090abf752f5
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by externalKey
          schema:
            type: string
        - name: filter[name]
          in: query
          description: Filter by name
          schema:
            type: string
        - name: filter[code]
          in: query
          description: Filter by code
          schema:
            type: string
        - name: filter[canContainNotes]
          in: query
          description: Filter by canContainNotes
          schema:
            type: boolean
        - name: filter[canContainDocuments]
          in: query
          description: Filter by canContainDocuments
          schema:
            type: boolean
        - name: dosserType
          in: query
          description: Filter by dossier type
          schema:
            type: string
            enum:
              - illness
              - pregnancy
              - preventive
              - medical
              - adoption
              - organ-donation
              - company-dossier
              - wga
              - zwerd
              - objection-and-appeal
              - reintegration
              - medical-preventive
              - frequent-absence
              - research-by-occupational-health-expert
              - employee
              - absence-dossier
              - budgetcoaching
              - rie
              - pago
              - pmo
              - workplace-survey
              - training
              - vitality
              - care-coaching
              - consultancy
              - job-coaching
              - act-meting
              - career-guidance
              - assessment
              - outplacement
              - acquisition-of-employment
              - spoor-3
              - development-advice
              - spoor-2
              - birth-leave
              - illness-and-zwerd
              - paid-parental-leave
      responses:
        '200':
          description: A list of dossier sections
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierSection'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/section?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/section?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/section?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/section?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/dossier/section?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/dossier/paid-parental-leave:
    get:
      tags:
        - Dossier
      summary: Get a list of paid parental leave dossiers
      operationId: d5d5ae6a248636f8b6de09f24b4fcb81
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
            format: date-time
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
            format: date
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
            format: date
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
            format: date-time
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
            format: date
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of paid parental leave dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaidParentalLeaveDossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier
      summary: Create a paid parental leave dossier
      description: This endpoint is used to create a new paid parental leave dossier.
      operationId: c9eafbcfe9070968e768bf981ef2d9f2
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PostDossierRequestBody'
                - $ref: '#/components/schemas/PostPaidParentalLeaveRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/pregnancy:
    get:
      tags:
        - Dossier
      summary: Get a list of pregnancy dossiers
      operationId: 848cd74531d9d1d27a899469fa491421
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
            format: date-time
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
            format: date
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
            format: date
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
            format: date-time
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
            format: date
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of pregnancy dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PregnancyDossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier
      summary: Create a pregnancy dossier
      description: This endpoint is used to create a new pregnancy dossier.
      operationId: ab831e781e993bd573470514b25e3de1
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPregnancyDossierRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /api/public/dossier/{id}/return-to-work-advice:
    get:
      tags:
        - Return to work advice
      summary: Get the return to work advice base on the dossier
      description: Returns the return to work advice based on the dossier ID.
      operationId: 3459409a4ce71438d9f531bc02d8ebf1
      parameters:
        - name: id
          in: path
          description: Unique identifier of the absence course to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Retrieved return to work advice successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnToWorkAdvice'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/spoor-2:
    get:
      tags:
        - Dossier
      summary: Get a list of Spoor-2 dossiers
      operationId: 995ab03e97c191e6fd86e83448166655
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of Spoor-2 Dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Spoor2Dossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier
      summary: Create a spoor 2 dossier
      description: This endpoint is used to create a new spoor 2 dossier.
      operationId: 18762c7f5dddb75bc30ad07ce3c3e47e
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PostDossierRequestBody'
                - $ref: '#/components/schemas/PostSpoor2RequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: Update a spoor 2 dossier
      description: This endpoint is used to update a new spoor 2 dossier.
      operationId: 4eaef3d4ce6d052de7e09824e7c3d6ea
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PatchDossierRequestBody'
                - $ref: '#/components/schemas/PatchSpoor2RequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier/zwerd:
    get:
      tags:
        - Dossier
      summary: Get a list of ZW ERD dossiers
      operationId: 732d1e80a3971f76814326ad41c8869b
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific dossier
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of a specific employment
          schema:
            type: string
        - name: filter[employmentNumber]
          in: query
          description: Filter by the employment number
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by the update date
          schema:
            type: string
        - name: filter[dateStart]
          in: query
          description: Filter by the start date
          schema:
            type: string
        - name: filter[dateEnd]
          in: query
          description: Filter by the end date
          schema:
            type: string
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter up to (and including) the update date
          schema:
            type: string
        - name: sort[dateStart]
          in: query
          description: Sort results by start date, use '-dateStart' to sort descending
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[dateUpdated]
          in: query
          description: Sort results by updated date, use '-dateUpdated' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of ZW-ERD Dossiers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ZwerdDossier'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Dossier
      summary: Create a ZW ERD dossier
      description: This endpoint is used to create a new ZW ERD dossier.
      operationId: b0f2c294c3271d972108581990340525
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostZwerdDossierRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Dossier
      summary: Update a ZW ERD dossier
      description: This endpoint is used to update a ZW ERD dossier.
      operationId: da5219fa39232715871dccbd271d488f
      requestBody:
        description: Dossier data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchZwerdDossierRequestBody'
      responses:
        '201':
          description: Dossier successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dossier'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/dossier-officer:
    get:
      tags:
        - Dossier Officers
      summary: Get a list of Dossier Officers
      operationId: 50616ff999f777b6e9aa1384186cb6dc
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[username]
          in: query
          description: Filter by Username
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of Dossier Officers
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DossierOfficer'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test.com/public/dossier-officers?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test.com/public/dossier-officers?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test.com/public/dossier-officers?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test.com/public/dossier-officers?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test.com/public/dossier-officers?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, username`.
                      type: object
                type: object
  /api/public/employee/{id}:
    delete:
      tags:
        - Employee
      summary: Delete an employee
      description: Deletes an employee based on the ID.
      operationId: c91034f1b616d209966bda3f3d460bd6
      parameters:
        - name: id
          in: path
          description: Unique identifier of the employee to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Employee successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/employee:
    get:
      tags:
        - Employee
      summary: Get a list of employees
      operationId: 7da03983f3c9f43529ef75e8bbaebc15
      parameters:
        - name: filter[id]
          in: query
          description: Filter by ID to get a specific employee
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the ID of a specific employment
          schema:
            type: string
        - name: filter[employeeNumber]
          in: query
          description: Filter by an employee's employee number
          schema:
            type: string
        - name: include[person]
          in: query
          description: Include the employee's personal details in the output
          schema:
            type: string
        - name: include[employments]
          in: query
          description: Include the employee's employments in the output
          schema:
            type: string
        - name: include[addresses]
          in: query
          description: Include the employee's addresses in the output
          schema:
            type: string
        - name: include[employmentContract]
          in: query
          description: Include the employee's employment contract in the output
          schema:
            type: string
        - name: include[communicationMethods]
          in: query
          description: Include the employee's communication methods in the output
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of Employees
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployeeResource'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Employee
      summary: Create an employee
      description: This endpoint creates an Employee and its associated entities (Employment, Employment Contract, Primary Address, Person Information, Person Communications).
      operationId: a626f8de80e6cf5fa113c68baeea658f
      requestBody:
        description: Employee data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmployeeRequestBody'
      responses:
        '201':
          description: Absence course successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employee
      summary: Update an employee
      description: This endpoint updates an existing Employee and its associated entities (Primary Address, Person Information, Person Communications).
      operationId: 3740a88ba4d820ef4956bfa88371ce6b
      requestBody:
        description: Employee data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployeeRequestBody'
      responses:
        '200':
          description: Absence course successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/employer/{id}:
    delete:
      tags:
        - Employer
      summary: Delete an employer
      description: Deletes an employer based on the ID. This operation also removes any users, contracts, roles, authorizations and organizational unit types linked to the employer.
      operationId: 20761f9842722eb266fbfec5f5a00cbe
      parameters:
        - name: id
          in: path
          description: Unique identifier of the employer to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Employer successfully deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employer
      summary: Update an employer while referencing the employer by its id
      operationId: dad90ec1006d4835727c52277dae3f36
      parameters:
        - name: id
          in: path
          description: Unique identifier of the employer to be updated.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Employer data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployerRequestBody'
      responses:
        '200':
          description: Employer successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/configuration/employer/arbo-service:
    get:
      tags:
        - Employer
      summary: Get a list of arbo services
      operationId: f8d248a44deb469688638a00638e1078
      parameters:
        - name: filter[id]
          in: query
          description: Filter arbo services by uuid
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[externalKey]
          in: query
          description: Filter arbo services by external key
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of available arbo services
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ArboService'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/arbo?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/employer:
    get:
      tags:
        - Employer
      summary: Get a list of employers
      operationId: b7305f681e5245b0afc36af2f38f1317
      parameters:
        - name: filter[search]
          in: query
          description: Filter employers based on search criteria
          schema:
            type: string
        - name: filter[id]
          in: query
          description: Filter by id
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter employers that were updated on after this date/time
          schema:
            type: string
            format: date-time
          example: '2022-01-01 11:22:33'
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter employers that were updated before or on this date/time
          schema:
            type: string
            format: date-time
          example: '2022-01-01 22:33:44'
        - name: include
          in: query
          description: |-
            Include related resources (
             *              organizationalUnitsCount,
             *              insurancePolicies,
             *              employerDivision,
             *              companyDoctor.user,
             *              dossierOfficer.user,
             *              arboService,
             *              visitorAddress.country,
             *              postalAddress,
             *              contracts.type,
             *              contracts.service,
             *              contactPersons,
             *              ownRiskContracts.type,
             *              communications,
             *              contactPersons.details
             *          ) - use comma separated values to include multiple resources - use dot notation to include nested resources
          schema:
            type: string
        - name: sort[externalKey]
          in: query
          description: Sort results by external key, use '-externalKey' to sort descending
          schema:
            type: string
        - name: sort[name]
          in: query
          description: Sort results by name, use '-name' to sort descending
          schema:
            type: string
      responses:
        '200':
          description: A list of employers that match the given filters
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employer'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Employer
      summary: Create an employer
      operationId: e8fe4081efd52e2ce4f07e20236abfbd
      requestBody:
        description: Employer data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmployerRequestBody'
      responses:
        '201':
          description: Employer successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employer
      summary: Update an employer
      operationId: dee04ecfc9d8b55d50f88dd5e92dbc7f
      requestBody:
        description: Employer data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployerRequestBody'
      responses:
        '200':
          description: Employer successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/employer-division:
    get:
      tags:
        - Employer Divisions
      summary: Get a list of employer divisions
      operationId: 6f99143a21afaa0c866b6c62a8c628b2
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[parentEmployerDivisionId]
          in: query
          description: Filter by parent employer division UUID
          schema:
            type: string
        - name: filter[parentEmployerDivisionExternalKey]
          in: query
          description: Filter by parent employer division's external key
          schema:
            type: string
        - name: sort
          in: query
          description: Sort by field (externalKey)
          schema:
            type: string
      responses:
        '200':
          description: A list of employer divisions that match the given filters
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployerDivision'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                      first:
                        type: string
                        format: uri
                      last:
                        type: string
                        format: uri
                      prev:
                        type: string
                        format: uri
                        nullable: true
                      next:
                        type: string
                        format: uri
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                      perPage:
                        type: integer
                      currentPage:
                        type: integer
                      lastPage:
                        type: integer
                    type: object
                type: object
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/employer-role:
    get:
      tags:
        - User Roles
      summary: Get a list of employer roles that can be assigned to users
      operationId: 458dd77b935ac246664fac6b50504d06
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[employerId]
          in: query
          description: Filter by employer uuid
          schema:
            type: string
        - name: filter[active]
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: filter[externalKey]
          in: query
          description: Filter by external_key
          schema:
            type: string
        - name: filter[arboRoleId]
          in: query
          description: Filter by arboRole uuid
          schema:
            type: string
        - name: include
          in: query
          description: Include relations
          schema:
            type: string
            enum:
              - arboRole
      responses:
        '200':
          description: A list of available employer roles
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployerRole'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/employment/contract/{id}:
    delete:
      tags:
        - Employments
      summary: Delete an employment contract
      description: Deletes an employment contract based on the ID.
      operationId: 83308e5fedb0bb9751d9cf98246bcc0b
      parameters:
        - name: id
          in: path
          description: Unique identifier of the employment contract to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Employment Contract successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/employment/{id}:
    delete:
      tags:
        - Employments
      summary: Delete an employment and all employment-contracts that belong to it
      description: Deletes an employment based on the ID.
      operationId: 466eff97f8e81c7d8e839d1e11b0fb4e
      parameters:
        - name: id
          in: path
          description: Unique identifier of the employment to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Employment successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/employment/contract:
    get:
      tags:
        - Employments
      summary: Get a list of employment contracts
      operationId: 9807b30a3c4f57cfeff8a92e80b37fce
      parameters:
        - name: filter[id]
          in: query
          description: Find by UUID of employment contract
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key of employment contract
          schema:
            type: string
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of employment
          schema:
            type: string
        - name: filter[employmentKey]
          in: query
          description: Filter by the external key of employment
          schema:
            type: string
        - name: filter[organizationalUnitId]
          in: query
          description: Filter by the UUID of organizational unit
          schema:
            type: string
        - name: filter[organizationalUnitKey]
          in: query
          description: Filter by the external key of organizational unit
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by date of latest update being after or the same day as the one given
          schema:
            type: string
            format: date-time
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter by date of latest update being before or on the same day as the one given
          schema:
            type: string
            format: date-time
        - name: filter[dateStartFrom]
          in: query
          description: Filter by start date being after or the same day as the one given
          schema:
            type: string
            format: date-time
        - name: filter[dateStartUntil]
          in: query
          description: Filter by start date being before or on the same day as the one given
          schema:
            type: string
            format: date-time
        - name: filter[dateEndFrom]
          in: query
          description: Filter by end date being after or the same day as the one given
          schema:
            type: string
            format: date-time
        - name: filter[dateEndUntil]
          in: query
          description: Filter by end date being before or on the same day as the one given
          schema:
            type: string
            format: date-time
        - name: include
          in: query
          description: Include related resources in the output (organizationalUnit, employmentType, employment)
          schema:
            type: string
        - name: sort
          in: query
          description: Sort results by field, use '-keyName' to sort in descending order (externalKey, dateUpdated)
          schema:
            type: string
      responses:
        '200':
          description: A list of Employment Contracts
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmploymentContractResource'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Employments
      summary: Create a new employment contract
      description: Create a new employment contract
      operationId: 80e51aba4b5f61631ec1163c3354caf0
      requestBody:
        description: Employment Contract data
        required: true
        content:
          application/json:
            schema:
              required:
                - employmentId
                - employmentKey
                - employmentTypeId
                - organizationalUnitId
                - organizationalUnitKey
                - paymentPeriod
                - dateStart
              properties:
                employmentId:
                  description: Employment ID, mutually exclusive with 'employmentKey'
                  type: string
                  example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
                employmentKey:
                  description: Employment Key, mutually exclusive with 'employmentId'
                  type: string
                  example: Employment@Key
                employmentTypeId:
                  description: The ID of the Employment Type for the new Employment Contract, mutually exclusive with 'employmentTypeCode'
                  type: string
                  example: 58d28f4f-ecdf-4420-b7a0-aeb5aa367376
                employmentTypeCode:
                  description: The Code of the Employment Type for the new Employment Contract, mutually exclusive with 'employmentTypeId'
                  type: string
                  example: ab12
                organizationalUnitId:
                  description: The ID of the Organizational Unit, mutually exclusive with 'organizationalUnitKey'
                  type: string
                  example: 42a384fb-de7e-421c-ba81-2598fb510016
                organizationalUnitKey:
                  description: Organizational Unit Key, mutually exclusive with 'organizationalUnitId'
                  type: string
                  example: OrganizationalUnit@Key
                paymentPeriod:
                  description: The payment period wording - e.g. 'month' - for the new employment contract.
                  type: string
                  example: month
                externalKey:
                  description: External key to identify the employment contract by
                  type: string
                  example: External@Key
                  nullable: true
                dateStart:
                  description: Start date for the new employment contract
                  type: string
                  format: date
                  example: '2000-01-01'
                dateEnd:
                  description: End date for the new employment contract, if applicable
                  type: string
                  format: date
                  example: '2037-03-03'
                  nullable: true
                jobTitle:
                  description: Job title for the employee
                  type: string
                  example: Chief Executive Officer
                  nullable: true
                normHoursPerWeek:
                  description: The normal hours to be worked per week as part of the new employment contract
                  type: number
                  example: '40'
                  nullable: true
                hoursPerWeek:
                  description: The current actual hours worked per week as part of the new employment contract
                  type: number
                  example: '39'
                  nullable: true
                grossSalary:
                  description: Gross Salary the employee will earn as part of the new employment contract
                  type: number
                  example: '99998.12'
                  nullable: true
                universalSalary:
                  description: Universal Salary the employee will earn as part of the new employment contract
                  type: number
                  example: '99899.34'
                  nullable: true
                costCenterDescription:
                  description: Cost Center Description for the new employment contract
                  type: string
                  example: This cost center has a description
                  nullable: true
                costCenterCode:
                  description: Cost Center Code for the new employment contract
                  type: string
                  example: CCC123
                  nullable: true
                station:
                  description: The Station to which the employee is assigned as part of the new employment contract
                  type: string
                  example: Third Subdivision
                  nullable: true
              type: object
      responses:
        '201':
          description: Employment contract successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentContractResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employments
      summary: Update an existing employment contract
      description: Update an existing employment contract
      operationId: 959f823a4355303f3c74e2453ca00ed7
      requestBody:
        description: Employment Contract data
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - key
              properties:
                id:
                  description: Employment Contract UUID, mutually exclusive with 'key'
                  type: string
                  format: uuid
                  example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
                key:
                  description: Employment Contract external key, mutually exclusive with 'id'
                  type: string
                  example: EmploymentContract@Key
                employmentTypeId:
                  description: The ID of the new Employment Type, mutually exclusive with 'employmentTypeCode'
                  type: string
                  format: uuid
                  example: 58d28f4f-ecdf-4420-b7a0-aeb5aa367376
                  nullable: true
                employmentTypeCode:
                  description: The code of the new Employment Type, mutually exclusive with 'employmentTypeId'
                  type: string
                  example: employment@type#code
                  nullable: true
                organizationalUnitId:
                  description: The ID of the new Organizational Unit, mutually exclusive with 'organizationalUnitKey'
                  type: string
                  format: uuid
                  example: 42a384fb-de7e-421c-ba81-2598fb510016
                  nullable: true
                organizationalUnitKey:
                  description: The External Key of the new Organizational Unit, mutually exclusive with 'organizationalUnitId'
                  type: string
                  example: OrganizationalUnit@Key
                  nullable: true
                paymentPeriod:
                  description: The new payment period wording - e.g. 'month' - for the employment contract.
                  type: string
                  example: month
                  nullable: true
                dateStart:
                  description: New start date for the employment contract
                  type: string
                  format: date
                  example: '2000-01-01'
                  nullable: true
                dateEnd:
                  description: New end date for the employment contract, if applicable
                  type: string
                  format: date
                  example: '2037-03-03'
                  nullable: true
                jobTitle:
                  description: New job title for the employee
                  type: string
                  example: Chief Executive Officer
                  nullable: true
                normHoursPerWeek:
                  description: The new normal hours to be worked per week as part of the employment contract
                  type: number
                  example: '40.01'
                  nullable: true
                hoursPerWeek:
                  description: The new actual hours worked per week as part of the employment contract
                  type: number
                  example: '39.02'
                  nullable: true
                grossSalary:
                  description: Updated gross salary the employee will earn as part of the employment contract
                  type: number
                  example: '99998.12'
                  nullable: true
                universalSalary:
                  description: Updated universal salary the employee will earn as part of the employment contract
                  type: number
                  example: '99899.34'
                  nullable: true
                costCenterDescription:
                  description: New Cost Center Description for the employment contract
                  type: string
                  example: This cost center has an updated description
                  nullable: true
                costCenterCode:
                  description: New Cost Center Code for the employment contract
                  type: string
                  example: CCC123
                  nullable: true
                station:
                  description: The new station to which the employee is assigned as part of the employment contract
                  type: string
                  example: Third Subdivision
                  nullable: true
              type: object
      responses:
        '200':
          description: Employment contract successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentContractResource'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/employment:
    get:
      tags:
        - Employments
      summary: Get a list of employments
      operationId: 2f9b383a272de018aeb33ba3a63ba558
      parameters:
        - name: filter[id]
          in: query
          description: Find by UUID of employment
          schema:
            type: string
            format: uuid
          example: 5bb912f0-ed8e-4af1-8714-a7d295843122
        - name: filter[externalKey]
          in: query
          description: Filter by external key of employment
          schema:
            type: string
          example: c84563d5-2fd8-4c02-b329-f2f9142e7c23
        - name: filter[employeeId]
          in: query
          description: Filter by the UUID of employee
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        - name: filter[employeeKey]
          in: query
          description: Filter by the external key of employee
          schema:
            type: string
          example: 8b242b19-c11a-4d9e-b9ed-1117ab0ac6e0
        - name: filter[currentOrLastEmploymentContract]
          in: query
          description: Filter by the UUID of the current or last employment contract
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        - name: filter[employmentEndReason]
          in: query
          description: Filter by the employmentEndReason ('end-employment', 'sick-during-end-of-employment', 'death', 'dismissal-own-request')
          schema:
            type: string
          example: end-employment
        - name: filter[primary]
          in: query
          description: Filter by whether this is a primary employment or not
          schema:
            type: boolean
          example: 'false'
        - name: filter[internalSupervisorId]
          in: query
          description: Filter by the UUID of internal supervisor
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        - name: filter[internalSupervisorKey]
          in: query
          description: Filter by the external key of internal supervisor
          schema:
            type: string
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        - name: filter[externalSupervisorId]
          in: query
          description: Filter by the UUID of external supervisor
          schema:
            type: string
            format: uuid
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        - name: filter[externalSupervisorKey]
          in: query
          description: Filter by the external key of external supervisor
          schema:
            type: string
          example: 9c77ba70-fc65-4715-9158-17d65f55c373
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by date of last update being after or the same day as the one given
          schema:
            type: string
            format: date-time
          example: '2000-01-01 12:34:56'
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter by date of last update being before or on the same day as the one given
          schema:
            type: string
            format: date-time
          example: '2030-01-01 12:34:56'
        - name: include
          in: query
          description: Include related resources in the output (employmentEndReason,employee,supervisor,externalSupervisor,currentOrLastEmploymentContract,firstEmploymentContract,uwvSector)
          schema:
            type: string
          example: employmentEndReason,employee,supervisor,externalSupervisor,uwvSector
        - name: sort
          in: query
          description: Sort results by field, use '-keyName' to sort in descending order (externalKey, dateUpdated)
          schema:
            type: string
          example: '-dateUpdated'
      responses:
        '200':
          description: A list of Employments
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employment'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/employment/contract?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Employments
      summary: Create a new employment
      description: Create a new employment
      operationId: 631e26afdd05ca422ee8f04605319818
      requestBody:
        description: Employment data
        required: true
        content:
          application/json:
            schema:
              required:
                - employeeId
                - employeeKey
                - employmentTypeId
                - organizationalUnitId
                - organizationalUnitKey
              properties:
                employeeId:
                  description: Employee ID, mutually exclusive with 'employeeKey'
                  type: string
                  format: uuid
                  example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
                employeeKey:
                  description: Employee Key, mutually exclusive with 'employeeId'
                  type: string
                  example: Employee@Key
                employmentTypeId:
                  description: The ID of the Employment Type for the new Employment Contract, mutually exclusive with 'employmentTypeCode'
                  type: string
                  format: uuid
                  example: 58d28f4f-ecdf-4420-b7a0-aeb5aa367376
                employmentTypeCode:
                  description: The Code of the Employment Type for the new Employment Contract, mutually exclusive with 'employmentTypeId'
                  type: string
                  example: ab12
                organizationalUnitId:
                  description: The ID of the Organizational Unit, mutually exclusive with 'organizationalUnitKey'
                  type: string
                  format: uuid
                  example: 42a384fb-de7e-421c-ba81-2598fb510016
                organizationalUnitKey:
                  description: Organizational Unit Key, mutually exclusive with 'organizationalUnitId'
                  type: string
                  example: OrganizationalUnit@Key
                externalKey:
                  description: External Key as an identifier for the employment
                  type: string
                  example: External@Key
                waitingDays:
                  description: The number of waiting days
                  type: integer
                  example: '3'
                  nullable: true
                uwvSector:
                  description: The UWV Sector in which the employment belongs
                  type: integer
                  example: '2'
                  nullable: true
                employmentEndReason:
                  description: The reason for the end of employment
                  type: string
                  enum:
                    - end-employment
                    - sick-during-end-of-employment
                    - reach-aow
                    - death
                    - dismissal
                    - retirement
                    - temporary-old-age-pension
                    - wia
                    - termination-of-temporary-employment
                    - unknown
                    - within-probationary-period
                    - dismissal-own-request
                    - immediate-dismissal
                    - mutual-termination-of-employment
                  example: end-employment
                internalSupervisorId:
                  description: UUID identifier for the employee set as a supervisor to the employment
                  type: string
                  format: uuid
                  example: 42a384fb-de7e-421c-ba81-2598fb510016
                externalSupervisorId:
                  description: UUID identifier for the external supervisor set as a supervisor to the employment
                  type: string
                  format: uuid
                  example: 42a384fb-de7e-421c-ba81-2598fb510016
                uwvRiskCode:
                  description: Uwv Risk Code
                  type: string
                  example: Uwv@Risk@Code
                dateStart:
                  description: Start date for the new employment contract, defaults to current day
                  type: string
                  format: date
                  example: '2000-01-01'
                  nullable: true
                dateEnd:
                  description: End date for the new employment contract, if applicable
                  type: string
                  format: date
                  example: '2037-03-03'
                  nullable: true
                jobTitle:
                  description: Job title for the employee
                  type: string
                  example: Chief Executive Officer
                  nullable: true
                normHoursPerWeek:
                  description: The normal hours to be worked per week as part of the new employment contract
                  type: number
                  example: '40'
                  nullable: true
                hoursPerWeek:
                  description: The current actual hours worked per week as part of the new employment contract
                  type: number
                  example: '39'
                  nullable: true
                employeeNumber:
                  description: The employee number related to the employment
                  type: string
                  example: Employee@Number#12345
                  nullable: true
                paymentPeriod:
                  description: The payment period wording - e.g. 'month' - for the new employment contract.
                  type: string
                  example: month
              type: object
      responses:
        '200':
          description: Employment successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Employments
      summary: Update an existing employment
      description: Update an existing employment
      operationId: 06303c11bc78024da09d625d3b0441ae
      requestBody:
        description: Employment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmploymentRequestBody'
      responses:
        '200':
          description: Employment successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/configuration/employment/employment-type:
    get:
      tags:
        - Employments
      summary: Get a list of employment types
      operationId: 7516577c7a4886461b9bdaee2a13c765
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific employment type
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[indefiniteContract]
          in: query
          description: Filter by employment types that are for a contract of indefinite duration ('onbepaalde tijd')
          schema:
            type: boolean
        - name: filter[education]
          in: query
          description: Filter by employment types that are for education (internship)
          schema:
            type: boolean
      responses:
        '200':
          description: A list of EmploymentTypes
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmploymentType'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /api/public/employment/{uuid}:
    patch:
      tags:
        - Employments
      summary: Update an existing employment
      description: Update an existing employment
      operationId: 59a5a86ee0307da242a6f7c1973b9092
      parameters:
        - name: uuid
          in: path
          description: The  id of the employment to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Employment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmploymentRequestBody'
      responses:
        '200':
          description: Employment successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/external-supervisor:
    get:
      tags:
        - External Supervisor
      summary: Get a list of external supervisors
      operationId: 713b0d6a223bccdeba0e58765de66f41
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[employerId]
          in: query
          description: Filter by employer
          schema:
            type: string
        - name: filter[organizationalUnitId]
          in: query
          description: Filter by organizational unit uuid
          schema:
            type: string
        - name: filter[jobTitle]
          in: query
          description: Filter by `jobTitle` (case insensitive)
          schema:
            type: string
        - name: include
          in: query
          description: Include related resources
          schema:
            type: string
            enum:
              - person
      responses:
        '200':
          description: A list of external supervisors
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExternalSupervisor'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, externalKey, active`.
                      type: object
                type: object
  /api/public/operation:
    get:
      tags:
        - Operation
      summary: Get a list of operations
      operationId: 59d368c18a71c3e18524e037c8d25846
      parameters:
        - name: filter[id]
          in: query
          description: Filter by uuid
          schema:
            type: string
        - name: filter[search]
          in: query
          description: Filter by operation name
          schema:
            type: string
      responses:
        '200':
          description: A list of operations
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operation'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/roles/employer?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation of the request failed
                  timestamp:
                    type: integer
                    example: 1682685774
                  status:
                    type: integer
                    example: 400
                  errors:
                    type: array
                    items:
                      properties:
                        errors:
                          type: string
                          example: Requested filter(s) `externalKeys` are not allowed. Allowed filter(s) are `id, search.
                      type: object
                type: object
  /api/public/billable-operation:
    get:
      tags:
        - Billable Operation
      summary: Get a list of billable operations
      operationId: 39b8281d52095a101664b45af267a209
      parameters:
        - name: filter[id]
          in: query
          description: Filter by UUID to get a specific billable operation
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by the external key of a specific billable operation
          schema:
            type: string
        - name: filter[operationId]
          in: query
          description: Filter by the UUID of a specific operation
          schema:
            type: string
        - name: filter[dossierId]
          in: query
          description: Filter by the UUID of a specific dossier
          schema:
            type: string
        - name: filter[dossierTaskId]
          in: query
          description: Filter by dossierTaskId associated with the billable operation
          schema:
            type: integer
        - name: filter[employmentId]
          in: query
          description: Filter by the UUID of a specific employment
          schema:
            type: string
        - name: filter[dateUpdatedFrom]
          in: query
          description: Filter by date updated from
          schema:
            type: string
            format: date-time
        - name: filter[dateUpdatedUntil]
          in: query
          description: Filter by date updated until
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          description: Sort results by a specific column, use - before the field name to sort descending
          schema:
            type: string
            enum:
              - dateExecuted
              - '-dateExecuted'
              - dateUpdated
              - '-dateUpdated'
              - externalKey
              - '-externalKey'
      responses:
        '200':
          description: A list of Operationable entities
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operationable'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/billable-operation?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/billable-operation?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/billable-operation?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/billable-operation?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/billable-operation?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /api/public/organizational-unit/{id}:
    delete:
      tags:
        - Organizational Units
      summary: Delete an organizational unit
      description: Deletes an organizational unit based on the ID. This operation also removes any employees linked to the organizational unit, along with their associated employment contracts.
      operationId: a4f618d423ca935788815c8416bea707
      parameters:
        - name: id
          in: path
          description: Unique identifier of the organizational unit to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organizational unit successfully deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
        - Organizational Units
      summary: Update an existing organizational unit
      description: Updates an existing organizational unit. Allows for 'id' to be in the path or in the request body.
      operationId: ba34008bf85672cd3cd3573690344cf8
      parameters:
        - name: id
          in: path
          description: Unique identifier of the organizational unit to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  description: Unique identifier of the organizational unit to be updated. Required if not provided in the path and 'key' is not provided. Mutually exclusive with 'key'
                  type: string
                  format: uuid
                key:
                  description: External key of the organizational unit to be updated. Required if no 'id' is provided. Mutually exclusive with 'id'.
                  type: string
                externalKey:
                  description: External key of the organizational unit
                  type: string
                  nullable: true
                parentOrganizationalUnitId:
                  description: Parent org unit ID, mutually exclusive with 'parentOrganizationalUnitKey', nullable
                  type: string
                  format: uuid
                  nullable: true
                parentOrganizationalUnitKey:
                  description: Parent org unit key, mutually exclusive with 'parentOrganizationalUnitId'
                  type: string
                organizationalUnitTypeId:
                  description: Organizational Unit Type ID
                  type: string
                  format: uuid
                organizationalUnitTypeKey:
                  description: Organizational Unit Type key, default available values are 'company', 'department' and 'region' - mutually exclusive with 'organizationalUnitTypeId'
                  type: string
                name:
                  description: Name of the organizational unit
                  type: string
                code:
                  description: Code of the organizational unit, nullable
                  type: string
                  nullable: true
                company:
                  description: Company specific fields, applicable only when OU type is 'company'
                  properties:
                    legalName:
                      description: Legal name of the company
                      type: string
                    legalForm:
                      description: Legal form of the company
                      type: string
                      enum:
                        - sole-proprietorship
                        - partnership
                        - limited-liability-partnership
                        - limited-partnership
                        - private-limited-company
                        - public-limited-company
                        - cooperative-and-mutual-insurance-company
                        - foundation
                        - association
                    normHours:
                      description: Norm hours of the company
                      type: integer
                      example: 40
                    relationNumber:
                      description: Your relation number for the company (shown in reports), nullable
                      type: string
                      nullable: true
                    kvkNumber:
                      description: KVK number of the company, nullable
                      type: string
                      nullable: true
                    vatNumber:
                      description: VAT number of the company, nullable
                      type: string
                      nullable: true
                    uwv:
                      description: UWV fields, nullable
                      properties:
                        registrationNumber:
                          description: UWV Registration number of the company
                          type: string
                          nullable: true
                        riskCode:
                          description: UWV Risk code of the company
                          type: integer
                          nullable: true
                        sectorId:
                          description: UWV Sector ID of the company
                          type: integer
                          nullable: true
                      type: object
                  type: object
                dateStart:
                  description: Start date of the organizational unit, format as YYYY-MM-DD
                  type: string
                  format: date
                dateEnd:
                  description: End date of the organizational unit, format as YYYY-MM-DD, nullable
                  type: string
                  format: date
                  nullable: true
              type: object
      responses:
        '200':
          description: Organizational unit successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationalUnit'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/organizational-unit:
    get:
      tags:
        - Organizational Units
      summary: Get a list of organizational units
      operationId: e89a713b764f533020ad57a8082b79d1
      parameters:
        - name: filter[id]
          in: query
          description: Filter by ID
          schema:
            type: string
        - name: filter[externalKey]
          in: query
          description: Filter by external key
          schema:
            type: string
        - name: filter[name]
          in: query
          description: Filter by name
          schema:
            type: string
        - name: filter[officialName]
          in: query
          description: Filter by official name
          schema:
            type: string
        - name: filter[code]
          in: query
          description: Filter by code
          schema:
            type: string
        - name: filter[root]
          in: query
          description: Filter root organizational units
          schema:
            type: boolean
        - name: filter[employerId]
          in: query
          description: Filter by employer ID
          schema:
            type: string
        - name: filter[parentOrganizationalUnitId]
          in: query
          description: Filter by parent organizational unit ID
          schema:
            type: string
        - name: sort
          in: query
          description: Sort by field (name, officialName, code, sbiCode, number, kvkNumber, vatNumber, relationNumber, externalKey). Prefix with '-' to sort descending
          schema:
            type: string
        - name: include
          in: query
          description: Include related resources (employer, parentOrganizationalUnit, companyDoctor, dossierOfficer)
          schema:
            type: string
      responses:
        '200':
          description: A list of organization units that match the given filters
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationalUnit'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    post:
      tags:
        - Organizational Units
      summary: Create a new organizational unit
      description: Create a new organizational unit
      operationId: 5e7cdfe148bcd681b44a15aebacdddf0
      requestBody:
        description: 'Organizational Unit data - please be aware: ''company.normHours'' is required when ''company'' is present'
        required: true
        content:
          application/json:
            schema:
              required:
                - employerId
                - employerKey
                - organizationalUnitTypeId
                - name
              properties:
                externalKey:
                  description: External key of the organizational unit
                  type: string
                employerId:
                  description: Employer ID of the organizational unit, mutually exclusive with 'employerKey'
                  type: string
                employerKey:
                  description: Employer externalKey of the organizational unit, mutually exclusive with 'employerId'
                  type: string
                parentOrganizationalUnitId:
                  description: Parent organizational unit ID of the organizational unit, mutually exclusive with 'parentOrganizationalUnitKey'
                  type: string
                parentOrganizationalUnitKey:
                  description: Parent organizational unit key of the organizational unit, mutually exclusive with 'parentOrganizationalUnitId'
                  type: string
                organizationalUnitTypeId:
                  description: Organizational unit type ID of the organizational unit - mutually exclusive with 'organizationalUnitTypeKey'
                  type: string
                organizationalUnitTypeKey:
                  description: Organizational unit type key of the organizational unit, default values are 'company', 'department' and 'region' - mutually exclusive with 'organizationalUnitTypeId'
                  type: string
                name:
                  description: Name of the organizational unit
                  type: string
                code:
                  description: Code of the organizational unit
                  type: string
                companyDoctorId:
                  description: Company doctor ID of the organizational unit. mutually exclusive with 'companyDoctorKey'
                  type: string
                companyDoctorKey:
                  description: Company doctor key of the organizational unit. mutually exclusive with 'companyDoctorId'
                  type: string
                dossierOfficerId:
                  description: Dossier officer ID of the organizational unit. mutually exclusive with 'dossierOfficerKey'
                  type: string
                dossierOfficerKey:
                  description: Dossier officer key of the organizational unit, mutually exclusive with 'dossierOfficerId'
                  type: string
                company:
                  description: Company data
                  properties:
                    legalName:
                      description: Legal name of the company
                      type: string
                    legalForm:
                      description: Legal form of the company
                      type: string
                      enum:
                        - sole-proprietorship
                        - partnership
                        - limited-liability-partnership
                        - limited-partnership
                        - private-limited-company
                        - public-limited-company
                        - cooperative-and-mutual-insurance-company
                        - foundation
                        - association
                    normHours:
                      description: Norm hours of the company
                      type: integer
                      example: 40
                    relationNumber:
                      description: Your relation number for the company (shown in reports)
                      type: string
                    kvkNumber:
                      description: KVK number of the company
                      type: string
                    vatNumber:
                      description: VAT number of the company
                      type: string
                    payrollTaxIdentificationNumber:
                      description: Payroll tax identification number ('loonheffingsnummer') of the company
                      type: string
                    uwv:
                      description: UWV fields
                      properties:
                        registrationNumber:
                          description: UWV Registration number ('aansluitnummer') of the company
                          type: string
                        riskCode:
                          description: UWV Risk code ('risicocode') of the company
                          type: integer
                          example: 42
                        sectorId:
                          description: UWV Sector ID
                          type: integer
                          example: 42
                      type: object
                    dateStart:
                      description: 'Start date, defaults to '
                      type: string
                      format: date
                    dateEnd:
                      description: End date
                      type: string
                      format: date
                  type: object
              type: object
      responses:
        '201':
          description: Organizational unit successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationalUnit'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/configuration/organizational-unit/organizational-unit-type:
    get:
      tags:
        - Organizational Units
      summary: Get a list of organizational unit types
      operationId: 18941f3ff037acc2205c73e0fa5a5640
      parameters:
        - name: filter[employerId]
          in: query
          description: Filter by employer UUID
          schema:
            type: string
        - name: include
          in: query
          description: Include related resources (employer)
          schema:
            type: string
      responses:
        '200':
          description: A list of organization unit types that match the given filters
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationalUnitType'
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[number]=1&page[size]=25
                      first:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[size]=25
                      last:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[number]=1&page[size]=25
                      prev:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[size]=25
                        nullable: true
                      next:
                        type: string
                        format: uri
                        example: https://api.dotweb.test/public/user/organizational-unit?page[number]=2&page[size]=25
                        nullable: true
                    type: object
                  meta:
                    properties:
                      total:
                        type: integer
                        example: 123
                      perPage:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 5
                    type: object
                type: object
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/public/user/event:
    post:
      tags:
        - PublicAPI
      summary: Create/Update Users event Endpoint
      description: Event endpoint to create/update users
      operationId: UserEvent
      requestBody:
        description: Pass parameters used for creating/updating a user
        required: true
        content:
          application/json:
            schema:
              required:
                - key
              properties:
                key:
                  type: string
                  example: 98798779@12
                type:
                  type: string
                  enum:
                    - internal
                    - external
                    - employer
                  example: internal
                roleId:
                  type: integer
                  example: '1122334455667788'
                username:
                  type: string
                  example: dotweb-user
                active:
                  type: boolean
                  example: 'true'
                hasSystemAccess:
                  type: boolean
                  example: 'false'
                dateStart:
                  description: YYYY-MM-DD Defaults to NOW()
                  type: string
                  format: date-time
                dateEnd:
                  description: YYYY-MM-DD Defaults to NULL
                  type: string
                  format: date-time
                employerId:
                  description: Key for assigning the user to a specific employer
                  type: integer
                  example: '1'
                belongsToEmployeeKey:
                  description: This will prevent the user from being able to see themselves as an employee
                  type: string
                  example: externalEmployeeKey
                employeeKey:
                  description: Key for generating personalia from employee data
                  type: string
                  example: employee-unique-identifier
                ssoKey:
                  description: SSO key unique in scope for partner/employer sso solution, not globally unique
                  type: string
                  example: nfr5ffg8jdnksDf3
                person:
                  required:
                    - initials
                    - surname
                    - gender
                  properties:
                    mail:
                      type: string
                      format: email
                      example: user1@mail.com
                    phone:
                      type: string
                      example: '06123456789'
                    initials:
                      type: string
                      example: J.K.
                    surname:
                      type: string
                      example: Doe
                    nickname:
                      type: string
                      example: Jan
                    prefix:
                      type: string
                      example: Van
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - X
                      example: M
                  type: object
                authorization:
                  properties:
                    cleaning:
                      description: If left out no change in existing authorizations
                      type: string
                      enum:
                        - clean-all
                        - clean-api-created
                      example: clean-all
                    organizationalUnits:
                      type: array
                      items:
                        required:
                          - key
                          - authLevel
                        properties:
                          key:
                            description: Required for each authorization created
                            type: string
                            example: 1511_interface@155
                          authLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: authorized
                          childLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: not-authorized
                        type: object
                    employments:
                      type: array
                      items:
                        properties:
                          key:
                            description: Required for each authorization created
                            type: string
                            example: 1511_interface@155
                          authLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: authorized
                        type: object
                    employers:
                      type: array
                      items:
                        properties:
                          key:
                            description: Required for each authorization created
                            type: string
                            example: 1511_interface@155
                          authLevel:
                            type: string
                            enum:
                              - authorized
                              - authorized-plus-children
                              - not-authorized
                              - authorized-signals-only
                              - authorized-viewing-only
                            example: authorized
                        type: object
                  type: object
              type: object
      responses:
        '200':
          description: success - user updated
        '201':
          description: success - user created
        '400':
          description: Error response
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Valid role missing
                type: object
components:
  schemas:
    AbsenceReason:
      properties:
        id:
          description: The ID of the AbsenceReason.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the AbsenceReason.
          type: string
        migrationKey:
          description: The migration key associated with the AbsenceReason.
          type: string
        name:
          description: The name of the AbsenceReason.
          type: string
        code:
          description: The code assigned to the AbsenceReason.
          type: string
        isPrimary:
          description: Whether this is a primary AbsenceReason or not.
          type: boolean
      type: object
    AccessToken:
      properties:
        token_type:
          description: Type of token
          type: string
          default: Bearer
        expires_in:
          description: Expiration time of token
          type: integer
          default: 10800
        access_token:
          description: The access token
          type: string
      type: object
    AuthBadRequestResponse:
      properties:
        error:
          type: string
          default: invalid_client
        error_description:
          type: string
          default: Client authentication failed
        message:
          type: string
          default: Client authentication failed
      type: object
    Unauthorized:
      properties:
        error:
          type: string
          default: invalid_client
        error_description:
          type: string
          default: Client authentication failed
        message:
          type: string
          default: Client authentication failed
      type: object
    UnprocessableEntity:
      properties:
        error:
          type: string
          default: invalid_client
        error_description:
          type: string
          default: Client authentication failed
        message:
          type: string
          default: Client authentication failed
      type: object
    BadRequestResponse:
      properties:
        message:
          type: string
          example: Request validation failed
        timestamp:
          type: integer
          example: 1697101490
        status:
          type: integer
          example: 400
        errors:
          properties:
            code:
              type: string
              example: REQ_00001
            message:
              type: string
              example: Validation failed
            detail:
              type: array
              items:
                type: string
              example:
                - The request could not be validated
                - Description of the first validation error
                - Description of the second validation error
          type: object
        traceId:
          type: string
          example: sample-uuid-string
      type: object
    ServerErrorResponse:
      properties:
        message:
          type: string
          example: Server Error
        timestamp:
          type: integer
          example: 1697101490
        status:
          type: integer
          example: 500
        errors:
          properties:
            code:
              type: string
              example: REQ_00001
            message:
              type: string
              example: Server error
            detail:
              type: array
              items:
                type: string
              example:
                - A server error occurred
                - Something bad happened that we did not expect
          type: object
        traceId:
          type: string
          example: sample-uuid-string
      type: object
    SuccessResponse:
      properties:
        message:
          type: string
          example: success
        timestamp:
          type: integer
          example: 1697101490
        status:
          type: integer
          example: 200
        traceId:
          type: string
          example: sample-uuid-string
      type: object
    ArboRole:
      required:
        - id
        - name
        - externalKey
        - migrationKey
        - active
      properties:
        id:
          description: Unique identifier for the arbo role
          type: string
          format: uuid
        name:
          description: The name of the arbo role
          type: string
          example: Administrator
        externalKey:
          description: The external key of the arbo role
          type: string
        migrationKey:
          description: The migration key of the arbo role
          type: string
        active:
          description: The active status of the arbo role
          type: boolean
      type: object
    CompanyDoctor:
      properties:
        id:
          description: The UUID of the company doctor.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the company doctor.
          type: string
        migrationKey:
          description: The migration key associated with the company doctor.
          type: string
        username:
          description: The username of the company doctor. This is available if the user relation is loaded.
          type: string
        person:
          $ref: '#/components/schemas/MasterPerson'
      type: object
    ContactPerson:
      properties:
        externalKey:
          description: External key associated with the contact person
          type: string
        migrationKey:
          description: Migration key associated with the contact person
          type: string
        user:
          $ref: '#/components/schemas/User'
        team:
          description: The team the contact person is associated with
          type: object
        employee:
          $ref: '#/components/schemas/EmployeeResource'
        person:
          $ref: '#/components/schemas/EmployerPersonResource'
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        employer:
          $ref: '#/components/schemas/Employer'
        type:
          description: The type of the contact person
          type: string
          enum:
            - general
            - uwv
            - team-contact-person
            - preferred-professional
        isAuthorized:
          description: Whether the contact person is authorized
          type: boolean
        isUwvContactPerson:
          description: Whether the contact person is a UWV contact person
          type: boolean
        dateCreated:
          description: The date the contact person was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the contact person was updated
          type: string
          format: date-time
      type: object
    PatchEmployerContractRequestBody:
      required:
        - employerContractId,employerContractExternalKey
      properties:
        employerContractId:
          description: Id of the employer contract (required if employerContractExternalKey is not provided)
          type: string
          format: uuid
        employerContractExternalKey:
          description: The external key of the employer contract to be used as an identifier instead of employerContractId (required if employerContractId is not provided)
          type: string
        externalKey:
          description: The external key of the employer contract (This property is used to change the external key of the employer contract)
          type: string
          nullable: true
        employerId:
          description: Id of the employer
          type: string
          format: uuid
        serviceTypeId:
          description: Id of the service type
          type: string
          format: uuid
        organizationalUnitId:
          description: Id of the organizational unit
          type: string
          format: uuid
        contractTypeId:
          description: Id of the contract type
          type: string
          format: uuid
        partnershipId:
          description: Id of the partnership
          type: string
          format: uuid
        dateStart:
          description: Start date of the employer contract
          type: string
          format: date
        dateEnd:
          description: End date of the employer contract
          type: string
          format: date
          nullable: true
        contractStatus:
          description: Status of the employer contract
          type: string
          enum:
            - active
            - ended
            - blocked
        contractNumber:
          description: The employer contract number
          type: string
          nullable: true
        accountNumber:
          description: The account number of the employer contract
          type: string
          nullable: true
        contractHoursFrom:
          description: The minimum starting hours of the employer contract
          type: number
          format: float
          nullable: true
        contractHoursUntil:
          description: The maximum starting hours of the employer contract
          type: number
          format: float
          nullable: true
        incomingDossiers:
          description: Whether the employer contract receives incoming dossiers
          type: boolean
          nullable: true
      type: object
    PostEmployerContractRequestBody:
      description: Employer Contract data
      required:
        - employerId
        - contractTypeId
        - partnershipId
        - dateStart
        - contractStatus
      properties:
        employerId:
          description: The UUID of the Employer.
          type: string
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        externalKey:
          description: The external Key for the Employer Contract to be created.
          type: string
          example: External-Key-Test
          nullable: true
        contractTypeId:
          description: The UUID of the Contract type.
          type: string
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        partnershipId:
          description: The UUID of the Partnership.
          type: string
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        serviceTypeId:
          description: The UUID of the service type. REQUIRED if the partner uses service contracts
          type: string
          example: bc1a50da-1093-4809-8efc-e3553b2f49b0
        dateStart:
          description: YYYY-MM-DD
          type: string
          format: date-time
          example: '2024-01-01'
        dateEnd:
          description: YYYY-MM-DD
          type: string
          format: date-time
          example: '2024-03-01'
          nullable: true
        contractStatus:
          type: string
          enum:
            - active
            - ended
            - blocked
          example: active
        closePrevious:
          description: When adding a new employer contract and the employer already has an open employment contract with no end date you can use this parameter to close the previous contract at the start date of the current contract.
          type: boolean
          example: 'true'
          nullable: true
        incomingDossiers:
          type: boolean
          example: 'true'
          nullable: true
        contractNumber:
          type: string
          example: '58697'
          nullable: true
        accountNumber:
          type: string
          example: '7105698'
          nullable: true
        contractHoursFrom:
          description: For non service contracts you can determine the minimum hours per week for the contract
          type: number
          example: '80.00'
          nullable: true
        contractHoursUntil:
          description: For non service contracts you can determine the maximum hours per week for the contract
          type: number
          example: '80.00'
          nullable: true
      type: object
    Contract:
      properties:
        id:
          description: UUID of the contract
          type: string
        externalKey:
          description: External key associated with the contract
          type: string
        migrationKey:
          description: Migration key associated with the contract
          type: string
        type:
          $ref: '#/components/schemas/ContractType'
        service:
          $ref: '#/components/schemas/ServiceType'
        accountnumber:
          description: Account number associated with the contract
          type: string
        active:
          description: Whether the contract is active
          type: boolean
        dateStart:
          description: The start date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateEnd:
          description: The end date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateCreated:
          description: The date the contract was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the contract was updated
          type: string
          format: date-time
      type: object
    ContractType:
      properties:
        id:
          description: UUID of the contract type
          type: string
        externalKey:
          description: External key associated with the contract type
          type: string
        migrationKey:
          description: Migration key associated with the contract type
          type: string
        name:
          description: The name of the contract type
          type: string
        code:
          description: The code of the contract type
          type: string
        description:
          description: The description of the contract type
          type: string
        subscriptionFee:
          description: The subscription fee of the contract type
          type: string
        type:
          description: The type of the contract type
          type: string
        billingType:
          description: The billing type of the contract type
          type: string
        dateStart:
          description: The start date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateEnd:
          description: The end date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateCreated:
          description: The date the contract type was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the contract type was updated
          type: string
          format: date-time
      type: object
    EmployerContract:
      properties:
        id:
          description: Id of the contract
          type: string
        externalKey:
          description: External key associated with the contract
          type: string
        migrationKey:
          description: Migration key associated with the contract
          type: string
        contractType:
          $ref: '#/components/schemas/ContractType'
        employer:
          $ref: '#/components/schemas/Employer'
        partnership:
          $ref: '#/components/schemas/Partnership'
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        contractStatus:
          description: The status of the contract
          type: string
          enum:
            - active
            - ended
            - blocked
        accountNumber:
          description: Account number associated with the contract
          type: string
        contractNumber:
          description: Contract number associated with the contract
          type: string
        contractHoursFrom:
          description: The minimum starting hours of the employer contract
          type: number
          format: float
          nullable: true
        contractHoursUntil:
          description: The maximum starting hours of the employer contract
          type: number
          format: float
          nullable: true
        dateStart:
          description: The start date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateEnd:
          description: The end date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
          nullable: true
        dateCreated:
          description: The date the contract was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the contract was updated
          type: string
          format: date-time
      type: object
    EmployerServiceContract:
      properties:
        id:
          description: Id of the service contract
          type: string
        externalKey:
          description: External key associated with the contract
          type: string
        migrationKey:
          description: Migration key associated with the contract
          type: string
        contractType:
          $ref: '#/components/schemas/ContractType'
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        employer:
          $ref: '#/components/schemas/Employer'
        partnership:
          $ref: '#/components/schemas/Partnership'
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        contractStatus:
          description: The status of the contract
          type: string
          enum:
            - active
            - ended
            - blocked
        dateStart:
          description: The start date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateEnd:
          description: The end date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
          nullable: true
        dateCreated:
          description: The date the contract was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the contract was updated
          type: string
          format: date-time
      type: object
    OwnRiskContract:
      properties:
        id:
          description: UUID of the own risk contract
          type: string
        type:
          description: The type of the own risk contract
          type: string
        dateCreated:
          description: The date the own risk contract was created
          type: string
        dateUpdated:
          description: The date the own risk contract was updated
          type: string
      type: object
    Partnership:
      properties:
        id:
          description: UUID of the partnership
          type: string
        name:
          description: The name of the partnership
          type: string
        externalKey:
          description: The external key of the partnership
          type: string
        active:
          description: Whether the partnership is active
          type: boolean
        default:
          description: Whether the partnership is the default partnership
          type: boolean
        dateCreated:
          description: The date the partnership was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the partnership was updated
          type: string
          format: date-time
      type: object
    ServiceType:
      properties:
        id:
          description: UUID of the service type
          type: string
        name:
          description: The name of the service type
          type: string
        active:
          description: Whether the service type is active
          type: boolean
        dateCreated:
          description: The date the service type was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the service type was updated
          type: string
          format: date-time
      type: object
    PatchAbsenceCourseRequestBody:
      required:
        - id
        - employmentId|employmentKey
      properties:
        id:
          description: UUID of the absence course
          type: string
          format: uuid
        employmentId:
          description: UUID of the employment
          type: string
          format: uuid
        employmentKey:
          description: External identifier for the employment
          type: string
        externalKey:
          description: External identifier for the absence
          type: string
        dateStart:
          description: Date of the absence event
          type: string
          format: date
        safetyNet:
          description: If applicable, the type of safety net (vangnet) that applies to this absence
          type: string
          enum:
            - disposal
            - special-employment
            - sick-due-to-pregnancy
            - not-specified
            - sick-due-to-childbirth
            - unknown
            - sick-due-to-organ-donation
        absenceReasonId:
          description: Set absence reason based on the UUID of the absence reason
          type: string
          format: uuid
        absenceReasonCode:
          description: Set absence reason based on the 'code' of the absence reason (code is user-configurable)
          type: string
        wageValue:
          description: Wage value at the point in time the absence course is recorded
          type: number
          format: float
        workedHours:
          description: Worked hours at the point in time the absence course is recorded
          type: integer
          format: int32
        recoveryPercentage:
          description: Percentage of recovery, 0 being fully absent, 100 being fully recovered
          type: integer
          format: int32
        recoveryReason:
          description: Reason for recovery, only allowed with 'recoveryPercentage' equal to 100
          type: string
          enum:
            - recovered
            - ill-out-of-service
            - passed-away
            - partial-recovery
            - fully-sick-again
          nullable: true
      type: object
    PostAbsenceCourseRequestBody:
      required:
        - dateStart
        - employmentId
        - employmentKey
        - recoveryPercentage
      properties:
        newDossier:
          description: Flag to indicate if a new dossier is expected to be created, will perform additional validations - if the absence course is within 28 days of a previous absence course a new dossier will not actually be created, instead the absence course will be added to the previous dossier and it will become a compiled dossier
          type: boolean
        externalKey:
          description: External identifier for the absence
          type: string
        safetyNet:
          description: If applicable, the type of safety net (vangnet) that applies to this absence
          type: string
        accidentType:
          description: If applicable, the type of accident that applies to this absence
          type: string
        absenceReasonId:
          description: Set absence reason based on the UUID of the absence reason
          type: string
          format: uuid
        absenceReasonCode:
          description: Set absence reason based on the 'code' of the absence reason (code is user-configurable)
          type: string
        employmentId:
          description: Identifier (UUID) for the employment the absence is related to, exclusive with 'employmentKey'
          type: string
        employmentKey:
          description: Identifier (external key) for the employment the absence is related to, exclusive with 'employmentId'
          type: string
        dateReported:
          description: Date the absence was reported, if omitted defaults to 'now'
          type: string
          format: date
        dateStart:
          description: Date of the absence event, required
          type: string
          format: date
        wageValue:
          description: Wage value at the point in time the absence course is recorded
          type: number
          format: float
        workedHours:
          description: Worked hours at the point in time the absence course is recorded
          type: integer
          format: int32
        recoveryReason:
          description: Reason for recovery, send any value to get a list of valid values, only allowed with 'recoveryPercentage' equal to 100
          type: string
          enum:
            - recovered
            - ill-out-of-service
            - passed-away
            - partial-recovery
            - fully-sick-again
        dateEmploymentEnd:
          description: End date of employment. If the employment's base type allows it can automatically end the employment, will be ignored in other cases
          type: string
          format: date
        setDossierKey:
          description: If a new dossier is being created the external key for that dossier will be set to this value, ignored for existing or compiled dossiers
          type: string
        expectedDurationDays:
          description: Expected duration of the absence in days, purely informational
          type: integer
          format: int32
        recoveryPercentage:
          description: Percentage of recovery, 0 being fully absent, 100 being fully recovered, required
          type: integer
          format: int32
      type: object
    PatchDossierDocumentRequestBody:
      properties:
        id:
          description: External identifier for the document
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          description: External identifier for the document
          type: string
          example: exKey123
        externalKey:
          description: New external identifier for the document
          type: string
          example: exKey123
        documentTypeId:
          description: The uuid of the document type
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: The uuid of the dossier section
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: Whether the document is for both parties
          type: boolean
          example: 'true'
        inReview:
          description: Whether the document is in review
          type: boolean
          example: 'false'
        title:
          description: The title of the document
          type: string
          example: document title
        content:
          description: The content of the document
          type: string
          example: Content of this document.
        reviewByCompanyDoctor:
          description: Whether the document is reviewed by the company doctor. Required if inReview is true
          type: boolean
          example: 'true'
        dateCreated:
          description: The date the document was created
          type: string
          format: date-time
          example: '2021-12-31 23:59:59'
      type: object
    PostDossierDocumentRequestBody:
      required:
        - dossierId
        - documentTypeId
        - dossierSectionId
        - forBothParties
        - title
        - content
      properties:
        dossierId:
          description: The uuid of the dossier
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: External identifier for the document
          type: string
          example: exKey123
        documentTypeId:
          description: The uuid of the document type
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: The uuid of the dossier section
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: Whether the document is for both parties
          type: boolean
          example: 'true'
        inReview:
          description: Whether the document is in review
          type: boolean
          example: 'false'
        title:
          description: The title of the document
          type: string
          example: document title
        content:
          description: The content of the document
          type: string
          example: Content of this document.
        dateCreated:
          description: The date the document was created
          type: string
          format: date-time
          example: '2021-12-31 23:59:59'
      type: object
    PatchDossierExternalResourceRequestBody:
      properties:
        id:
          description: The ID of the external resource to be updated. Required if 'key' is not provided. Mutually exclusive with 'key'.
          type: string
          format: uuid
        key:
          description: The external key of the external resource to be updated. Required if 'id' is not provided. Mutually exclusive with 'id'.
          type: string
        externalKey:
          description: Update the external key of the external resource
          type: string
        priority:
          description: Priority position of the external resource, ordering is low to high
          type: integer
        name:
          description: Name of the external resource
          type: string
        url:
          description: URL of the external resource
          type: string
        icon:
          description: Icon of the external resource
          type: string
          nullable: true
      type: object
    PostDossierExternalResourceRequestBody:
      properties:
        priority:
          description: Priority position of the external resource
          type: integer
        externalKey:
          description: external key of the external resource
          type: string
        name:
          description: Name of the external resource
          type: string
        url:
          description: URL of the external resource
          type: string
        icon:
          description: Icon of the external resource
          type: string
        dossierId:
          description: Dossier associated with the external resource
          type: string
      type: object
    PatchDossierNoteRequestBody:
      properties:
        id:
          description: Id for the note
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          description: External identifier for the note
          type: string
          example: Note@KeyXY
        externalKey:
          description: External identifier for the note
          type: string
          example: Note@KeyXY
        noteTypeId:
          description: The uuid of the note type
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: The uuid of the dossier section
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        taskId:
          description: The id of the task
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        isConcept:
          description: Whether the note is a concept
          type: boolean
          example: 'true'
        forBothParties:
          description: Whether the note is for both parties
          type: boolean
          example: 'true'
        medicalOnly:
          description: Whether the note is medical only
          type: boolean
          example: 'false'
        title:
          description: The title of the note
          type: string
          example: Note title
        content:
          description: The content of the note
          type: string
          example: Content of this note.
        dateCreated:
          description: The date the note was created
          type: string
          format: date-time
          example: '2021-12-31 23:59:59'
      type: object
    PostDossierNoteRequestBody:
      required:
        - dossierId
        - noteTypeId
        - dossierSectionId
        - forBothParties
        - medicalOnly
        - title
        - content
      properties:
        dossierId:
          description: The uuid of the dossier
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: External identifier for the note
          type: string
          example: exKey123
        noteTypeId:
          description: The uuid of the note type
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: The uuid of the dossier section
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        taskId:
          description: The id of the task
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        isConcept:
          description: Whether the note is a concept
          type: boolean
          example: 'true'
        forBothParties:
          description: Whether the note is for both parties
          type: boolean
          example: 'true'
        medicalOnly:
          description: Whether the note is medical only
          type: boolean
          example: 'false'
        title:
          description: The title of the note
          type: string
          example: Note title
        content:
          description: The content of the note
          type: string
          example: Content of this note.
        dateCreated:
          description: The date the note was created
          type: string
          format: date-time
          example: '2021-12-31 23:59:59'
      type: object
    PatchDossierUploadRequestBody:
      properties:
        id:
          description: The id of the upload
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          description: Current external identifier for the upload
          type: string
          example: exKey123
        externalKey:
          description: New external identifier for the upload
          type: string
          example: exKey123
        uploadTypeId:
          description: The uuid of the upload type
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: The uuid of the dossier section
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: Whether the upload is for both parties
          type: boolean
          example: 'true'
        title:
          description: The title of the upload
          type: string
          example: upload title
        note:
          description: The content of the upload
          type: string
          example: Content of this upload.
        dateCreated:
          description: The date the upload was created
          type: string
          format: date-time
          example: '2021-12-31 23:59:59'
      type: object
    PostDossierUploadRequestBody:
      required:
        - dossierId
        - uploadTypeId
        - dossierSectionId
        - forBothParties
        - title
        - file
      properties:
        dossierId:
          description: The id of the dossier
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        externalKey:
          description: External identifier for the upload
          type: string
          example: exKey123
        uploadTypeId:
          description: The uuid of the upload type
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        dossierSectionId:
          description: The uuid of the dossier section
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        forBothParties:
          description: Whether the upload is for both parties
          type: boolean
          example: 'true'
        title:
          description: The title of the upload
          type: string
          example: upload title
        note:
          description: The note of the upload
          type: string
          example: Note of this upload.
        file:
          description: Base64-encoded file content
          type: string
          example: JVBERi0xLjcNCiW1tbW1DQoxIDAgb2JqDQo8PC9UeXBlL5jZXMgODg1IDAgUj4=
        dateCreated:
          description: The date the upload was created
          type: string
          format: date-time
          example: '2021-12-31 23:59:59'
      type: object
    PatchDossierRequestBody:
      required:
        - id
      properties:
        id:
          description: Id of the dossier to be updated
          type: string
          format: uuid
        externalKey:
          description: External identifier for the dossier
          type: string
        dossierStatus:
          description: The status of the dossier, if omitted defaults to 'open', unless 'dateCompleted' is set  in the past, then it defaults to 'closed'
          type: string
          enum:
            - open
            - closed
        dateReported:
          description: Date the dossier was reported, if omitted defaults to 'now'
          type: string
          format: date
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment, required if 'employmentKey' is omitted
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment, required if 'employmentId' is omitted
          type: string
        protocol:
          description: The protocol of the dossier
          type: string
        dossierNumber:
          description: The dossier number, defaults to 0
          type: string
        dossierOfficerId:
          description: The id of the dossier officer, required if 'dossierOfficerKey' is omitted
          type: string
          format: uuid
        dossierOfficerKey:
          description: The key of the dossier officer, required if 'dossierOfficerId' is omitted
          type: string
        safetyNet:
          description: If applicable, the type of safety net (vangnet) that applies to this dossier
          type: string
        dossierClosureReason:
          description: The reason the dossier was closed
          type: string
        contractId:
          description: The id of the contract
          type: string
          format: uuid
        expectedDurationDays:
          description: The expected duration of the dossier in days
          type: integer
        dateCompleted:
          description: The date the dossier was completed
          type: string
          format: date
      type: object
    PatchMedicalPreventiveDossierRequestBody:
      properties:
        externalKey:
          description: External identifier for the dossier
          type: string
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment
          type: string
      type: object
    PatchPreventiveDossierRequestBody:
      properties:
        externalKey:
          description: External identifier for the dossier
          type: string
        dateReported:
          description: The date the dossier was reported
          type: string
          format: date
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment
          type: string
        dateCompleted:
          description: The date the dossier was completed
          type: string
          format: date
      type: object
    PatchSpoor2RequestBody:
      properties:
        traject:
          description: What type of parental leave is being taken
          type: string
          enum:
            - haalbaarheidsonderzoek
            - spoor-2
            - spoor-2-orienterend
            - spoor-3
            - outplacement
            - jobcoaching
            - loopbaancoaching
            - loopbaancoaching-orientatie
            - talentenanalyse-act-meting
            - ontwikkeltraject
      type: object
    PatchZwerdDossierRequestBody:
      properties:
        externalKey:
          description: External identifier for the dossier
          type: string
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment
          type: string
        payrollNumber:
          description: The payroll number of the employee
          type: string
        daySalary:
          description: The daily salary of the employee
          type: number
          format: float
        dateEmploymentEnd:
          description: The date the employee's employment was completed
          type: string
          format: date
      type: object
    PostBirthLeaveRequestBody:
      required:
        - beneficiary
        - dateOfBirthExpected
        - weeks
      properties:
        beneficiary:
          description: Who the beneficiary of the leave is
          type: string
          enum:
            - employee
            - employer
        dateOfBirthExpected:
          description: The expected birthdate of the child
          type: string
          format: date
        dateStartActual:
          description: The actual start date of the requested leave
          type: string
          format: date
        weeks:
          description: The number of weeks of leave
          type: integer
      type: object
    PostDossierRequestBody:
      required:
        - dateStart
        - employmentId|employmentKey
      properties:
        externalKey:
          description: External identifier for the absence
          type: string
        dossierStatus:
          description: The status of the dossier, if omitted defaults to 'open', unless 'dateCompleted' is set  in the past, then it defaults to 'closed'
          type: string
          enum:
            - open
            - closed
        dateReported:
          description: Date the absence was reported, if omitted defaults to 'now'
          type: string
          format: date
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment, required if 'employmentKey' is omitted
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment, required if 'employmentId' is omitted
          type: string
        protocol:
          description: The protocol of the dossier
          type: string
        dossierNumber:
          description: The dossier number, defaults to 0
          type: string
        dossierOfficerId:
          description: The id of the dossier officer, required if 'dossierOfficerKey' is omitted
          type: string
          format: uuid
        dossierOfficerKey:
          description: The key of the dossier officer, required if 'dossierOfficerId' is omitted
          type: string
        safetyNet:
          description: If applicable, the type of safety net (vangnet) that applies to this absence
          type: string
        dossierClosureReason:
          description: The reason the dossier was closed
          type: string
        contractId:
          description: The id of the contract
          type: string
          format: uuid
        expectedDurationDays:
          description: The expected duration of the absence in days
          type: integer
        dateCompleted:
          description: The date the dossier was completed
          type: string
          format: date
      type: object
    PostMedicalPreventiveDossierRequestBody:
      required:
        - dateStart
        - employmentId|employmentKey
      properties:
        externalKey:
          description: External identifier for the absence
          type: string
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment
          type: string
      type: object
    PostPaidParentalLeaveRequestBody:
      required:
        - dateOfBirth
        - dateFirstLeave
        - paidParentalLeaveType
        - weeks
      properties:
        paidParentalLeaveType:
          description: What type of parental leave is being taken
          type: string
          enum:
            - birth
            - adoption
            - foster-care
            - cohabiting
        dateOfBirth:
          description: The birthdate of the child
          type: string
          format: date
        dateFirstLeave:
          description: The start date of the requested leave
          type: string
          format: date
        dateAdmission:
          description: The date of admission
          type: string
          format: date
        weeks:
          description: The number of weeks of leave
          type: integer
        children:
          description: The number of children the leave applies to
          type: integer
      type: object
    PostPregnancyDossierRequestBody:
      required:
        - dateStart
        - employmentId
      properties:
        externalKey:
          description: External identifier for the absence
          type: string
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment
          type: string
        dateOfBirthExpected:
          description: The expected date of birth
          type: string
          format: date
        dateOfActualBirth:
          description: The actual date of birth
          type: string
          format: date
        dateActualLeave:
          description: The actual start date of birth leave
          type: string
          format: date
        dateExpectedLeave:
          description: The expected leave date
          type: string
          format: date
        dateFirstWorkingDay:
          description: The first working day
          type: string
          format: date
        dateActualFirstWorkingDay:
          description: The actual first working day
          type: string
          format: date
        expectsMultiples:
          description: Flag to indicate if multiple babies are expected
          type: boolean
        hospitalizationChild:
          description: Flag to indicate if the child had to be Hospitalized
          type: boolean
        flexibleLeave:
          description: Flag to indicate if the leave is flexible
          type: boolean
          nullable: true
        dateReported:
          description: The report date
          type: string
          format: date
        dateCompleted:
          description: The date the dossier was completed
          type: string
          format: date
        requestedLeavePeriod:
          description: The requested leave period
          type: integer
          format: int32
      type: object
    PostPreventiveDossierRequestBody:
      required:
        - dateStart
        - employmentId|employmentKey
        - dateReported
      properties:
        externalKey:
          description: External identifier for the absence
          type: string
        dateReported:
          description: The date the dossier was reported
          type: string
          format: date
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment
          type: string
        dateCompleted:
          description: The date the dossier was completed
          type: string
          format: date
      type: object
    PostSpoor2RequestBody:
      properties:
        traject:
          description: What type of parental leave is being taken
          type: string
          enum:
            - haalbaarheidsonderzoek
            - spoor-2
            - spoor-2-orienterend
            - spoor-3
            - outplacement
            - jobcoaching
            - loopbaancoaching
            - loopbaancoaching-orientatie
            - talentenanalyse-act-meting
            - ontwikkeltraject
      type: object
    PostZwerdDossierRequestBody:
      required:
        - dateStart
        - employmentId|employmentKey
        - dateEmploymentEnd
      properties:
        externalKey:
          description: External identifier for the absence
          type: string
        dateStart:
          description: The date the dossier started
          type: string
          format: date
        employmentId:
          description: The id of the employment
          type: string
          format: uuid
        employmentKey:
          description: The key of the employment
          type: string
        payrollNumber:
          description: The payroll number of the employee
          type: string
        daySalary:
          description: The daily salary of the employee
          type: number
          format: float
        dateEmploymentEnd:
          description: The date the employee's employment was completed
          type: string
          format: date
      type: object
    AbsenceCourse:
      properties:
        id:
          description: UUID of the absence course
          type: string
        externalKey:
          description: External key associated with the absence course
          type: string
        employeeExternalKey:
          description: External key of the associated employee
          type: string
          nullable: true
        employmentExternalKey:
          description: External key of the associated employment
          type: string
          nullable: true
        employmentId:
          description: UUID of the associated employment
          type: string
          nullable: true
        dateReported:
          description: The report date in YYYY-MM-DD format
          type: string
          format: date
        dateStart:
          description: The start date in YYYY-MM-DD format
          type: string
          format: date
        dateEnd:
          description: The end date in YYYY-MM-DD format
          type: string
          format: date
        absenceReason:
          oneOf:
            - $ref: '#/components/schemas/AbsenceReason'
          nullable: true
          description: The absence reason associated with the absence course, available if the relation is included in the query
        recoveryPercentage:
          description: Percentage of recovery
          type: number
          format: float
        recoveryReason:
          description: The recovery reason associated with the absence course, available if the relation is included in the query
          type: string
          enum:
            - recovered
            - ill-out-of-service
            - passed-away
            - partial-recovery
            - fully-sick-again
          nullable: true
        wageValue:
          description: Value of the wage
          type: number
          format: float
        workedHours:
          description: Number of hours worked
          type: number
          format: float
        safetyNet:
          description: The safety net name
          type: string
          nullable: true
        dossier:
          oneOf:
            - $ref: '#/components/schemas/Dossier'
          nullable: true
          description: The dossier associated with the absence course, available if the relation is included in the query
        dateCreated:
          description: The date and time the absence course was created in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the absence course was last updated in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
      type: object
    BirthLeaveDossier:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - $ref: '#/components/schemas/BirthLeaveDossierExtension'
    BirthLeaveDossierExtension:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - properties:
            birthLeave:
              type: array
              items:
                $ref: '#/components/schemas/BirthLeave'
          type: object
    BirthLeave:
      properties:
        id:
          description: The ID of the Birth Leave.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the Dossier.
          type: string
        beneficiary:
          description: Who the beneficiary of the leave is
          type: string
          enum:
            - employee
            - employer
        dateOfBirthExpected:
          description: The expected birthdate of the child
          type: string
          format: date
        dateStartActual:
          description: The actual start date of the requested leave
          type: string
          format: date
        weeks:
          description: The number of weeks of leave
          type: integer
      type: object
    DossierDocumentResource:
      properties:
        id:
          description: The UUID of the Dossier.
          type: string
        externalKey:
          description: The external key associated with the Dossier Document.
          type: string
          nullable: true
        title:
          description: The title of the Dossier Document.
          type: string
        content:
          description: The content of the Dossier Document.
          type: string
        isConcept:
          description: Whether the Dossier Document is a concept.
          type: boolean
        inReview:
          description: Whether the Dossier Document is in review.
          type: boolean
        forBothParties:
          description: Whether the Dossier Document is for both parties.
          type: boolean
        dateCreated:
          description: The date and time the Dossier Document was created.
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the Dossier Document was last updated.
          type: string
          format: date-time
        dossier:
          oneOf:
            - $ref: '#/components/schemas/Dossier'
          nullable: true
          description: The dossier associated with the document.
        documentType:
          oneOf:
            - $ref: '#/components/schemas/DossierDocumentType'
          nullable: true
          description: The document type associated with the document.
        dossierSection:
          oneOf:
            - $ref: '#/components/schemas/DossierSection'
          nullable: true
          description: The dossier section associated with the document.
      type: object
    DossierDocumentType:
      properties:
        id:
          description: UUID of the document type
          type: string
          format: uuid
        externalKey:
          description: External key associated with the document type
          type: string
        migrationKey:
          description: Migration key associated with the document type
          type: string
        name:
          description: Name of the document type
          type: string
        code:
          description: Code of the document type
          type: string
        communicateWithEmployee:
          description: Communicate with employee
          type: boolean
        reviewable:
          description: Reviewable
          type: boolean
        isMedical:
          description: Is medical
          type: boolean
        isAbsence:
          description: Is absence
          type: boolean
        isHr:
          description: Is HR
          type: boolean
        feedbackToDossier:
          description: Feedback to dossier
          type: boolean
        forceDiagnose:
          description: Force diagnose
          type: boolean
        feedbackDocumentTypeId:
          description: Feedback document type ID
          type: string
          format: uuid
        dateCreated:
          description: Date the document type was created
          type: string
          format: date-time
        dateUpdated:
          description: Date the document type was last updated
          type: string
          format: date-time
      type: object
    DossierNoteResource:
      properties:
        id:
          description: The ID of the Dossier Note.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the Dossier Note.
          type: string
          nullable: true
        title:
          description: The title of the Dossier Note.
          type: string
        content:
          description: The content of the Dossier Note.
          type: string
        forBothParties:
          description: Whether the Dossier Note is for both parties.
          type: boolean
        medicalOnly:
          description: Whether the Dossier Note is medical only.
          type: boolean
        isConcept:
          description: Whether the Dossier Note is a concept.
          type: boolean
        dateCreated:
          description: The date and time the Dossier Note was created.
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the Dossier Note was updated.
          type: string
          format: date-time
        dossier:
          oneOf:
            - $ref: '#/components/schemas/Dossier'
          nullable: true
          description: The dossier associated with the document.
        noteType:
          oneOf:
            - $ref: '#/components/schemas/DossierNoteType'
          nullable: true
          description: The note type associated with the document.
        dossierSection:
          oneOf:
            - $ref: '#/components/schemas/DossierSection'
          nullable: true
          description: The dossier section associated with the document.
      type: object
    DossierNoteType:
      properties:
        id:
          description: UUID of the Note type
          type: string
          format: uuid
        externalKey:
          description: External key associated with the note type
          type: string
          nullable: true
        migrationKey:
          description: Migration key associated with the note type
          type: string
        name:
          description: Name of the note type
          type: string
        code:
          description: Code of the note type
          type: string
          nullable: true
        isMedical:
          description: Indicates if the note type is medical
          type: boolean
        isMedicalConfidential:
          description: Indicates if the note type is medical confidential
          type: boolean
        isAbsence:
          description: Indicates if the note type is an absence
          type: boolean
        isHr:
          description: Indicates if the note type is HR
          type: boolean
        dateCreated:
          description: Date the note type was created
          type: string
          format: date-time
        dateUpdated:
          description: Date the note type was last updated
          type: string
          format: date-time
      type: object
    DossierUploadResource:
      properties:
        id:
          description: The id of the Dossier.
          type: string
        externalKey:
          description: The external key associated with the Dossier Upload.
          type: string
        title:
          description: The title of the Dossier Upload.
          type: string
        note:
          description: The note of the Dossier Upload.
          type: string
        forBothParties:
          description: Whether the Dossier Upload is for both parties.
          type: boolean
        communicateWithEmployee:
          description: Whether the Dossier Upload is communicated with employees.
          type: boolean
        dateCreated:
          description: The date and time the Dossier Upload was created.
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the Dossier Upload was last updated.
          type: string
          format: date-time
        dossier:
          oneOf:
            - $ref: '#/components/schemas/Dossier'
          nullable: true
          description: The dossier associated with the upload.
        uploadType:
          oneOf:
            - $ref: '#/components/schemas/DossierUploadType'
          nullable: true
          description: The upload type associated with the upload.
        dossierSection:
          oneOf:
            - $ref: '#/components/schemas/DossierSection'
          nullable: true
          description: The dossier section associated with the upload.
      type: object
    DossierUploadType:
      properties:
        id:
          description: UUID of the upload type
          type: string
          format: uuid
          example: cc0b44dd-9270-44ca-bff6-837cb23cbfcb
        externalKey:
          description: External key associated with the upload type
          type: string
          example: external-key-2
        migrationKey:
          description: Migration key associated with the upload type
          type: string
          example: migrationKey@23
        name:
          description: Name of the upload type
          type: string
          example: Medical certificate - 2nd opinion
        code:
          description: Code of the upload type
          type: string
          example: MED-2ND-OPINION
        communicateWithEmployee:
          description: Communicate with employee
          type: boolean
        isMedical:
          description: Whether the upload type is medical
          type: boolean
        isAbsence:
          description: Whether the upload type is absence
          type: boolean
        isHr:
          description: Whether the upload type is HR
          type: boolean
        feedbackToDossier:
          description: Feedback to dossier
          type: boolean
        dateCreated:
          description: Date the upload type was created
          type: string
          format: date-time
        dateUpdated:
          description: Date the upload type was last updated
          type: string
          format: date-time
      type: object
    DossierExternalResourceResource:
      properties:
        dossier:
          oneOf:
            - $ref: '#/components/schemas/Dossier'
          nullable: true
          description: Dossier associated with the external resource
        externalKey:
          description: External key of the dossier external resource
          type: string
          nullable: true
        name:
          description: Name of the dossier external resource
          type: string
        url:
          description: URL of the dossier external resource
          type: string
        icon:
          description: Icon of the dossier external resource
          type: string
        dateCreated:
          description: The date the dossier external resource was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the dossier external resource was updated
          type: string
          format: date-time
      type: object
    Dossier:
      properties:
        id:
          description: The ID of the Dossier.
          type: string
          format: uuid
        type:
          description: The type of the Dossier.
          type: string
        externalKey:
          description: The external key associated with the Dossier.
          type: string
        dateStart:
          description: The start date in ISO8601 format.
          type: string
        dateEnd:
          description: The end date in ISO8601 format.
          type: string
        dossierStatus:
          description: The current status of the Dossier.
          type: string
        accidentType:
          description: The accident type of the Dossier.
          type: string
        nursingAddress:
          type: object
        dateCreated:
          description: Date the note type was created
          type: string
          format: date-time
        dateUpdated:
          description: Date the note type was last updated
          type: string
          format: date-time
      type: object
    DossierSection:
      properties:
        id:
          description: UUID of the DossierSection
          type: string
          format: uuid
        externalKey:
          description: External key associated with the dossier section
          type: string
          nullable: true
        migrationKey:
          description: Migration key associated with the dossier section
          type: string
        name:
          description: Name of the dossier section
          type: string
        code:
          description: Code of the dossier section
          type: string
        color:
          description: Color of the dossier section
          type: string
        canContainNotes:
          description: Whether the dossier section can contain notes
          type: boolean
        canContainDocuments:
          description: Whether the dossier section can contain documents
          type: boolean
        dossierType:
          description: Type of dossier
          type: string
        dateCreated:
          description: Date the dossier section was created
          type: string
          format: date-time
        dateUpdated:
          description: Date the dossier section was last updated
          type: string
          format: date-time
      type: object
    DossierTask:
      properties:
        id:
          description: UUID of the DossierTask
          type: string
        externalKey:
          description: External key associated with the dossier task
          type: string
        migrationKey:
          description: Migration key associated with the dossier task
          type: string
        dossier:
          oneOf:
            - $ref: '#/components/schemas/Dossier'
          nullable: true
          description: The dossier associated with the dossier task, available if the relation is included in the query
        baseTaskId:
          description: UUID of the base task
          type: string
        baseTask:
          oneOf:
            - $ref: '#/components/schemas/Task'
          nullable: true
          description: The base task associated with the dossier task
        taskStatus:
          description: status of the task
          type: string
        title:
          description: title of the task
          type: string
        content:
          description: content of the task
          type: string
        isPostoponed:
          description: declares whether task is postponed
          type: boolean
        dateStart:
          description: date start of the task
          type: string
          format: date-time
        dateEnd:
          description: date end of the task
          type: string
          format: date-time
        dateCompleted:
          description: date of completion of the task
          type: string
          format: date-time
        dateCreated:
          description: date created of the task
          type: string
          format: date-time
        dateUpdated:
          description: date upddated of the task
          type: string
          format: date-time
      type: object
    PaidParentalLeaveDossier:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - $ref: '#/components/schemas/PaidParentalLeaveDossierExtension'
    PaidParentalLeaveDossierExtension:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - properties:
            paidParentalLeave:
              type: array
              items:
                $ref: '#/components/schemas/PaidParentalLeave'
          type: object
    PaidParentalLeave:
      properties:
        id:
          description: The ID of the Paid Parental Leave.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the Dossier.
          type: string
          nullable: true
        paidParentalLeaveType:
          description: What type of parental leave is being taken
          type: string
          enum:
            - birth
            - adoption
            - foster-care
            - cohabiting
        dateOfBirth:
          description: The birthdate of the child
          type: string
          format: date
        dateFirstLeave:
          description: The start date of the requested leave
          type: string
          format: date
        dateAdmission:
          description: The date of admission
          type: string
          format: date
          nullable: true
        weeks:
          description: The number of weeks of leave
          type: integer
        children:
          description: The number of children the leave applies to
          type: integer
          nullable: true
      type: object
    PregnancyDossier:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - $ref: '#/components/schemas/PregnancyDossierExtension'
    PregnancyDossierExtension:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - properties:
            Pregnancy:
              type: array
              items:
                $ref: '#/components/schemas/Pregnancy'
          type: object
    Pregnancy:
      properties:
        id:
          description: The ID of the Dossier.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the Dossier.
          type: string
          nullable: true
        dateOfBirthExpected:
          description: The expected date of birth
          type: string
          format: date
          nullable: true
        dateOfActualBirth:
          description: The actual date of birth
          type: string
          format: date
          nullable: true
        dateActualLeave:
          description: The actual start date of birth leave
          type: string
          format: date
          nullable: true
        dateExpectedLeave:
          description: The expected leave date
          type: string
          format: date
          nullable: true
        dateFirstWorkingDay:
          description: The first working day
          type: string
          format: date
          nullable: true
        dateActualFirstWorkingDay:
          description: The actual first working day
          type: string
          format: date
          nullable: true
        expectsMultiples:
          description: Flag to indicate if multiple babies are expected
          type: boolean
        hospitalizationChild:
          description: Flag to indicate if the child had to be hospitalized
          type: boolean
        flexibleLeave:
          description: Flag to indicate if the leave is flexible
          type: boolean
      type: object
    ReturnToWorkAdviceAbsenceCourse:
      properties:
        dateStart:
          description: The start date in YYYY-MM-DD format
          type: string
          format: date
        dateEnd:
          description: The end date in YYYY-MM-DD format
          type: string
          format: date
        recoveryPercentage:
          description: Percentage of recovery
          type: number
          format: float
      type: object
    ReturnToWorkAdvice:
      properties:
        data:
          properties:
            employerId:
              description: The ID of the employer
              type: string
              format: uuid
            employeeId:
              description: The ID of the employee
              type: string
              format: uuid
            dossierId:
              description: The ID of the dossier
              type: string
              format: uuid
            dateReport:
              description: The report date of the dossier
              type: string
              format: datetime
            absenceCourses:
              type: array
              items:
                $ref: '#/components/schemas/ReturnToWorkAdviceAbsenceCourse'
          type: object
      type: object
    Spoor2Dossier:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - $ref: '#/components/schemas/Spoor2DossierExtension'
    Spoor2DossierExtension:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - properties:
            id:
              description: The ID of the Dossier.
              type: string
              format: uuid
            safetyNet:
              description: The type of the Dossier.
              type: string
            spoor2:
              type: array
              items:
                $ref: '#/components/schemas/Spoor2'
          type: object
    Spoor2:
      properties:
        id:
          description: The ID of the Dossier.
          type: string
          format: uuid
        traject:
          description: The traject type of the Dossier.
          type: string
        externalKey:
          description: The external key associated with the Dossier.
          type: string
      type: object
    ZwerdDossier:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - $ref: '#/components/schemas/ZwerdDossierExtension'
    ZwerdDossierExtension:
      type: object
      allOf:
        - $ref: '#/components/schemas/Dossier'
        - properties:
            safetyNet:
              description: The type of safety net (vangnet) that applies to this absence
              type: string
            zwerd:
              type: array
              items:
                $ref: '#/components/schemas/Zwerd'
          type: object
    Zwerd:
      properties:
        id:
          description: The ID of the Dossier.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the Dossier.
          type: string
      type: object
    DossierOfficer:
      properties:
        id:
          description: The UUID of the Dossier officer.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the dossier officer.
          type: string
        migrationKey:
          description: The migration key associated with the dossier officer.
          type: string
        username:
          description: The username of the dossier officer. This is available if the user relation is loaded.
          type: string
        person:
          $ref: '#/components/schemas/MasterPerson'
      type: object
    PatchEmployeeRequestBody:
      required:
        - employeeId
      properties:
        employeeId:
          description: The uuid of the existing employee
          type: string
          format: uuid
        externalKey:
          description: The external key of the employee
          type: string
        person:
          properties:
            initials:
              description: The Initials of the Employee
              type: string
            firstName:
              description: The first name of the Employee
              type: string
            prefix:
              description: The prefix of the name of the Employee
              type: string
            lastName:
              description: The last name of the Employee
              type: string
            prefixPartner:
              description: The prefix of the name of the partner of the Employee
              type: string
            lastnamePartner:
              description: The surname of the partner of the Employee
              type: string
            namePreference:
              description: The name preference for the Employee.
              type: string
              default: own
              enum:
                - own
                - partner
                - own-partner
                - partner-own
            salutation:
              description: The title of the Employee (Mr,Mrs or Mister,Missus).
              type: string
              enum:
                - full
                - short
            gender:
              description: The gender of the Employee.
              type: string
              enum:
                - m
                - f
                - x
            dateOfBirth:
              description: The date of birth of the Employee.
              type: string
              format: date
            dateOfDeath:
              description: The date of death of the Employee.
              type: string
              format: date
            nationality:
              description: The nationality of the Employee in ISO 3166-1 alpha-2 format (2 letters).
              type: string
            placeOfBirth:
              description: The city of birth of the Employee
              type: string
            maritalStatus:
              description: The marital status of the Employee
              type: string
              enum:
                - single
                - married
                - partnership
                - widowed
                - widowed_after_marriage
                - widowed_after_partnership
                - divorced
                - divorced_after_marriage
                - divorced_after_partnership
                - unknown
            noRisk:
              description: No risk indication for the Employee.
              type: boolean
            sfb:
              description: Structural Functional Disability (SFB) for the Employee.
              type: boolean
            socialSecurityNumber:
              description: The SSN(BSN) of the employee.
              type: string
              pattern: ^\d{9}$
          type: object
        address:
          properties:
            street:
              description: The street of the primary address of the Employee.
              type: string
            number:
              description: The number of the primary address of the Employee.
              type: string
            postalCode:
              description: The postal code of the primary address of the Employee.
              type: string
            city:
              description: The city of the primary address of the Employee .
              type: string
            country:
              description: The country of the Employee in ISO 3166-1 alpha-2 format (2 letters).
              type: string
          type: object
        communicationMethods:
          properties:
            privateEmail:
              description: The private email of the Employee
              type: string
              format: email
            privatePhone:
              description: The private phone of the Employee
              type: string
            privateMobile:
              description: The private mobile phone of the Employee
              type: string
            businessEmail:
              description: The business email of the Employee
              type: string
              format: email
            businessPhone:
              description: The business phone of the Employee
              type: string
            businessMobile:
              description: The business mobile phone of the Employee
              type: string
          type: object
      type: object
    PostEmployeeRequestBody:
      required:
        - person.initials
        - person.surname
        - person.namePreference
        - person.gender
        - person.dateOfBirth
        - address.street
        - address.number
        - address.postalCode
        - address.city
        - employment.organizationalUnitId|employment.organizationalUnitKey
        - employment.hoursPerWeek
        - employment.dateStart
      properties:
        externalKey:
          description: The external key of the employee
          type: string
        person:
          properties:
            initials:
              description: The Initials of the Employee
              type: string
            firstName:
              description: The first name of the Employee
              type: string
            prefix:
              description: The prefix of the name of the Employee
              type: string
            lastName:
              description: The last name of the Employee
              type: string
            prefixPartner:
              description: The prefix of the name of the partner of the Employee
              type: string
            lastnamePartner:
              description: The surname of the partner of the Employee
              type: string
            namePreference:
              description: The name preference for the Employee.
              type: string
              default: own
              enum:
                - own
                - partner
                - own-partner
                - partner-own
            salutation:
              description: The title of the Employee (Mr,Mrs or Mister,Missus).
              type: string
              enum:
                - full
                - short
            gender:
              description: The gender of the Employee.
              type: string
              enum:
                - m
                - f
                - x
            dateOfBirth:
              description: The date of birth of the Employee.
              type: string
              format: date
            dateOfDeath:
              description: The date of death of the Employee.
              type: string
              format: date
            nationality:
              description: The nationality of the Employee in ISO 3166-1 alpha-2 format (2 letters).
              type: string
            placeOfBirth:
              description: The city of birth of the Employee
              type: string
            maritalStatus:
              description: The marital status of the Employee
              type: string
              enum:
                - single
                - married
                - partnership
                - widowed
                - widowed_after_marriage
                - widowed_after_partnership
                - divorced
                - divorced_after_marriage
                - divorced_after_partnership
                - unkown
            noRisk:
              description: No risk indication for the Employee.
              type: boolean
            sfb:
              description: Structural Functional Disability (SFB) status of the Employee.
              type: boolean
            socialSecurityNumber:
              description: The SSN(BSN) of the employee.
              type: string
              pattern: ^\d{9}$
          type: object
        address:
          properties:
            street:
              description: The street of the primary address of the Employee.
              type: string
            number:
              description: The number of the primary address of the Employee.
              type: string
            postalCode:
              description: The postal code of the primary address of the Employee.
              type: string
            city:
              description: The city of the primary address of the Employee .
              type: string
            country:
              description: The country of the Employee in ISO 3166-1 alpha-2 format (2 letters).
              type: string
          type: object
        communicationMethods:
          properties:
            privateEmail:
              description: The private email of the Employee
              type: string
              format: email
            privatePhone:
              description: The private phone of the Employee
              type: string
            privateMobile:
              description: The private mobile phone of the Employee
              type: string
            businessEmail:
              description: The business email of the Employee
              type: string
              format: email
            businessPhone:
              description: The business phone of the Employee
              type: string
            businessMobile:
              description: The business mobile phone of the Employee
              type: string
          type: object
        employment:
          properties:
            organizationalUnitId:
              description: The UUID of the Organisational Unit the Employee belongs to. Mutually exclusive with organizationalUnitKey
              type: string
              format: uuid
            organizationalUnitKey:
              description: The external key of the Organisational Unit the Employee belongs to. Mutually exclusive with organizationalUnitId
              type: string
            employmentExternalKey:
              description: The external key assigned to the employment generated for the Employee
              type: string
            employeeNumber:
              description: The employee number of the Employee
              type: string
            station:
              description: The station (post) of the Employee
              type: string
            externalSupervisorId:
              description: The id of the external supervisor of the Employee
              type: string
              format: uuid
              nullable: true
            internalSupervisorId:
              description: The id of the internal supervisor of the Employee (should be another employee.id)
              type: string
              format: uuid
              nullable: true
            employmentTypeId:
              description: The id of the employment type of the Employee. Mutually exclusive with employmentTypeCode
              type: string
              format: uuid
            employmentTypeCode:
              description: The code of the employment type of the Employee. Mutually exclusive with employmentTypeId
              type: string
            jobTitle:
              description: The job title (position) of the Employee
              type: string
            dateStart:
              description: The start date of the first Employment Contract of the Employee.
              type: string
              format: date
            dateEnd:
              description: The end date of the first Employment Contract of the Employee.
              type: string
              format: date
            dateSeniority:
              description: The seniority date of the Employee.
              type: string
              format: date
            employmentEndReason:
              description: The reason for the end of employment of the Employee
              type: string
              enum:
                - end-employment
                - sick-during-end-of-employment
                - reach-aow
                - death
                - dismissal
                - retirement
                - temporary-old-age-pension
                - wia
                - termination-of-temporary-employment
                - unknown
                - within-probationary-period
                - dismissal-own-request
                - immediate-dismissal
                - mutual-termination-of-employment
            normHoursPerWeek:
              description: Standard hours per week the Employee works.
              type: number
              format: float
              nullable: true
            hoursPerWeek:
              description: Hours per week the Employee works.
              type: number
              format: float
              nullable: true
            paymentPeriod:
              description: The payment period of the Employee.
              type: string
              enum:
                - hour
                - day
                - week
                - four_weeks
                - month
                - year
              nullable: true
            grossSalary:
              description: The gross salary of the employee.
              type: number
              format: float
              nullable: true
            universalSalary:
              description: The universal(uniform) salary of the employee.
              type: number
              format: float
              nullable: true
          type: object
        uwv:
          properties:
            registrationNumber:
              description: The UWV registration number of the Employee
              type: string
            sectorId:
              description: The UWV sector of the Employee
              type: integer
            riskCode:
              description: The UWV risk code of the Employee
              type: integer
            waitingPeriod:
              description: The waiting period (related to UWV) of the Employee
              type: integer
            payrollDiscountIndication:
              description: Indication for payroll discount (related to UWV) for the Employee.
              type: boolean
          type: object
      type: object
    EmployeeResource:
      properties:
        id:
          description: UUID of the employee
          type: string
          format: uuid
        externalKey:
          description: External key associated with the employee
          type: string
          nullable: true
        socialSecurityNumber:
          description: The SSN(BSN) of the employee.
          type: string
          pattern: ^\d{9}$
          nullable: true
        noRisk:
          description: No risk indication for the Employee.
          type: boolean
        sfb:
          description: Structural Functional Disability (SFB) status of the Employee.
          type: boolean
        absenceFrequency:
          description: The number of absences for the employee over the past 12 months. Updated nightly.
          type: integer
        person:
          oneOf:
            - $ref: '#/components/schemas/EmployerPersonResource'
          nullable: true
          description: The personal details associated with the employee, available if the relation is included in the query
        addresses:
          description: The addresses associated with the employee, available if the relation is included in the query
          type: array
          items:
            $ref: '#/components/schemas/EmployerPersonAddressResource'
          nullable: true
        communicationMethods:
          description: The communication methods associated with the employee, available if the relation is included in the query
          type: array
          items:
            $ref: '#/components/schemas/EmployerPersonCommunicationsResource'
          nullable: true
        employmentContract:
          oneOf:
            - $ref: '#/components/schemas/EmploymentContractResource'
          nullable: true
          description: The employment contract associated with the employee, available if the relation is included in the query
        dateCreated:
          description: The date and time the employee was created in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the absence course was last updated in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dossiers:
          type: array
          items:
            $ref: '#/components/schemas/Dossier'
        employments:
          type: array
          items:
            $ref: '#/components/schemas/Employment'
      type: object
    PatchEmployerRequestBody:
      description: Employer data
      properties:
        id:
          description: The id of the employer to be updated, mutually exclusive with 'key'
          type: string
          format: uuid
          example: 4453e0e4-1d5d-4c1e-ac42-c541c50a34a3
        key:
          description: The external key of the employer to be updated, mutually exclusive with 'id'
          type: string
          example: 1234@external-key|test
        name:
          description: The (legal) name of the employer
          type: string
          example: Employer B.V.
        externalKey:
          description: Sets a new external key for the employer
          type: string
          example: 1234@external-key|test
        relationNumber:
          type: string
          example: Relation number
          nullable: true
        policyNumber:
          type: string
          example: Policy number
          nullable: true
        email:
          type: string
          example: email@email.com
          nullable: true
        phone:
          type: string
          example: '0612345678'
          nullable: true
        employerDivisionId:
          type: string
          format: uuid
          nullable: true
        companyDoctorId:
          type: string
          format: uuid
          nullable: true
        dossierOfficerId:
          type: string
          format: uuid
          nullable: true
        arboServiceId:
          type: string
          format: uuid
          nullable: true
        visitAddress:
          $ref: '#/components/schemas/Address'
        postalAddress:
          $ref: '#/components/schemas/Address'
        contract:
          required:
            - contractType
            - partnershipId
            - dateStart
          properties:
            contractTypeId:
              type: string
              example: uuid
            partnershipId:
              type: string
              example: uuid
            contractnumber:
              type: string
              example: abc123
            serviceTypeId:
              type: string
              example: uuid
            accountnumber:
              type: string
              example: abc123
            dateStart:
              description: YYYY-MM-DD
              type: string
              format: date-time
            dateEnd:
              description: YYYY-MM-DD, defaults to NULL
              type: string
              format: date-time
              nullable: true
          type: object
      type: object
    PostEmployerRequestBody:
      description: Employer data
      required:
        - name
        - contract
      properties:
        name:
          type: string
          example: Employer name
        externalKey:
          type: string
          example: External key
        relationNumber:
          type: string
          example: Relation number
        policyNumber:
          type: string
          example: Policy number
        email:
          type: string
          example: email@email.com
        phone:
          type: string
          example: '0612345678'
        employerDivisionId:
          type: string
          example: uuid
        companyDoctorId:
          type: string
          example: uuid
        dossierOfficerId:
          type: string
          example: uuid
        arboServiceId:
          type: integer
          example: 1
        visitAddress:
          $ref: '#/components/schemas/Address'
        postalAddress:
          $ref: '#/components/schemas/Address'
        contract:
          required:
            - contractTypeId
            - partnershipId
            - dateStart
          properties:
            contractTypeId:
              type: string
              example: uuid
            partnershipId:
              type: string
              example: uuid
            contractnumber:
              type: string
              example: abc123
            serviceTypeId:
              type: string
              example: uuid
            accountnumber:
              type: string
              example: abc123
            dateStart:
              description: YYYY-MM-DD
              type: string
              format: date-time
            dateEnd:
              description: YYYY-MM-DD, defaults to NULL
              type: string
              format: date-time
              nullable: true
          type: object
      type: object
    Address:
      description: Address
      required:
        - street
        - number
        - postalCode
        - city
        - region
        - country
      properties:
        street:
          type: string
          example: Street
        number:
          type: string
          example: 15a
        postalCode:
          type: string
          example: 1234AB
        country:
          type: string
          example: NL
        region:
          type: string
          example: Region
        city:
          type: string
          example: City
      type: object
    ArboService:
      properties:
        id:
          description: UUID of the arbo service
          type: string
        externalKey:
          description: The external key associated with the arbo service
          type: string
        migrationKey:
          description: The migration key associated with the arbo service
          type: string
        name:
          description: The name of the arbo service
          type: string
        dateCreated:
          description: The date the arbo service was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the arbo service was updated
          type: string
          format: date-time
      type: object
    EmployerAddress:
      properties:
        uuid:
          description: UUID of the employer  address
          type: string
        externalKey:
          description: The external key associated with the employer  address
          type: string
        migration_key:
          description: The migration key associated with the employer  address
          type: string
        country:
          description: The country of the employer address
          type: string
        street:
          description: The street of the employer address
          type: string
        number:
          description: The number of the employer address
          type: string
        postalCode:
          description: The postal code of the employer address
          type: string
        city:
          description: The city of the employer address
          type: string
        dateCreated:
          description: The date the employer address was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the employer address was updated
          type: string
          format: date-time
      type: object
    EmployerCommunication:
      properties:
        externalKey:
          description: The external key associated with the employer communication
          type: string
        migrationKey:
          description: The migration key associated with the employer communication
          type: string
        employerId:
          description: The employer id associated with the employer communication
          type: string
        type:
          description: The type of the employer communication, e.g. 'email' or 'phone', etc.
          type: string
        value:
          description: The value of the communication method (e.g. email address, phone number)
          type: string
        isPrimary:
          description: Whether this is the primary means of communication for this type
          type: boolean
        dateCreated:
          description: The date the employer communication was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the employer communication was updated
          type: string
          format: date-time
      type: object
    Employer:
      properties:
        id:
          description: UUID of the employer
          type: string
        externalKey:
          description: The external key associated with the employer
          type: string
        migrationKey:
          description: The migration key associated with the employer
          type: string
        name:
          description: The name of the employer
          type: string
        relationNumber:
          description: The relation number of the employer
          type: string
        policyNumber:
          description: The policy number of the employer
          type: string
        communications:
          type: array
          items:
            $ref: '#/components/schemas/EmployerCommunication'
        allowCommunications:
          description: Determines whether DWC can send communications (email, etc.) to employees of the employer
          type: boolean
        arboCanView:
          description: The arbo can view of the employer
          type: boolean
        arboCanEdit:
          description: The arbo can edit of the employer
          type: boolean
        absencePregnancyRegistrationByInterface:
          description: The absence pregnancy registration by interface of the employer
          type: boolean
        insurancePolicies:
          type: array
          items:
            $ref: '#/components/schemas/InsurancePolicy'
        employerDivision:
          $ref: '#/components/schemas/EmployerDivision'
        companyDoctor:
          $ref: '#/components/schemas/CompanyDoctor'
        dossierOfficer:
          $ref: '#/components/schemas/DossierOfficer'
        arboService:
          $ref: '#/components/schemas/ArboService'
        contracts:
          type: array
          items:
            $ref: '#/components/schemas/Contract'
        visitorAddress:
          $ref: '#/components/schemas/EmployerAddress'
        postalAddress:
          $ref: '#/components/schemas/EmployerAddress'
        contactPersons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPerson'
        ownRiskContracts:
          type: array
          items:
            $ref: '#/components/schemas/OwnRiskContract'
        dateCreated:
          description: The date the employer was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the employer was updated
          type: string
          format: date-time
        remark:
          description: The remark of the employer
          type: string
        organizationalUnitsCount:
          description: The number of organizational units associated with the employer
          type: integer
      type: object
    EmployerDivision:
      title: Employer Division
      properties:
        id:
          description: Unique identifier for the Employer Division
          type: string
          format: uuid
        externalKey:
          description: External key of the Employer Division
          type: string
        migrationKey:
          description: Migration key of the Employer Division
          type: string
        parentId:
          description: UUID of the parent division, if any
          type: string
          format: uuid
        name:
          description: Name of the Employer Division
          type: string
        color:
          description: Color associated with the Employer Division
          type: string
        dateCreated:
          description: Creation date of the Employer Division
          type: string
          format: date-time
        dateUpdated:
          description: Last update date of the Employer Division
          type: string
          format: date-time
      type: object
    EmployerPersonAddressResource:
      properties:
        uuid:
          description: UUID of the employer person address
          type: string
        externalKey:
          description: The external key associated with the employer person address
          type: string
        migration_key:
          description: The migration key associated with the employer person address
          type: string
        street:
          description: The street of the address associated with the employer person address.
          type: string
        number:
          description: The number of the address associated with the employer person address.
          type: string
        postalCode:
          description: The postal code of the address associated with the employer person address.
          type: string
        city:
          description: The city of the address associated with the employer person address.
          type: string
        primary:
          description: Indication if the address is flagged as primary or not.
          type: string
          enum:
            - '0'
            - '1'
        dateCreated:
          description: The date and time the employer person address was created in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the employer person address was last updated in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
      type: object
    EmployerPersonResource:
      properties:
        uuid:
          description: UUID of the employer person
          type: string
        externalKey:
          description: The external key associated with the employer person
          type: string
          nullable: true
        migrationKey:
          description: The migration key associated with the employer person
          type: string
        initials:
          description: The initials of the employer person
          type: string
        firstName:
          description: The first name associated with the employer person
          type: string
          nullable: true
        lastName:
          description: The last name associated with the employer person
          type: string
        lastNamePartner:
          description: The surname of the partner associated with the employer person
          type: string
          nullable: true
        namePreference:
          description: The naming preference associated with the employer person
          type: string
          enum:
            - own
            - partner
            - own-partner
            - partner-own
        prefix:
          description: The prefix associated with the employer person
          type: string
          nullable: true
        prefixPartner:
          description: The prefix of the name of the partner associated with the employer person
          type: string
          nullable: true
        placeOfBirth:
          description: The city of birth associated with the employer person
          type: string
          nullable: true
        gender:
          description: The gender associated with the employer person.
          type: string
          enum:
            - M
            - F
            - X
        dateOfBirth:
          description: The date of birth associated with the employer person.
          type: string
          format: date
        dateOfDeath:
          description: The date of death associated with the employer person.
          type: string
          format: date
          nullable: true
        maritalStatus:
          description: The marital status associated with the employer person
          type: string
          enum:
            - SINGLE
            - MARRIED
            - PARTNERSHIP
            - WIDOWED
            - WIDOWED_AFTER_MARRIAGE
            - WIDOWED_AFTER_PARTNERSHIP
            - DIVORCED
            - DIVORCED_AFTER_MARRIAGE
            - DIVORCED_AFTER_PARTNERSHIP
            - UNKNOWN
        salutation:
          description: The salutation associated with the employer person
          type: string
          enum:
            - full
            - short
        dateCreated:
          description: The date and time the employer person was created in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the employer person was last updated in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
      type: object
    EmployerPersonCommunicationsResource:
      properties:
        uuid:
          description: UUID of the current communication method
          type: string
        externalKey:
          description: The external key associated with the current communication method
          type: string
        migrationKey:
          description: The migration key associated with the current communication method
          type: string
        value:
          description: The value associated with the current communication method
          type: string
        primary:
          description: Indication if the communication method is flagged as primary or not.
          type: boolean
        type:
          description: The type of communication
          type: string
          enum:
            - email
            - phone
            - mobile
        purpose:
          description: The purpose of the communication
          type: string
          enum:
            - personal
            - business
        dateCreated:
          description: The date and time the employer person communication was created in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the employer person communication was last updated in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
      type: object
    EmployerRole:
      properties:
        id:
          type: string
        name:
          type: string
        employerId:
          type: string
        externalKey:
          type: string
        migrationKey:
          type: string
        code:
          type: string
        base_role_name:
          type: string
        active:
          type: boolean
        arboRole:
          oneOf:
            - $ref: '#/components/schemas/ArboRole'
          nullable: true
      type: object
    PatchEmploymentRequestBody:
      properties:
        id:
          description: Employment UUID, mutually exclusive with 'key'
          type: string
          format: uuid
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
        key:
          description: Employment external key, mutually exclusive with 'id'
          type: string
          example: Employment@Key
        externalKey:
          description: The new external key by which to identify the Employment
          type: string
          example: Employment@Key@New
          nullable: true
        waitingDays:
          description: The waiting period for the employment
          type: integer
          example: '3'
          nullable: true
        uwvSector:
          description: The UWV sector for the Employment
          type: integer
          example: '2'
          nullable: true
        employmentEndReason:
          description: The new employment end reason wording for the employment
          type: string
          enum:
            - end-employment
            - sick-during-end-of-employment
            - reach-aow
            - death
            - dismissal
            - retirement
            - temporary-old-age-pension
            - wia
            - termination-of-temporary-employment
            - unknown
            - within-probationary-period
            - dismissal-own-request
            - immediate-dismissal
            - mutual-termination-of-employment
          example: end-employment
          nullable: true
        internalSupervisorId:
          description: The UUID of the new internal supervisor for the employment. Mutually exclusive with 'externalSupervisorId'.
          type: string
          format: uuid
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
          nullable: true
        externalSupervisorId:
          description: The key of the new external supervisor for the employment. Mutually exclusive with 'internalSupervisorId'.
          type: string
          example: external@supervisor@key
          nullable: true
        uwvRiskCode:
          description: The new uwv risk code of the employment
          type: string
          example: testRiskCode
          nullable: true
        employeeNumber:
          description: The new employee number on the employment
          type: string
          example: testEmployeeNumber
          nullable: true
      type: object
    EmploymentContractResource:
      properties:
        uuid:
          description: UUID of the employment contract
          type: string
          format: uuid
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
        externalKey:
          description: The external key associated with the employment contract
          type: string
          example: External@Key
          nullable: true
        migrationKey:
          description: The migration key associated with the employment contract
          type: string
          example: Migration@Key
          nullable: true
        dateStart:
          description: The start date associated with the employment contract.
          type: string
          format: date
        dateEnd:
          description: The end date associated with the employment contract.
          type: string
          format: date
          example: '2000-01-01'
          nullable: true
        jobTitle:
          description: The job title (position) associated with the employment contract
          type: string
          example: Chief Executive Officer
          nullable: true
        employmentType:
          description: UUID of the employment type of the employment contract
          type: string
          example: b4b1ae1a-8683-4f6b-a3f6-3fff05c90d50
        station:
          description: The station associated with the employment contract
          type: string
          example: Third Subdivision
          nullable: true
        normHoursPerWeek:
          description: Standard hours per week associated with the employment contract.
          type: number
          format: float
          nullable: true
        hoursPerWeek:
          description: Hours per week associated with the employment contract.
          type: number
          format: float
          nullable: true
        functionYears:
          description: Function Years information
          type: integer
          nullable: true
        paymentPeriod:
          description: The choice of interval during which the employment contract payment is given out
          type: string
          enum:
            - hour
            - day
            - week
            - four_weeks
            - month
            - year
          example: month
          nullable: true
        grossSalary:
          description: The gross salary associated with the employment contract.
          type: number
          format: float
          example: '99998.12'
          nullable: true
        organizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        univeralSalary:
          description: The universal(uniform) salary associated with the employment contract.
          type: number
          format: float
          example: '99899.34'
          nullable: true
        dateCreated:
          description: The date and time the employment contract was created in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the employment contract was last updated in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
      type: object
    Employment:
      properties:
        uuid:
          description: UUID of the employment
          type: string
        externalKey:
          description: The external key associated with the employment
          type: string
        migrationKey:
          description: The migration key associated with the employment
          type: string
        employmentNumber:
          description: The the total sum of employments of the employee
          type: string
        primary:
          description: Indication if the employment is flagged as primary or not.
          type: boolean
        dateSeniority:
          description: The seniority date of the employee associated with this employment in YYYY-MM-DD HH:MM:SS format.
          type: string
          format: date
        employeeNumber:
          description: The employee number of the employee associated with this employment
          type: integer
        supervisorType:
          description: The type of supervisor associated with this employment
          type: string
        internalSupervisorId:
          description: The UUID of the internal supervisor associated with this employment
          type: string
          format: uuid
          nullable: true
        externalSupervisorId:
          description: The UUID of the external supervisor associated with this employment
          type: string
          format: uuid
          nullable: true
        dateStartChainProvision:
          description: The date of the start of the chain provision in YYYY-MM-DD format
          type: string
          format: date
          nullable: true
        uwvRiskCode:
          description: The UWV risk code of the Employee associated with this employment.
          type: integer
        waitingPeriod:
          description: The waiting period (related to UWV) of the Employee associated with this employment.
          type: integer
        dateCreated:
          description: The date and time the employment was created in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateUpdated:
          description: The date and time the employment was last updated in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
      type: object
    EmploymentType:
      properties:
        id:
          description: UUID of the employment type
          type: string
        externalKey:
          description: The external key of the employment type
          type: string
        migrationKey:
          description: The migration key of the employment type
          type: string
        name:
          description: The name of the employment type
          type: string
        code:
          description: The code of the employment type
          type: string
        indefiniteContract:
          description: Whether the employment type is for a contract of indefinite duration ('onbepaalde tijd')
          type: boolean
        education:
          description: Whether the employment type is for education (internship)
          type: boolean
      type: object
    ExternalSupervisor:
      properties:
        id:
          description: The UUID of the external supervisor.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the external supervisor.
          type: string
          nullable: true
        migrationKey:
          description: The migration key associated with the external supervisor.
          type: string
          nullable: true
        employerId:
          description: The UUID for the employer associated with the external supervisor. Null if the external supervisor is not authorized for the employer, in this scenario they are probably authorized on an OU underneath of the employer
          type: string
          format: uuid
          nullable: true
        organizationalUnitId:
          description: The UUID for the OU associated with the external supervisor. Could be null if the external supervisor is authorized on the employer or the employer division the employer is part of.
          type: string
          format: uuid
          nullable: true
        jobTitle:
          description: The job title (called 'position' in DWC) assigned to theexternal supervisor.
          type: string
          nullable: true
        person:
          $ref: '#/components/schemas/EmployerPersonResource'
      type: object
    InsurancePolicy:
      properties:
        id:
          description: UUID of the insurance policy
          type: string
        externalKey:
          description: External key associated with the insurance policy
          type: string
        migrationKey:
          description: Migration key associated with the insurance policy
          type: string
        policyNumber:
          description: The policy number of the insurance policy
          type: string
        dateStart:
          description: The start date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateEnd:
          description: The end date in YYYY-MM-DD HH:MM:SS format
          type: string
          format: date-time
        dateCreated:
          description: The date the insurance policy was created
          type: string
          format: date-time
        dateUpdated:
          description: The date the insurance policy was updated
          type: string
          format: date-time
      type: object
    MasterPerson:
      properties:
        id:
          description: UUID of the master person
          type: string
        name:
          description: Name of the master person
          type: string
        surname:
          description: Surname of the master person
          type: string
        initials:
          description: Initials of the master person
          type: string
        nickname:
          description: Nickname of the master person
          type: string
      type: object
    Operation:
      properties:
        id:
          description: UUID of the operation
          type: string
        name:
          description: The name of the operation
          type: string
        description:
          description: The description of the operation
          type: string
        normTime:
          description: The time used to perform the operation in minutes
          type: integer
        vatPercentage:
          description: The vat percentage of the operation
          type: integer
        hourlyPayment:
          description: Determines wnether operation has hourly_payment
          type: boolean
        pricePerQuantity:
          description: The unit price of the operation
          type: number
        pricePerHour:
          description: The hourly cost of the operation
          type: number
        internalPrice:
          description: The internal price of the operation
          type: number
        shouldBeBilled:
          description: Determines whether operation shoud be billed
          type: boolean
        dateCreated:
          description: The date of the creation of the operation
          type: string
          format: date-time
        dateUpdated:
          description: The date of the update of the operation
          type: string
          format: date-time
      type: object
    Operationable:
      description: JSON resource representing an billable operation.
      properties:
        id:
          description: UUID of the billable operation.
          type: string
        externalKey:
          description: The external key of the billable operation.
          type: string
        operation:
          $ref: '#/components/schemas/Operation'
        dossier:
          $ref: '#/components/schemas/Dossier'
        dossierTask:
          $ref: '#/components/schemas/DossierTask'
        employmentId:
          description: The ID of the employment associated with the billable operation.
          type: string
        time:
          description: The time associated with the billable operation.
          type: integer
        vatPercentage:
          description: The VAT percentage associated with the billable operation.
          type: integer
        pricePerHour:
          description: The price per hour associated with the billable operation.
          type: number
        pricePerQuantity:
          description: The price per quantity associated with the billable operation.
          type: number
        invoiceDescription:
          description: The invoice description associated with the billable operation.
          type: string
        dateExecuted:
          description: The date executed associated with the billable operation.
          type: string
          format: date
        dateCreated:
          description: The date of creation of the billable operation.
          type: string
          format: date-time
        dateUpdated:
          description: The date of update of the billable operation.
          type: string
          format: date-time
      type: object
    OrganizationalUnitCompany:
      properties:
        legalName:
          description: Legal name of the company, equivalent to the official name of the organizational unit
          type: string
        legalForm:
          description: Legal form of the company, represented as a lowercase string
          type: string
        relationNumber:
          description: Relation number of the company
          type: string
        normHours:
          description: Norm hours per week of the company
          type: number
          example: 40
        kvkNumber:
          description: KVK number of the company
          type: string
        vatNumber:
          description: VAT number of the company
          type: string
        uwv:
          $ref: '#/components/schemas/OrganizationalUnitCompanyUwv'
        dossierOfficer:
          $ref: '#/components/schemas/DossierOfficer'
        companyDoctor:
          $ref: '#/components/schemas/CompanyDoctor'
      type: object
    OrganizationalUnit:
      properties:
        id:
          description: UUID of the organizational unit
          type: string
        externalKey:
          description: External key of the organizational unit
          type: string
        migrationKey:
          description: Migration key of the organizational unit
          type: string
        name:
          description: Name of the organizational unit
          type: string
        code:
          description: Code of the organizational unit
          type: string
        employer:
          $ref: '#/components/schemas/Employer'
        organizationalUnitType:
          $ref: '#/components/schemas/OrganizationalUnitType'
        parentOrganizationalUnit:
          $ref: '#/components/schemas/OrganizationalUnit'
        company:
          $ref: '#/components/schemas/OrganizationalUnitCompany'
        dateStart:
          description: Start date of the organizational unit in ISO8601 format
          type: string
          format: date
        dateEnd:
          description: End date of the organizational unit in ISO8601 format
          type: string
          format: date
        dateCreated:
          description: The datetime of when the organizational unit was created
          type: string
          format: date-time
        dateUpdated:
          description: The datetime of when the organizational unit was updated
          type: string
          format: date-time
      type: object
    OrganizationalUnitType:
      properties:
        id:
          description: UUID of the Organizational Unit Type
          type: string
        externalKey:
          description: External key of the Organizational Unit Type
          type: string
        employer:
          $ref: '#/components/schemas/Employer'
        name:
          description: Name of the Organizational Unit Type
          type: string
        color:
          description: Color associated with the Organizational Unit Type
          type: string
        legalEntity:
          description: Indicates if it is a legal entity
          type: boolean
        active:
          description: Indicates if the Organizational Unit Type is active
          type: boolean
        dateCreated:
          description: Creation date of the Organizational Unit Type
          type: string
          format: date-time
        dateUpdated:
          description: Last update date of the Organizational Unit Type
          type: string
          format: date-time
      type: object
    OrganizationalUnitCompanyUwv:
      properties:
        registrationNumber:
          description: UWV identification number ('aansluitnummer') of the company
          type: string
        riskCode:
          description: UWV risk code of the company
          type: integer
        sectorId:
          description: UWV sector ID of the company
          type: integer
        payrollTaxIdentificationNumber:
          description: Payroll tax identification number ('loonheffingsnummer') of the company
          type: string
      type: object
    RecoveryReason:
      properties:
        id:
          description: The ID of the RecoveryReason.
          type: string
          format: uuid
        externalKey:
          description: The external key associated with the RecoveryReason.
          type: string
        migrationKey:
          description: The migration key associated with the RecoveryReason.
          type: string
        name:
          description: The name of the RecoveryReason.
          type: string
        code:
          description: The code assigned to the RecoveryReason.
          type: string
        isPrimary:
          description: Whether this is a primary RecoveryReason or not.
          type: boolean
      type: object
    Task:
      properties:
        id:
          description: UUID of the Task
          type: string
        externalKey:
          description: External key associated with the  task
          type: string
        migrationKey:
          description: Migration key associated with the  task
          type: string
        title:
          description: title associated with the  task
          type: string
        code:
          description: code associated with the  task
          type: string
        description:
          description: description associated with the  task
          type: string
        dateCreated:
          description: date created associated with the  task
          type: string
          format: date
        dateUpdated:
          description: date updated associated with the  task
          type: string
          format: date
      type: object
    User:
      properties:
        id:
          description: UUID of the user
          type: string
        username:
          description: Username of the user
          type: string
        user_type_id:
          description: User type id of the user
          type: integer
        arboRole:
          $ref: '#/components/schemas/ArboRole'
        teamRole:
          type: object
        teams:
          description: The teams the user is associated with
          type: array
          items:
            type: object
        person:
          $ref: '#/components/schemas/MasterPerson'
        masterPerson:
          $ref: '#/components/schemas/MasterPerson'
        dossiersCount:
          description: Number of dossiers associated with the user
          type: integer
        tasksCount:
          description: Number of tasks associated with the user
          type: integer
      type: object
tags:
  - name: Absence Reasons
    description: Absence Reasons
  - name: Authentication
    description: Authentication
  - name: Health
    description: Health
  - name: User Roles
    description: User Roles
  - name: Company Doctors
    description: Company Doctors
  - name: EmployerContracts
    description: EmployerContracts
  - name: Contracts
    description: Contracts
  - name: AbsenceCourse
    description: AbsenceCourse
  - name: Dossier
    description: Dossier
  - name: DossierContent
    description: DossierContent
  - name: Dossier External Resource
    description: Dossier External Resource
  - name: Return to work advice
    description: Return to work advice
  - name: Dossier Officers
    description: Dossier Officers
  - name: Employee
    description: Employee
  - name: Employer
    description: Employer
  - name: Employer Divisions
    description: Employer Divisions
  - name: Employments
    description: Employments
  - name: External Supervisor
    description: External Supervisor
  - name: Operation
    description: Operation
  - name: Billable Operation
    description: Billable Operation
  - name: Organizational Units
    description: Organizational Units
  - name: PublicAPI
    description: PublicAPI
